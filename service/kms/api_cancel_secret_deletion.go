// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package kms

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCancelSecretDeletionCommon = "CancelSecretDeletion"

// CancelSecretDeletionCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CancelSecretDeletionCommon operation. The "output" return
// value will be populated with the CancelSecretDeletionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelSecretDeletionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelSecretDeletionCommon Send returns without error.
//
// See CancelSecretDeletionCommon for more information on using the CancelSecretDeletionCommon
// API call, and error handling.
//
//    // Example sending a request using the CancelSecretDeletionCommonRequest method.
//    req, resp := client.CancelSecretDeletionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KMS) CancelSecretDeletionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCancelSecretDeletionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelSecretDeletionCommon API operation for KMS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KMS's
// API operation CancelSecretDeletionCommon for usage and error information.
func (c *KMS) CancelSecretDeletionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CancelSecretDeletionCommonRequest(input)
	return out, req.Send()
}

// CancelSecretDeletionCommonWithContext is the same as CancelSecretDeletionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CancelSecretDeletionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KMS) CancelSecretDeletionCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CancelSecretDeletionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCancelSecretDeletion = "CancelSecretDeletion"

// CancelSecretDeletionRequest generates a "byteplus/request.Request" representing the
// client's request for the CancelSecretDeletion operation. The "output" return
// value will be populated with the CancelSecretDeletionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelSecretDeletionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelSecretDeletionCommon Send returns without error.
//
// See CancelSecretDeletion for more information on using the CancelSecretDeletion
// API call, and error handling.
//
//    // Example sending a request using the CancelSecretDeletionRequest method.
//    req, resp := client.CancelSecretDeletionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KMS) CancelSecretDeletionRequest(input *CancelSecretDeletionInput) (req *request.Request, output *CancelSecretDeletionOutput) {
	op := &request.Operation{
		Name:       opCancelSecretDeletion,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CancelSecretDeletionInput{}
	}

	output = &CancelSecretDeletionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelSecretDeletion API operation for KMS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KMS's
// API operation CancelSecretDeletion for usage and error information.
func (c *KMS) CancelSecretDeletion(input *CancelSecretDeletionInput) (*CancelSecretDeletionOutput, error) {
	req, out := c.CancelSecretDeletionRequest(input)
	return out, req.Send()
}

// CancelSecretDeletionWithContext is the same as CancelSecretDeletion with the addition of
// the ability to pass a context and additional request options.
//
// See CancelSecretDeletion for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KMS) CancelSecretDeletionWithContext(ctx byteplus.Context, input *CancelSecretDeletionInput, opts ...request.Option) (*CancelSecretDeletionOutput, error) {
	req, out := c.CancelSecretDeletionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CancelSecretDeletionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// SecretName is a required field
	SecretName *string `min:"2" max:"128" type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CancelSecretDeletionInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelSecretDeletionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CancelSecretDeletionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CancelSecretDeletionInput"}
	if s.SecretName == nil {
		invalidParams.Add(request.NewErrParamRequired("SecretName"))
	}
	if s.SecretName != nil && len(*s.SecretName) < 2 {
		invalidParams.Add(request.NewErrParamMinLen("SecretName", 2))
	}
	if s.SecretName != nil && len(*s.SecretName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("SecretName", 128, *s.SecretName))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSecretName sets the SecretName field's value.
func (s *CancelSecretDeletionInput) SetSecretName(v string) *CancelSecretDeletionInput {
	s.SecretName = &v
	return s
}

type CancelSecretDeletionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CancelSecretDeletionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelSecretDeletionOutput) GoString() string {
	return s.String()
}
