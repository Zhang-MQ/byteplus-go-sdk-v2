// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ark

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opContextCreateCommon = "ContextCreate"

// ContextCreateCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ContextCreateCommon operation. The "output" return
// value will be populated with the ContextCreateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ContextCreateCommon Request to send the API call to the service.
// the "output" return value is not valid until after ContextCreateCommon Send returns without error.
//
// See ContextCreateCommon for more information on using the ContextCreateCommon
// API call, and error handling.
//
//    // Example sending a request using the ContextCreateCommonRequest method.
//    req, resp := client.ContextCreateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) ContextCreateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opContextCreateCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ContextCreateCommon API operation for ARK.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ARK's
// API operation ContextCreateCommon for usage and error information.
func (c *ARK) ContextCreateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ContextCreateCommonRequest(input)
	return out, req.Send()
}

// ContextCreateCommonWithContext is the same as ContextCreateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ContextCreateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) ContextCreateCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ContextCreateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opContextCreate = "ContextCreate"

// ContextCreateRequest generates a "byteplus/request.Request" representing the
// client's request for the ContextCreate operation. The "output" return
// value will be populated with the ContextCreateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ContextCreateCommon Request to send the API call to the service.
// the "output" return value is not valid until after ContextCreateCommon Send returns without error.
//
// See ContextCreate for more information on using the ContextCreate
// API call, and error handling.
//
//    // Example sending a request using the ContextCreateRequest method.
//    req, resp := client.ContextCreateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) ContextCreateRequest(input *ContextCreateInput) (req *request.Request, output *ContextCreateOutput) {
	op := &request.Operation{
		Name:       opContextCreate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ContextCreateInput{}
	}

	output = &ContextCreateOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ContextCreate API operation for ARK.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ARK's
// API operation ContextCreate for usage and error information.
func (c *ARK) ContextCreate(input *ContextCreateInput) (*ContextCreateOutput, error) {
	req, out := c.ContextCreateRequest(input)
	return out, req.Send()
}

// ContextCreateWithContext is the same as ContextCreate with the addition of
// the ability to pass a context and additional request options.
//
// See ContextCreate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) ContextCreateWithContext(ctx byteplus.Context, input *ContextCreateInput, opts ...request.Option) (*ContextCreateOutput, error) {
	req, out := c.ContextCreateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ContextCreateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Messages *MessagesForContextCreateInput `type:"structure" json:"messages,omitempty"`

	// Mode is a required field
	Mode *string `type:"string" json:"mode,omitempty" required:"true"`

	// Model is a required field
	Model *string `type:"string" json:"model,omitempty" required:"true"`

	Truncation_strategy *Truncation_strategyForContextCreateInput `type:"structure" json:"truncation_strategy,omitempty"`

	Ttl *int32 `type:"int32" json:"ttl,omitempty"`
}

// String returns the string representation
func (s ContextCreateInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ContextCreateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ContextCreateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ContextCreateInput"}
	if s.Mode == nil {
		invalidParams.Add(request.NewErrParamRequired("Mode"))
	}
	if s.Model == nil {
		invalidParams.Add(request.NewErrParamRequired("Model"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetMessages sets the Messages field's value.
func (s *ContextCreateInput) SetMessages(v *MessagesForContextCreateInput) *ContextCreateInput {
	s.Messages = v
	return s
}

// SetMode sets the Mode field's value.
func (s *ContextCreateInput) SetMode(v string) *ContextCreateInput {
	s.Mode = &v
	return s
}

// SetModel sets the Model field's value.
func (s *ContextCreateInput) SetModel(v string) *ContextCreateInput {
	s.Model = &v
	return s
}

// SetTruncation_strategy sets the Truncation_strategy field's value.
func (s *ContextCreateInput) SetTruncation_strategy(v *Truncation_strategyForContextCreateInput) *ContextCreateInput {
	s.Truncation_strategy = v
	return s
}

// SetTtl sets the Ttl field's value.
func (s *ContextCreateInput) SetTtl(v int32) *ContextCreateInput {
	s.Ttl = &v
	return s
}

type ContextCreateOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:"id,omitempty"`

	Model *string `type:"string" json:"model,omitempty"`

	Truncation_strategy *Truncation_strategyForContextCreateOutput `type:"structure" json:"truncation_strategy,omitempty"`

	Ttl *int32 `type:"int32" json:"ttl,omitempty"`

	Usage *UsageForContextCreateOutput `type:"structure" json:"usage,omitempty"`
}

// String returns the string representation
func (s ContextCreateOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ContextCreateOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *ContextCreateOutput) SetId(v string) *ContextCreateOutput {
	s.Id = &v
	return s
}

// SetModel sets the Model field's value.
func (s *ContextCreateOutput) SetModel(v string) *ContextCreateOutput {
	s.Model = &v
	return s
}

// SetTruncation_strategy sets the Truncation_strategy field's value.
func (s *ContextCreateOutput) SetTruncation_strategy(v *Truncation_strategyForContextCreateOutput) *ContextCreateOutput {
	s.Truncation_strategy = v
	return s
}

// SetTtl sets the Ttl field's value.
func (s *ContextCreateOutput) SetTtl(v int32) *ContextCreateOutput {
	s.Ttl = &v
	return s
}

// SetUsage sets the Usage field's value.
func (s *ContextCreateOutput) SetUsage(v *UsageForContextCreateOutput) *ContextCreateOutput {
	s.Usage = v
	return s
}

type MessagesForContextCreateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s MessagesForContextCreateInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s MessagesForContextCreateInput) GoString() string {
	return s.String()
}

type Truncation_strategyForContextCreateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Last_history_tokens *int32 `type:"int32" json:"last_history_tokens,omitempty"`

	Rolling_tokens *bool `type:"boolean" json:"rolling_tokens,omitempty"`

	Type *string `type:"string" json:"type,omitempty"`
}

// String returns the string representation
func (s Truncation_strategyForContextCreateInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Truncation_strategyForContextCreateInput) GoString() string {
	return s.String()
}

// SetLast_history_tokens sets the Last_history_tokens field's value.
func (s *Truncation_strategyForContextCreateInput) SetLast_history_tokens(v int32) *Truncation_strategyForContextCreateInput {
	s.Last_history_tokens = &v
	return s
}

// SetRolling_tokens sets the Rolling_tokens field's value.
func (s *Truncation_strategyForContextCreateInput) SetRolling_tokens(v bool) *Truncation_strategyForContextCreateInput {
	s.Rolling_tokens = &v
	return s
}

// SetType sets the Type field's value.
func (s *Truncation_strategyForContextCreateInput) SetType(v string) *Truncation_strategyForContextCreateInput {
	s.Type = &v
	return s
}

type Truncation_strategyForContextCreateOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Last_history_tokens *int32 `type:"int32" json:"last_history_tokens,omitempty"`

	Rolling_tokens *bool `type:"boolean" json:"rolling_tokens,omitempty"`

	Type *string `type:"string" json:"type,omitempty"`
}

// String returns the string representation
func (s Truncation_strategyForContextCreateOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Truncation_strategyForContextCreateOutput) GoString() string {
	return s.String()
}

// SetLast_history_tokens sets the Last_history_tokens field's value.
func (s *Truncation_strategyForContextCreateOutput) SetLast_history_tokens(v int32) *Truncation_strategyForContextCreateOutput {
	s.Last_history_tokens = &v
	return s
}

// SetRolling_tokens sets the Rolling_tokens field's value.
func (s *Truncation_strategyForContextCreateOutput) SetRolling_tokens(v bool) *Truncation_strategyForContextCreateOutput {
	s.Rolling_tokens = &v
	return s
}

// SetType sets the Type field's value.
func (s *Truncation_strategyForContextCreateOutput) SetType(v string) *Truncation_strategyForContextCreateOutput {
	s.Type = &v
	return s
}

type UsageForContextCreateOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s UsageForContextCreateOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UsageForContextCreateOutput) GoString() string {
	return s.String()
}
