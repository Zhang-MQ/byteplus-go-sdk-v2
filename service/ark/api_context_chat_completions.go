// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ark

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opContextChatCompletionsCommon = "ContextChatCompletions"

// ContextChatCompletionsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ContextChatCompletionsCommon operation. The "output" return
// value will be populated with the ContextChatCompletionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ContextChatCompletionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ContextChatCompletionsCommon Send returns without error.
//
// See ContextChatCompletionsCommon for more information on using the ContextChatCompletionsCommon
// API call, and error handling.
//
//    // Example sending a request using the ContextChatCompletionsCommonRequest method.
//    req, resp := client.ContextChatCompletionsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) ContextChatCompletionsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opContextChatCompletionsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ContextChatCompletionsCommon API operation for ARK.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ARK's
// API operation ContextChatCompletionsCommon for usage and error information.
func (c *ARK) ContextChatCompletionsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ContextChatCompletionsCommonRequest(input)
	return out, req.Send()
}

// ContextChatCompletionsCommonWithContext is the same as ContextChatCompletionsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ContextChatCompletionsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) ContextChatCompletionsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ContextChatCompletionsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opContextChatCompletions = "ContextChatCompletions"

// ContextChatCompletionsRequest generates a "byteplus/request.Request" representing the
// client's request for the ContextChatCompletions operation. The "output" return
// value will be populated with the ContextChatCompletionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ContextChatCompletionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ContextChatCompletionsCommon Send returns without error.
//
// See ContextChatCompletions for more information on using the ContextChatCompletions
// API call, and error handling.
//
//    // Example sending a request using the ContextChatCompletionsRequest method.
//    req, resp := client.ContextChatCompletionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) ContextChatCompletionsRequest(input *ContextChatCompletionsInput) (req *request.Request, output *ContextChatCompletionsOutput) {
	op := &request.Operation{
		Name:       opContextChatCompletions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ContextChatCompletionsInput{}
	}

	output = &ContextChatCompletionsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ContextChatCompletions API operation for ARK.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ARK's
// API operation ContextChatCompletions for usage and error information.
func (c *ARK) ContextChatCompletions(input *ContextChatCompletionsInput) (*ContextChatCompletionsOutput, error) {
	req, out := c.ContextChatCompletionsRequest(input)
	return out, req.Send()
}

// ContextChatCompletionsWithContext is the same as ContextChatCompletions with the addition of
// the ability to pass a context and additional request options.
//
// See ContextChatCompletions for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) ContextChatCompletionsWithContext(ctx byteplus.Context, input *ContextChatCompletionsInput, opts ...request.Option) (*ContextChatCompletionsOutput, error) {
	req, out := c.ContextChatCompletionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ContextChatCompletionsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Context_id is a required field
	Context_id *string `type:"string" json:"context_id,omitempty" required:"true"`

	Frequency_penalty *float64 `type:"float" json:"frequency_penalty,omitempty"`

	Logit_bias *Logit_biasForContextChatCompletionsInput `type:"structure" json:"logit_bias,omitempty"`

	Logprobs *bool `type:"boolean" json:"logprobs,omitempty"`

	Max_tokens *int32 `type:"int32" json:"max_tokens,omitempty"`

	Messages *MessagesForContextChatCompletionsInput `type:"structure" json:"messages,omitempty"`

	// Model is a required field
	Model *string `type:"string" json:"model,omitempty" required:"true"`

	Presence_penalty *float64 `type:"float" json:"presence_penalty,omitempty"`

	Stop []*string `type:"list" json:"stop,omitempty"`

	Stream *bool `type:"boolean" json:"stream,omitempty"`

	Stream_options *Stream_optionsForContextChatCompletionsInput `type:"structure" json:"stream_options,omitempty"`

	Temperature *float64 `type:"float" json:"temperature,omitempty"`

	Top_logprobs *int32 `type:"int32" json:"top_logprobs,omitempty"`

	Top_p *float64 `type:"float" json:"top_p,omitempty"`
}

// String returns the string representation
func (s ContextChatCompletionsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ContextChatCompletionsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ContextChatCompletionsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ContextChatCompletionsInput"}
	if s.Context_id == nil {
		invalidParams.Add(request.NewErrParamRequired("Context_id"))
	}
	if s.Model == nil {
		invalidParams.Add(request.NewErrParamRequired("Model"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetContext_id sets the Context_id field's value.
func (s *ContextChatCompletionsInput) SetContext_id(v string) *ContextChatCompletionsInput {
	s.Context_id = &v
	return s
}

// SetFrequency_penalty sets the Frequency_penalty field's value.
func (s *ContextChatCompletionsInput) SetFrequency_penalty(v float64) *ContextChatCompletionsInput {
	s.Frequency_penalty = &v
	return s
}

// SetLogit_bias sets the Logit_bias field's value.
func (s *ContextChatCompletionsInput) SetLogit_bias(v *Logit_biasForContextChatCompletionsInput) *ContextChatCompletionsInput {
	s.Logit_bias = v
	return s
}

// SetLogprobs sets the Logprobs field's value.
func (s *ContextChatCompletionsInput) SetLogprobs(v bool) *ContextChatCompletionsInput {
	s.Logprobs = &v
	return s
}

// SetMax_tokens sets the Max_tokens field's value.
func (s *ContextChatCompletionsInput) SetMax_tokens(v int32) *ContextChatCompletionsInput {
	s.Max_tokens = &v
	return s
}

// SetMessages sets the Messages field's value.
func (s *ContextChatCompletionsInput) SetMessages(v *MessagesForContextChatCompletionsInput) *ContextChatCompletionsInput {
	s.Messages = v
	return s
}

// SetModel sets the Model field's value.
func (s *ContextChatCompletionsInput) SetModel(v string) *ContextChatCompletionsInput {
	s.Model = &v
	return s
}

// SetPresence_penalty sets the Presence_penalty field's value.
func (s *ContextChatCompletionsInput) SetPresence_penalty(v float64) *ContextChatCompletionsInput {
	s.Presence_penalty = &v
	return s
}

// SetStop sets the Stop field's value.
func (s *ContextChatCompletionsInput) SetStop(v []*string) *ContextChatCompletionsInput {
	s.Stop = v
	return s
}

// SetStream sets the Stream field's value.
func (s *ContextChatCompletionsInput) SetStream(v bool) *ContextChatCompletionsInput {
	s.Stream = &v
	return s
}

// SetStream_options sets the Stream_options field's value.
func (s *ContextChatCompletionsInput) SetStream_options(v *Stream_optionsForContextChatCompletionsInput) *ContextChatCompletionsInput {
	s.Stream_options = v
	return s
}

// SetTemperature sets the Temperature field's value.
func (s *ContextChatCompletionsInput) SetTemperature(v float64) *ContextChatCompletionsInput {
	s.Temperature = &v
	return s
}

// SetTop_logprobs sets the Top_logprobs field's value.
func (s *ContextChatCompletionsInput) SetTop_logprobs(v int32) *ContextChatCompletionsInput {
	s.Top_logprobs = &v
	return s
}

// SetTop_p sets the Top_p field's value.
func (s *ContextChatCompletionsInput) SetTop_p(v float64) *ContextChatCompletionsInput {
	s.Top_p = &v
	return s
}

type ContextChatCompletionsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ContextChatCompletionsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ContextChatCompletionsOutput) GoString() string {
	return s.String()
}

type Logit_biasForContextChatCompletionsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s Logit_biasForContextChatCompletionsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Logit_biasForContextChatCompletionsInput) GoString() string {
	return s.String()
}

type MessagesForContextChatCompletionsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s MessagesForContextChatCompletionsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s MessagesForContextChatCompletionsInput) GoString() string {
	return s.String()
}

type Stream_optionsForContextChatCompletionsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Include_usage *bool `type:"boolean" json:"include_usage,omitempty"`
}

// String returns the string representation
func (s Stream_optionsForContextChatCompletionsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Stream_optionsForContextChatCompletionsInput) GoString() string {
	return s.String()
}

// SetInclude_usage sets the Include_usage field's value.
func (s *Stream_optionsForContextChatCompletionsInput) SetInclude_usage(v bool) *Stream_optionsForContextChatCompletionsInput {
	s.Include_usage = &v
	return s
}
