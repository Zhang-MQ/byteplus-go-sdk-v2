// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ark

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opChatCompletionsTextCommon = "ChatCompletionsText"

// ChatCompletionsTextCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ChatCompletionsTextCommon operation. The "output" return
// value will be populated with the ChatCompletionsTextCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ChatCompletionsTextCommon Request to send the API call to the service.
// the "output" return value is not valid until after ChatCompletionsTextCommon Send returns without error.
//
// See ChatCompletionsTextCommon for more information on using the ChatCompletionsTextCommon
// API call, and error handling.
//
//    // Example sending a request using the ChatCompletionsTextCommonRequest method.
//    req, resp := client.ChatCompletionsTextCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) ChatCompletionsTextCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opChatCompletionsTextCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ChatCompletionsTextCommon API operation for ARK.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ARK's
// API operation ChatCompletionsTextCommon for usage and error information.
func (c *ARK) ChatCompletionsTextCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ChatCompletionsTextCommonRequest(input)
	return out, req.Send()
}

// ChatCompletionsTextCommonWithContext is the same as ChatCompletionsTextCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ChatCompletionsTextCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) ChatCompletionsTextCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ChatCompletionsTextCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opChatCompletionsText = "ChatCompletionsText"

// ChatCompletionsTextRequest generates a "byteplus/request.Request" representing the
// client's request for the ChatCompletionsText operation. The "output" return
// value will be populated with the ChatCompletionsTextCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ChatCompletionsTextCommon Request to send the API call to the service.
// the "output" return value is not valid until after ChatCompletionsTextCommon Send returns without error.
//
// See ChatCompletionsText for more information on using the ChatCompletionsText
// API call, and error handling.
//
//    // Example sending a request using the ChatCompletionsTextRequest method.
//    req, resp := client.ChatCompletionsTextRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) ChatCompletionsTextRequest(input *ChatCompletionsTextInput) (req *request.Request, output *ChatCompletionsTextOutput) {
	op := &request.Operation{
		Name:       opChatCompletionsText,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ChatCompletionsTextInput{}
	}

	output = &ChatCompletionsTextOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ChatCompletionsText API operation for ARK.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ARK's
// API operation ChatCompletionsText for usage and error information.
func (c *ARK) ChatCompletionsText(input *ChatCompletionsTextInput) (*ChatCompletionsTextOutput, error) {
	req, out := c.ChatCompletionsTextRequest(input)
	return out, req.Send()
}

// ChatCompletionsTextWithContext is the same as ChatCompletionsText with the addition of
// the ability to pass a context and additional request options.
//
// See ChatCompletionsText for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) ChatCompletionsTextWithContext(ctx byteplus.Context, input *ChatCompletionsTextInput, opts ...request.Option) (*ChatCompletionsTextOutput, error) {
	req, out := c.ChatCompletionsTextRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ChatCompletionsTextInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Frequency_penalty *float64 `type:"float" json:"frequency_penalty,omitempty"`

	Logit_bias *Logit_biasForChatCompletionsTextInput `type:"structure" json:"logit_bias,omitempty"`

	Logprobs *bool `type:"boolean" json:"logprobs,omitempty"`

	Max_tokens *int32 `type:"int32" json:"max_tokens,omitempty"`

	Messages []*MessageForChatCompletionsTextInput `type:"list" json:"messages,omitempty"`

	// Model is a required field
	Model *string `type:"string" json:"model,omitempty" required:"true"`

	Presence_penalty *float64 `type:"float" json:"presence_penalty,omitempty"`

	Stop []*string `type:"list" json:"stop,omitempty"`

	Stream *bool `type:"boolean" json:"stream,omitempty"`

	Stream_options *Stream_optionsForChatCompletionsTextInput `type:"structure" json:"stream_options,omitempty"`

	Temperature *float64 `type:"float" json:"temperature,omitempty"`

	Tools []*ToolForChatCompletionsTextInput `type:"list" json:"tools,omitempty"`

	Top_logprobs *int32 `type:"int32" json:"top_logprobs,omitempty"`

	Top_p *float64 `type:"float" json:"top_p,omitempty"`
}

// String returns the string representation
func (s ChatCompletionsTextInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ChatCompletionsTextInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ChatCompletionsTextInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ChatCompletionsTextInput"}
	if s.Model == nil {
		invalidParams.Add(request.NewErrParamRequired("Model"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFrequency_penalty sets the Frequency_penalty field's value.
func (s *ChatCompletionsTextInput) SetFrequency_penalty(v float64) *ChatCompletionsTextInput {
	s.Frequency_penalty = &v
	return s
}

// SetLogit_bias sets the Logit_bias field's value.
func (s *ChatCompletionsTextInput) SetLogit_bias(v *Logit_biasForChatCompletionsTextInput) *ChatCompletionsTextInput {
	s.Logit_bias = v
	return s
}

// SetLogprobs sets the Logprobs field's value.
func (s *ChatCompletionsTextInput) SetLogprobs(v bool) *ChatCompletionsTextInput {
	s.Logprobs = &v
	return s
}

// SetMax_tokens sets the Max_tokens field's value.
func (s *ChatCompletionsTextInput) SetMax_tokens(v int32) *ChatCompletionsTextInput {
	s.Max_tokens = &v
	return s
}

// SetMessages sets the Messages field's value.
func (s *ChatCompletionsTextInput) SetMessages(v []*MessageForChatCompletionsTextInput) *ChatCompletionsTextInput {
	s.Messages = v
	return s
}

// SetModel sets the Model field's value.
func (s *ChatCompletionsTextInput) SetModel(v string) *ChatCompletionsTextInput {
	s.Model = &v
	return s
}

// SetPresence_penalty sets the Presence_penalty field's value.
func (s *ChatCompletionsTextInput) SetPresence_penalty(v float64) *ChatCompletionsTextInput {
	s.Presence_penalty = &v
	return s
}

// SetStop sets the Stop field's value.
func (s *ChatCompletionsTextInput) SetStop(v []*string) *ChatCompletionsTextInput {
	s.Stop = v
	return s
}

// SetStream sets the Stream field's value.
func (s *ChatCompletionsTextInput) SetStream(v bool) *ChatCompletionsTextInput {
	s.Stream = &v
	return s
}

// SetStream_options sets the Stream_options field's value.
func (s *ChatCompletionsTextInput) SetStream_options(v *Stream_optionsForChatCompletionsTextInput) *ChatCompletionsTextInput {
	s.Stream_options = v
	return s
}

// SetTemperature sets the Temperature field's value.
func (s *ChatCompletionsTextInput) SetTemperature(v float64) *ChatCompletionsTextInput {
	s.Temperature = &v
	return s
}

// SetTools sets the Tools field's value.
func (s *ChatCompletionsTextInput) SetTools(v []*ToolForChatCompletionsTextInput) *ChatCompletionsTextInput {
	s.Tools = v
	return s
}

// SetTop_logprobs sets the Top_logprobs field's value.
func (s *ChatCompletionsTextInput) SetTop_logprobs(v int32) *ChatCompletionsTextInput {
	s.Top_logprobs = &v
	return s
}

// SetTop_p sets the Top_p field's value.
func (s *ChatCompletionsTextInput) SetTop_p(v float64) *ChatCompletionsTextInput {
	s.Top_p = &v
	return s
}

type ChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Choices []*ChoiceForChatCompletionsTextOutput `type:"list" json:"choices,omitempty"`

	Created *int32 `type:"int32" json:"created,omitempty"`

	Id *string `type:"string" json:"id,omitempty"`

	Model *string `type:"string" json:"model,omitempty"`

	Object *string `type:"string" json:"object,omitempty"`

	Usage *UsageForChatCompletionsTextOutput `type:"structure" json:"usage,omitempty"`
}

// String returns the string representation
func (s ChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ChatCompletionsTextOutput) GoString() string {
	return s.String()
}

// SetChoices sets the Choices field's value.
func (s *ChatCompletionsTextOutput) SetChoices(v []*ChoiceForChatCompletionsTextOutput) *ChatCompletionsTextOutput {
	s.Choices = v
	return s
}

// SetCreated sets the Created field's value.
func (s *ChatCompletionsTextOutput) SetCreated(v int32) *ChatCompletionsTextOutput {
	s.Created = &v
	return s
}

// SetId sets the Id field's value.
func (s *ChatCompletionsTextOutput) SetId(v string) *ChatCompletionsTextOutput {
	s.Id = &v
	return s
}

// SetModel sets the Model field's value.
func (s *ChatCompletionsTextOutput) SetModel(v string) *ChatCompletionsTextOutput {
	s.Model = &v
	return s
}

// SetObject sets the Object field's value.
func (s *ChatCompletionsTextOutput) SetObject(v string) *ChatCompletionsTextOutput {
	s.Object = &v
	return s
}

// SetUsage sets the Usage field's value.
func (s *ChatCompletionsTextOutput) SetUsage(v *UsageForChatCompletionsTextOutput) *ChatCompletionsTextOutput {
	s.Usage = v
	return s
}

type ChoiceForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Delta *DeltaForChatCompletionsTextOutput `type:"structure" json:"delta,omitempty"`

	Finish_reason *string `type:"string" json:"finish_reason,omitempty"`

	Index *int32 `type:"int32" json:"index,omitempty"`

	Logprobs *LogprobsForChatCompletionsTextOutput `type:"structure" json:"logprobs,omitempty"`

	Message *MessageForChatCompletionsTextOutput `type:"structure" json:"message,omitempty"`
}

// String returns the string representation
func (s ChoiceForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ChoiceForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

// SetDelta sets the Delta field's value.
func (s *ChoiceForChatCompletionsTextOutput) SetDelta(v *DeltaForChatCompletionsTextOutput) *ChoiceForChatCompletionsTextOutput {
	s.Delta = v
	return s
}

// SetFinish_reason sets the Finish_reason field's value.
func (s *ChoiceForChatCompletionsTextOutput) SetFinish_reason(v string) *ChoiceForChatCompletionsTextOutput {
	s.Finish_reason = &v
	return s
}

// SetIndex sets the Index field's value.
func (s *ChoiceForChatCompletionsTextOutput) SetIndex(v int32) *ChoiceForChatCompletionsTextOutput {
	s.Index = &v
	return s
}

// SetLogprobs sets the Logprobs field's value.
func (s *ChoiceForChatCompletionsTextOutput) SetLogprobs(v *LogprobsForChatCompletionsTextOutput) *ChoiceForChatCompletionsTextOutput {
	s.Logprobs = v
	return s
}

// SetMessage sets the Message field's value.
func (s *ChoiceForChatCompletionsTextOutput) SetMessage(v *MessageForChatCompletionsTextOutput) *ChoiceForChatCompletionsTextOutput {
	s.Message = v
	return s
}

type Completion_tokens_detailsForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s Completion_tokens_detailsForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Completion_tokens_detailsForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

type ContentForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Bytes []*int32 `type:"list" json:"bytes,omitempty"`

	Logprob *float64 `type:"float" json:"logprob,omitempty"`

	Token *string `type:"string" json:"token,omitempty"`

	Top_logprobs []*Top_logprobForChatCompletionsTextOutput `type:"list" json:"top_logprobs,omitempty"`
}

// String returns the string representation
func (s ContentForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ContentForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

// SetBytes sets the Bytes field's value.
func (s *ContentForChatCompletionsTextOutput) SetBytes(v []*int32) *ContentForChatCompletionsTextOutput {
	s.Bytes = v
	return s
}

// SetLogprob sets the Logprob field's value.
func (s *ContentForChatCompletionsTextOutput) SetLogprob(v float64) *ContentForChatCompletionsTextOutput {
	s.Logprob = &v
	return s
}

// SetToken sets the Token field's value.
func (s *ContentForChatCompletionsTextOutput) SetToken(v string) *ContentForChatCompletionsTextOutput {
	s.Token = &v
	return s
}

// SetTop_logprobs sets the Top_logprobs field's value.
func (s *ContentForChatCompletionsTextOutput) SetTop_logprobs(v []*Top_logprobForChatCompletionsTextOutput) *ContentForChatCompletionsTextOutput {
	s.Top_logprobs = v
	return s
}

type ConvertfunctionForChatCompletionsTextInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:"description,omitempty"`

	Name *string `type:"string" json:"name,omitempty"`

	Parameters *ParametersForChatCompletionsTextInput `type:"structure" json:"parameters,omitempty"`
}

// String returns the string representation
func (s ConvertfunctionForChatCompletionsTextInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConvertfunctionForChatCompletionsTextInput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *ConvertfunctionForChatCompletionsTextInput) SetDescription(v string) *ConvertfunctionForChatCompletionsTextInput {
	s.Description = &v
	return s
}

// SetName sets the Name field's value.
func (s *ConvertfunctionForChatCompletionsTextInput) SetName(v string) *ConvertfunctionForChatCompletionsTextInput {
	s.Name = &v
	return s
}

// SetParameters sets the Parameters field's value.
func (s *ConvertfunctionForChatCompletionsTextInput) SetParameters(v *ParametersForChatCompletionsTextInput) *ConvertfunctionForChatCompletionsTextInput {
	s.Parameters = v
	return s
}

type Converttool_callForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Function *FunctionForChatCompletionsTextOutput `type:"structure" json:"function,omitempty"`

	Id *string `type:"string" json:"id,omitempty"`

	Type *string `type:"string" json:"type,omitempty"`
}

// String returns the string representation
func (s Converttool_callForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Converttool_callForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

// SetFunction sets the Function field's value.
func (s *Converttool_callForChatCompletionsTextOutput) SetFunction(v *FunctionForChatCompletionsTextOutput) *Converttool_callForChatCompletionsTextOutput {
	s.Function = v
	return s
}

// SetId sets the Id field's value.
func (s *Converttool_callForChatCompletionsTextOutput) SetId(v string) *Converttool_callForChatCompletionsTextOutput {
	s.Id = &v
	return s
}

// SetType sets the Type field's value.
func (s *Converttool_callForChatCompletionsTextOutput) SetType(v string) *Converttool_callForChatCompletionsTextOutput {
	s.Type = &v
	return s
}

type DeltaForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content *string `type:"string" json:"content,omitempty"`

	Role *string `type:"string" json:"role,omitempty"`

	Tool_calls []*Tool_callForChatCompletionsTextOutput `type:"list" json:"tool_calls,omitempty"`
}

// String returns the string representation
func (s DeltaForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeltaForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *DeltaForChatCompletionsTextOutput) SetContent(v string) *DeltaForChatCompletionsTextOutput {
	s.Content = &v
	return s
}

// SetRole sets the Role field's value.
func (s *DeltaForChatCompletionsTextOutput) SetRole(v string) *DeltaForChatCompletionsTextOutput {
	s.Role = &v
	return s
}

// SetTool_calls sets the Tool_calls field's value.
func (s *DeltaForChatCompletionsTextOutput) SetTool_calls(v []*Tool_callForChatCompletionsTextOutput) *DeltaForChatCompletionsTextOutput {
	s.Tool_calls = v
	return s
}

type FunctionForChatCompletionsTextInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Arguments *string `type:"string" json:"arguments,omitempty"`

	Name *string `type:"string" json:"name,omitempty"`
}

// String returns the string representation
func (s FunctionForChatCompletionsTextInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s FunctionForChatCompletionsTextInput) GoString() string {
	return s.String()
}

// SetArguments sets the Arguments field's value.
func (s *FunctionForChatCompletionsTextInput) SetArguments(v string) *FunctionForChatCompletionsTextInput {
	s.Arguments = &v
	return s
}

// SetName sets the Name field's value.
func (s *FunctionForChatCompletionsTextInput) SetName(v string) *FunctionForChatCompletionsTextInput {
	s.Name = &v
	return s
}

type FunctionForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Arguments *string `type:"string" json:"arguments,omitempty"`

	Name *string `type:"string" json:"name,omitempty"`
}

// String returns the string representation
func (s FunctionForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s FunctionForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

// SetArguments sets the Arguments field's value.
func (s *FunctionForChatCompletionsTextOutput) SetArguments(v string) *FunctionForChatCompletionsTextOutput {
	s.Arguments = &v
	return s
}

// SetName sets the Name field's value.
func (s *FunctionForChatCompletionsTextOutput) SetName(v string) *FunctionForChatCompletionsTextOutput {
	s.Name = &v
	return s
}

type Logit_biasForChatCompletionsTextInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s Logit_biasForChatCompletionsTextInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Logit_biasForChatCompletionsTextInput) GoString() string {
	return s.String()
}

type LogprobsForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content []*ContentForChatCompletionsTextOutput `type:"list" json:"content,omitempty"`
}

// String returns the string representation
func (s LogprobsForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s LogprobsForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *LogprobsForChatCompletionsTextOutput) SetContent(v []*ContentForChatCompletionsTextOutput) *LogprobsForChatCompletionsTextOutput {
	s.Content = v
	return s
}

type MessageForChatCompletionsTextInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content *string `type:"string" json:"content,omitempty"`

	Role *string `type:"string" json:"role,omitempty" enum:"EnumOfroleForChatCompletionsTextInput"`

	Tool_call_id *string `type:"string" json:"tool_call_id,omitempty"`

	Tool_calls []*Tool_callForChatCompletionsTextInput `type:"list" json:"tool_calls,omitempty"`
}

// String returns the string representation
func (s MessageForChatCompletionsTextInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s MessageForChatCompletionsTextInput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *MessageForChatCompletionsTextInput) SetContent(v string) *MessageForChatCompletionsTextInput {
	s.Content = &v
	return s
}

// SetRole sets the Role field's value.
func (s *MessageForChatCompletionsTextInput) SetRole(v string) *MessageForChatCompletionsTextInput {
	s.Role = &v
	return s
}

// SetTool_call_id sets the Tool_call_id field's value.
func (s *MessageForChatCompletionsTextInput) SetTool_call_id(v string) *MessageForChatCompletionsTextInput {
	s.Tool_call_id = &v
	return s
}

// SetTool_calls sets the Tool_calls field's value.
func (s *MessageForChatCompletionsTextInput) SetTool_calls(v []*Tool_callForChatCompletionsTextInput) *MessageForChatCompletionsTextInput {
	s.Tool_calls = v
	return s
}

type MessageForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content *string `type:"string" json:"content,omitempty"`

	Reasoning_content *string `type:"string" json:"reasoning_content,omitempty"`

	Role *string `type:"string" json:"role,omitempty"`

	Tool_calls []*Converttool_callForChatCompletionsTextOutput `type:"list" json:"tool_calls,omitempty"`
}

// String returns the string representation
func (s MessageForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s MessageForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *MessageForChatCompletionsTextOutput) SetContent(v string) *MessageForChatCompletionsTextOutput {
	s.Content = &v
	return s
}

// SetReasoning_content sets the Reasoning_content field's value.
func (s *MessageForChatCompletionsTextOutput) SetReasoning_content(v string) *MessageForChatCompletionsTextOutput {
	s.Reasoning_content = &v
	return s
}

// SetRole sets the Role field's value.
func (s *MessageForChatCompletionsTextOutput) SetRole(v string) *MessageForChatCompletionsTextOutput {
	s.Role = &v
	return s
}

// SetTool_calls sets the Tool_calls field's value.
func (s *MessageForChatCompletionsTextOutput) SetTool_calls(v []*Converttool_callForChatCompletionsTextOutput) *MessageForChatCompletionsTextOutput {
	s.Tool_calls = v
	return s
}

type ParametersForChatCompletionsTextInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ParametersForChatCompletionsTextInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ParametersForChatCompletionsTextInput) GoString() string {
	return s.String()
}

type Prompt_tokens_detailsForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s Prompt_tokens_detailsForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Prompt_tokens_detailsForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

type Stream_optionsForChatCompletionsTextInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Include_usage *bool `type:"boolean" json:"include_usage,omitempty"`
}

// String returns the string representation
func (s Stream_optionsForChatCompletionsTextInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Stream_optionsForChatCompletionsTextInput) GoString() string {
	return s.String()
}

// SetInclude_usage sets the Include_usage field's value.
func (s *Stream_optionsForChatCompletionsTextInput) SetInclude_usage(v bool) *Stream_optionsForChatCompletionsTextInput {
	s.Include_usage = &v
	return s
}

type ToolForChatCompletionsTextInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Function *ConvertfunctionForChatCompletionsTextInput `type:"structure" json:"function,omitempty"`

	Type *string `type:"string" json:"type,omitempty"`
}

// String returns the string representation
func (s ToolForChatCompletionsTextInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ToolForChatCompletionsTextInput) GoString() string {
	return s.String()
}

// SetFunction sets the Function field's value.
func (s *ToolForChatCompletionsTextInput) SetFunction(v *ConvertfunctionForChatCompletionsTextInput) *ToolForChatCompletionsTextInput {
	s.Function = v
	return s
}

// SetType sets the Type field's value.
func (s *ToolForChatCompletionsTextInput) SetType(v string) *ToolForChatCompletionsTextInput {
	s.Type = &v
	return s
}

type Tool_callForChatCompletionsTextInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Function *FunctionForChatCompletionsTextInput `type:"structure" json:"function,omitempty"`

	Id *string `type:"string" json:"id,omitempty"`

	Type *string `type:"string" json:"type,omitempty"`
}

// String returns the string representation
func (s Tool_callForChatCompletionsTextInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Tool_callForChatCompletionsTextInput) GoString() string {
	return s.String()
}

// SetFunction sets the Function field's value.
func (s *Tool_callForChatCompletionsTextInput) SetFunction(v *FunctionForChatCompletionsTextInput) *Tool_callForChatCompletionsTextInput {
	s.Function = v
	return s
}

// SetId sets the Id field's value.
func (s *Tool_callForChatCompletionsTextInput) SetId(v string) *Tool_callForChatCompletionsTextInput {
	s.Id = &v
	return s
}

// SetType sets the Type field's value.
func (s *Tool_callForChatCompletionsTextInput) SetType(v string) *Tool_callForChatCompletionsTextInput {
	s.Type = &v
	return s
}

type Tool_callForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Function *FunctionForChatCompletionsTextOutput `type:"structure" json:"function,omitempty"`

	Id *string `type:"string" json:"id,omitempty"`

	Index *int32 `type:"int32" json:"index,omitempty"`

	Type *string `type:"string" json:"type,omitempty"`
}

// String returns the string representation
func (s Tool_callForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Tool_callForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

// SetFunction sets the Function field's value.
func (s *Tool_callForChatCompletionsTextOutput) SetFunction(v *FunctionForChatCompletionsTextOutput) *Tool_callForChatCompletionsTextOutput {
	s.Function = v
	return s
}

// SetId sets the Id field's value.
func (s *Tool_callForChatCompletionsTextOutput) SetId(v string) *Tool_callForChatCompletionsTextOutput {
	s.Id = &v
	return s
}

// SetIndex sets the Index field's value.
func (s *Tool_callForChatCompletionsTextOutput) SetIndex(v int32) *Tool_callForChatCompletionsTextOutput {
	s.Index = &v
	return s
}

// SetType sets the Type field's value.
func (s *Tool_callForChatCompletionsTextOutput) SetType(v string) *Tool_callForChatCompletionsTextOutput {
	s.Type = &v
	return s
}

type Top_logprobForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Bytes []*int32 `type:"list" json:"bytes,omitempty"`

	Logprob *float64 `type:"float" json:"logprob,omitempty"`

	Token *string `type:"string" json:"token,omitempty"`
}

// String returns the string representation
func (s Top_logprobForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Top_logprobForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

// SetBytes sets the Bytes field's value.
func (s *Top_logprobForChatCompletionsTextOutput) SetBytes(v []*int32) *Top_logprobForChatCompletionsTextOutput {
	s.Bytes = v
	return s
}

// SetLogprob sets the Logprob field's value.
func (s *Top_logprobForChatCompletionsTextOutput) SetLogprob(v float64) *Top_logprobForChatCompletionsTextOutput {
	s.Logprob = &v
	return s
}

// SetToken sets the Token field's value.
func (s *Top_logprobForChatCompletionsTextOutput) SetToken(v string) *Top_logprobForChatCompletionsTextOutput {
	s.Token = &v
	return s
}

type UsageForChatCompletionsTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Completion_tokens *int32 `type:"int32" json:"completion_tokens,omitempty"`

	Completion_tokens_details *Completion_tokens_detailsForChatCompletionsTextOutput `type:"structure" json:"completion_tokens_details,omitempty"`

	Prompt_tokens *int32 `type:"int32" json:"prompt_tokens,omitempty"`

	Prompt_tokens_details *Prompt_tokens_detailsForChatCompletionsTextOutput `type:"structure" json:"prompt_tokens_details,omitempty"`

	Total_tokens *int32 `type:"int32" json:"total_tokens,omitempty"`
}

// String returns the string representation
func (s UsageForChatCompletionsTextOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UsageForChatCompletionsTextOutput) GoString() string {
	return s.String()
}

// SetCompletion_tokens sets the Completion_tokens field's value.
func (s *UsageForChatCompletionsTextOutput) SetCompletion_tokens(v int32) *UsageForChatCompletionsTextOutput {
	s.Completion_tokens = &v
	return s
}

// SetCompletion_tokens_details sets the Completion_tokens_details field's value.
func (s *UsageForChatCompletionsTextOutput) SetCompletion_tokens_details(v *Completion_tokens_detailsForChatCompletionsTextOutput) *UsageForChatCompletionsTextOutput {
	s.Completion_tokens_details = v
	return s
}

// SetPrompt_tokens sets the Prompt_tokens field's value.
func (s *UsageForChatCompletionsTextOutput) SetPrompt_tokens(v int32) *UsageForChatCompletionsTextOutput {
	s.Prompt_tokens = &v
	return s
}

// SetPrompt_tokens_details sets the Prompt_tokens_details field's value.
func (s *UsageForChatCompletionsTextOutput) SetPrompt_tokens_details(v *Prompt_tokens_detailsForChatCompletionsTextOutput) *UsageForChatCompletionsTextOutput {
	s.Prompt_tokens_details = v
	return s
}

// SetTotal_tokens sets the Total_tokens field's value.
func (s *UsageForChatCompletionsTextOutput) SetTotal_tokens(v int32) *UsageForChatCompletionsTextOutput {
	s.Total_tokens = &v
	return s
}

const (
	// EnumOfroleForChatCompletionsTextInputSystem is a EnumOfroleForChatCompletionsTextInput enum value
	EnumOfroleForChatCompletionsTextInputSystem = "system"

	// EnumOfroleForChatCompletionsTextInputUser is a EnumOfroleForChatCompletionsTextInput enum value
	EnumOfroleForChatCompletionsTextInputUser = "user"

	// EnumOfroleForChatCompletionsTextInputAssistant is a EnumOfroleForChatCompletionsTextInput enum value
	EnumOfroleForChatCompletionsTextInputAssistant = "assistant"

	// EnumOfroleForChatCompletionsTextInputTool is a EnumOfroleForChatCompletionsTextInput enum value
	EnumOfroleForChatCompletionsTextInputTool = "tool"
)
