// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ark

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opEmbeddingsMultimodalCommon = "EmbeddingsMultimodal"

// EmbeddingsMultimodalCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the EmbeddingsMultimodalCommon operation. The "output" return
// value will be populated with the EmbeddingsMultimodalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EmbeddingsMultimodalCommon Request to send the API call to the service.
// the "output" return value is not valid until after EmbeddingsMultimodalCommon Send returns without error.
//
// See EmbeddingsMultimodalCommon for more information on using the EmbeddingsMultimodalCommon
// API call, and error handling.
//
//    // Example sending a request using the EmbeddingsMultimodalCommonRequest method.
//    req, resp := client.EmbeddingsMultimodalCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) EmbeddingsMultimodalCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEmbeddingsMultimodalCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EmbeddingsMultimodalCommon API operation for ARK.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ARK's
// API operation EmbeddingsMultimodalCommon for usage and error information.
func (c *ARK) EmbeddingsMultimodalCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EmbeddingsMultimodalCommonRequest(input)
	return out, req.Send()
}

// EmbeddingsMultimodalCommonWithContext is the same as EmbeddingsMultimodalCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EmbeddingsMultimodalCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) EmbeddingsMultimodalCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EmbeddingsMultimodalCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEmbeddingsMultimodal = "EmbeddingsMultimodal"

// EmbeddingsMultimodalRequest generates a "byteplus/request.Request" representing the
// client's request for the EmbeddingsMultimodal operation. The "output" return
// value will be populated with the EmbeddingsMultimodalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EmbeddingsMultimodalCommon Request to send the API call to the service.
// the "output" return value is not valid until after EmbeddingsMultimodalCommon Send returns without error.
//
// See EmbeddingsMultimodal for more information on using the EmbeddingsMultimodal
// API call, and error handling.
//
//    // Example sending a request using the EmbeddingsMultimodalRequest method.
//    req, resp := client.EmbeddingsMultimodalRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) EmbeddingsMultimodalRequest(input *EmbeddingsMultimodalInput) (req *request.Request, output *EmbeddingsMultimodalOutput) {
	op := &request.Operation{
		Name:       opEmbeddingsMultimodal,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EmbeddingsMultimodalInput{}
	}

	output = &EmbeddingsMultimodalOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EmbeddingsMultimodal API operation for ARK.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ARK's
// API operation EmbeddingsMultimodal for usage and error information.
func (c *ARK) EmbeddingsMultimodal(input *EmbeddingsMultimodalInput) (*EmbeddingsMultimodalOutput, error) {
	req, out := c.EmbeddingsMultimodalRequest(input)
	return out, req.Send()
}

// EmbeddingsMultimodalWithContext is the same as EmbeddingsMultimodal with the addition of
// the ability to pass a context and additional request options.
//
// See EmbeddingsMultimodal for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) EmbeddingsMultimodalWithContext(ctx byteplus.Context, input *EmbeddingsMultimodalInput, opts ...request.Option) (*EmbeddingsMultimodalOutput, error) {
	req, out := c.EmbeddingsMultimodalRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForEmbeddingsMultimodalOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Embedding []*string `type:"list" json:"embedding,omitempty"`

	Object *string `type:"string" json:"object,omitempty"`
}

// String returns the string representation
func (s DataForEmbeddingsMultimodalOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForEmbeddingsMultimodalOutput) GoString() string {
	return s.String()
}

// SetEmbedding sets the Embedding field's value.
func (s *DataForEmbeddingsMultimodalOutput) SetEmbedding(v []*string) *DataForEmbeddingsMultimodalOutput {
	s.Embedding = v
	return s
}

// SetObject sets the Object field's value.
func (s *DataForEmbeddingsMultimodalOutput) SetObject(v string) *DataForEmbeddingsMultimodalOutput {
	s.Object = &v
	return s
}

type EmbeddingsMultimodalInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Encoding_format *string `type:"string" json:"encoding_format,omitempty"`

	Input []*InputForEmbeddingsMultimodalInput `type:"list" json:"input,omitempty"`

	// Model is a required field
	Model *string `type:"string" json:"model,omitempty" required:"true"`
}

// String returns the string representation
func (s EmbeddingsMultimodalInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s EmbeddingsMultimodalInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EmbeddingsMultimodalInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EmbeddingsMultimodalInput"}
	if s.Model == nil {
		invalidParams.Add(request.NewErrParamRequired("Model"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEncoding_format sets the Encoding_format field's value.
func (s *EmbeddingsMultimodalInput) SetEncoding_format(v string) *EmbeddingsMultimodalInput {
	s.Encoding_format = &v
	return s
}

// SetInput sets the Input field's value.
func (s *EmbeddingsMultimodalInput) SetInput(v []*InputForEmbeddingsMultimodalInput) *EmbeddingsMultimodalInput {
	s.Input = v
	return s
}

// SetModel sets the Model field's value.
func (s *EmbeddingsMultimodalInput) SetModel(v string) *EmbeddingsMultimodalInput {
	s.Model = &v
	return s
}

type EmbeddingsMultimodalOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Created *int32 `type:"int32" json:"created,omitempty"`

	Data *DataForEmbeddingsMultimodalOutput `type:"structure" json:"data,omitempty"`

	Id *string `type:"string" json:"id,omitempty"`

	Model *string `type:"string" json:"model,omitempty"`

	Object *string `type:"string" json:"object,omitempty"`

	Usage *UsageForEmbeddingsMultimodalOutput `type:"structure" json:"usage,omitempty"`
}

// String returns the string representation
func (s EmbeddingsMultimodalOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s EmbeddingsMultimodalOutput) GoString() string {
	return s.String()
}

// SetCreated sets the Created field's value.
func (s *EmbeddingsMultimodalOutput) SetCreated(v int32) *EmbeddingsMultimodalOutput {
	s.Created = &v
	return s
}

// SetData sets the Data field's value.
func (s *EmbeddingsMultimodalOutput) SetData(v *DataForEmbeddingsMultimodalOutput) *EmbeddingsMultimodalOutput {
	s.Data = v
	return s
}

// SetId sets the Id field's value.
func (s *EmbeddingsMultimodalOutput) SetId(v string) *EmbeddingsMultimodalOutput {
	s.Id = &v
	return s
}

// SetModel sets the Model field's value.
func (s *EmbeddingsMultimodalOutput) SetModel(v string) *EmbeddingsMultimodalOutput {
	s.Model = &v
	return s
}

// SetObject sets the Object field's value.
func (s *EmbeddingsMultimodalOutput) SetObject(v string) *EmbeddingsMultimodalOutput {
	s.Object = &v
	return s
}

// SetUsage sets the Usage field's value.
func (s *EmbeddingsMultimodalOutput) SetUsage(v *UsageForEmbeddingsMultimodalOutput) *EmbeddingsMultimodalOutput {
	s.Usage = v
	return s
}

type Image_urlForEmbeddingsMultimodalInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s Image_urlForEmbeddingsMultimodalInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Image_urlForEmbeddingsMultimodalInput) GoString() string {
	return s.String()
}

type InputForEmbeddingsMultimodalInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Image_url *Image_urlForEmbeddingsMultimodalInput `type:"structure" json:"image_url,omitempty"`

	Text *string `type:"string" json:"text,omitempty"`

	Type *string `type:"string" json:"type,omitempty"`
}

// String returns the string representation
func (s InputForEmbeddingsMultimodalInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s InputForEmbeddingsMultimodalInput) GoString() string {
	return s.String()
}

// SetImage_url sets the Image_url field's value.
func (s *InputForEmbeddingsMultimodalInput) SetImage_url(v *Image_urlForEmbeddingsMultimodalInput) *InputForEmbeddingsMultimodalInput {
	s.Image_url = v
	return s
}

// SetText sets the Text field's value.
func (s *InputForEmbeddingsMultimodalInput) SetText(v string) *InputForEmbeddingsMultimodalInput {
	s.Text = &v
	return s
}

// SetType sets the Type field's value.
func (s *InputForEmbeddingsMultimodalInput) SetType(v string) *InputForEmbeddingsMultimodalInput {
	s.Type = &v
	return s
}

type Prompt_tokens_detailsForEmbeddingsMultimodalOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Image_tokens *int32 `type:"int32" json:"image_tokens,omitempty"`

	Text_tokens *int32 `type:"int32" json:"text_tokens,omitempty"`
}

// String returns the string representation
func (s Prompt_tokens_detailsForEmbeddingsMultimodalOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Prompt_tokens_detailsForEmbeddingsMultimodalOutput) GoString() string {
	return s.String()
}

// SetImage_tokens sets the Image_tokens field's value.
func (s *Prompt_tokens_detailsForEmbeddingsMultimodalOutput) SetImage_tokens(v int32) *Prompt_tokens_detailsForEmbeddingsMultimodalOutput {
	s.Image_tokens = &v
	return s
}

// SetText_tokens sets the Text_tokens field's value.
func (s *Prompt_tokens_detailsForEmbeddingsMultimodalOutput) SetText_tokens(v int32) *Prompt_tokens_detailsForEmbeddingsMultimodalOutput {
	s.Text_tokens = &v
	return s
}

type UsageForEmbeddingsMultimodalOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Prompt_tokens *int32 `type:"int32" json:"prompt_tokens,omitempty"`

	Prompt_tokens_details *Prompt_tokens_detailsForEmbeddingsMultimodalOutput `type:"structure" json:"prompt_tokens_details,omitempty"`

	Total_tokens *int32 `type:"int32" json:"total_tokens,omitempty"`
}

// String returns the string representation
func (s UsageForEmbeddingsMultimodalOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UsageForEmbeddingsMultimodalOutput) GoString() string {
	return s.String()
}

// SetPrompt_tokens sets the Prompt_tokens field's value.
func (s *UsageForEmbeddingsMultimodalOutput) SetPrompt_tokens(v int32) *UsageForEmbeddingsMultimodalOutput {
	s.Prompt_tokens = &v
	return s
}

// SetPrompt_tokens_details sets the Prompt_tokens_details field's value.
func (s *UsageForEmbeddingsMultimodalOutput) SetPrompt_tokens_details(v *Prompt_tokens_detailsForEmbeddingsMultimodalOutput) *UsageForEmbeddingsMultimodalOutput {
	s.Prompt_tokens_details = v
	return s
}

// SetTotal_tokens sets the Total_tokens field's value.
func (s *UsageForEmbeddingsMultimodalOutput) SetTotal_tokens(v int32) *UsageForEmbeddingsMultimodalOutput {
	s.Total_tokens = &v
	return s
}
