// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ark

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opChatCompletionsVisionCommon = "ChatCompletionsVision"

// ChatCompletionsVisionCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ChatCompletionsVisionCommon operation. The "output" return
// value will be populated with the ChatCompletionsVisionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ChatCompletionsVisionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ChatCompletionsVisionCommon Send returns without error.
//
// See ChatCompletionsVisionCommon for more information on using the ChatCompletionsVisionCommon
// API call, and error handling.
//
//    // Example sending a request using the ChatCompletionsVisionCommonRequest method.
//    req, resp := client.ChatCompletionsVisionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) ChatCompletionsVisionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opChatCompletionsVisionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ChatCompletionsVisionCommon API operation for ARK.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ARK's
// API operation ChatCompletionsVisionCommon for usage and error information.
func (c *ARK) ChatCompletionsVisionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ChatCompletionsVisionCommonRequest(input)
	return out, req.Send()
}

// ChatCompletionsVisionCommonWithContext is the same as ChatCompletionsVisionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ChatCompletionsVisionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) ChatCompletionsVisionCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ChatCompletionsVisionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opChatCompletionsVision = "ChatCompletionsVision"

// ChatCompletionsVisionRequest generates a "byteplus/request.Request" representing the
// client's request for the ChatCompletionsVision operation. The "output" return
// value will be populated with the ChatCompletionsVisionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ChatCompletionsVisionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ChatCompletionsVisionCommon Send returns without error.
//
// See ChatCompletionsVision for more information on using the ChatCompletionsVision
// API call, and error handling.
//
//    // Example sending a request using the ChatCompletionsVisionRequest method.
//    req, resp := client.ChatCompletionsVisionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ARK) ChatCompletionsVisionRequest(input *ChatCompletionsVisionInput) (req *request.Request, output *ChatCompletionsVisionOutput) {
	op := &request.Operation{
		Name:       opChatCompletionsVision,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ChatCompletionsVisionInput{}
	}

	output = &ChatCompletionsVisionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ChatCompletionsVision API operation for ARK.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ARK's
// API operation ChatCompletionsVision for usage and error information.
func (c *ARK) ChatCompletionsVision(input *ChatCompletionsVisionInput) (*ChatCompletionsVisionOutput, error) {
	req, out := c.ChatCompletionsVisionRequest(input)
	return out, req.Send()
}

// ChatCompletionsVisionWithContext is the same as ChatCompletionsVision with the addition of
// the ability to pass a context and additional request options.
//
// See ChatCompletionsVision for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ARK) ChatCompletionsVisionWithContext(ctx byteplus.Context, input *ChatCompletionsVisionInput, opts ...request.Option) (*ChatCompletionsVisionOutput, error) {
	req, out := c.ChatCompletionsVisionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ChatCompletionsVisionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Logit_bias *Logit_biasForChatCompletionsVisionInput `type:"structure" json:"logit_bias,omitempty"`

	Logprobs *bool `type:"boolean" json:"logprobs,omitempty"`

	Max_tokens *int32 `type:"int32" json:"max_tokens,omitempty"`

	Messages *MessagesForChatCompletionsVisionInput `type:"structure" json:"messages,omitempty"`

	// Model is a required field
	Model *string `type:"string" json:"model,omitempty" required:"true"`

	Stop []*string `type:"list" json:"stop,omitempty"`

	Stream *bool `type:"boolean" json:"stream,omitempty"`

	Stream_options *Stream_optionsForChatCompletionsVisionInput `type:"structure" json:"stream_options,omitempty"`

	Temperature *float64 `type:"float" json:"temperature,omitempty"`

	Top_logprobs *int32 `type:"int32" json:"top_logprobs,omitempty"`

	Top_p *float64 `type:"float" json:"top_p,omitempty"`
}

// String returns the string representation
func (s ChatCompletionsVisionInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ChatCompletionsVisionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ChatCompletionsVisionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ChatCompletionsVisionInput"}
	if s.Model == nil {
		invalidParams.Add(request.NewErrParamRequired("Model"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLogit_bias sets the Logit_bias field's value.
func (s *ChatCompletionsVisionInput) SetLogit_bias(v *Logit_biasForChatCompletionsVisionInput) *ChatCompletionsVisionInput {
	s.Logit_bias = v
	return s
}

// SetLogprobs sets the Logprobs field's value.
func (s *ChatCompletionsVisionInput) SetLogprobs(v bool) *ChatCompletionsVisionInput {
	s.Logprobs = &v
	return s
}

// SetMax_tokens sets the Max_tokens field's value.
func (s *ChatCompletionsVisionInput) SetMax_tokens(v int32) *ChatCompletionsVisionInput {
	s.Max_tokens = &v
	return s
}

// SetMessages sets the Messages field's value.
func (s *ChatCompletionsVisionInput) SetMessages(v *MessagesForChatCompletionsVisionInput) *ChatCompletionsVisionInput {
	s.Messages = v
	return s
}

// SetModel sets the Model field's value.
func (s *ChatCompletionsVisionInput) SetModel(v string) *ChatCompletionsVisionInput {
	s.Model = &v
	return s
}

// SetStop sets the Stop field's value.
func (s *ChatCompletionsVisionInput) SetStop(v []*string) *ChatCompletionsVisionInput {
	s.Stop = v
	return s
}

// SetStream sets the Stream field's value.
func (s *ChatCompletionsVisionInput) SetStream(v bool) *ChatCompletionsVisionInput {
	s.Stream = &v
	return s
}

// SetStream_options sets the Stream_options field's value.
func (s *ChatCompletionsVisionInput) SetStream_options(v *Stream_optionsForChatCompletionsVisionInput) *ChatCompletionsVisionInput {
	s.Stream_options = v
	return s
}

// SetTemperature sets the Temperature field's value.
func (s *ChatCompletionsVisionInput) SetTemperature(v float64) *ChatCompletionsVisionInput {
	s.Temperature = &v
	return s
}

// SetTop_logprobs sets the Top_logprobs field's value.
func (s *ChatCompletionsVisionInput) SetTop_logprobs(v int32) *ChatCompletionsVisionInput {
	s.Top_logprobs = &v
	return s
}

// SetTop_p sets the Top_p field's value.
func (s *ChatCompletionsVisionInput) SetTop_p(v float64) *ChatCompletionsVisionInput {
	s.Top_p = &v
	return s
}

type ChatCompletionsVisionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Choices []*ChoiceForChatCompletionsVisionOutput `type:"list" json:"choices,omitempty"`

	Created *int32 `type:"int32" json:"created,omitempty"`

	Id *string `type:"string" json:"id,omitempty"`

	Model *string `type:"string" json:"model,omitempty"`

	Object *string `type:"string" json:"object,omitempty"`

	Usage *UsageForChatCompletionsVisionOutput `type:"structure" json:"usage,omitempty"`
}

// String returns the string representation
func (s ChatCompletionsVisionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ChatCompletionsVisionOutput) GoString() string {
	return s.String()
}

// SetChoices sets the Choices field's value.
func (s *ChatCompletionsVisionOutput) SetChoices(v []*ChoiceForChatCompletionsVisionOutput) *ChatCompletionsVisionOutput {
	s.Choices = v
	return s
}

// SetCreated sets the Created field's value.
func (s *ChatCompletionsVisionOutput) SetCreated(v int32) *ChatCompletionsVisionOutput {
	s.Created = &v
	return s
}

// SetId sets the Id field's value.
func (s *ChatCompletionsVisionOutput) SetId(v string) *ChatCompletionsVisionOutput {
	s.Id = &v
	return s
}

// SetModel sets the Model field's value.
func (s *ChatCompletionsVisionOutput) SetModel(v string) *ChatCompletionsVisionOutput {
	s.Model = &v
	return s
}

// SetObject sets the Object field's value.
func (s *ChatCompletionsVisionOutput) SetObject(v string) *ChatCompletionsVisionOutput {
	s.Object = &v
	return s
}

// SetUsage sets the Usage field's value.
func (s *ChatCompletionsVisionOutput) SetUsage(v *UsageForChatCompletionsVisionOutput) *ChatCompletionsVisionOutput {
	s.Usage = v
	return s
}

type ChoiceForChatCompletionsVisionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Delta *DeltaForChatCompletionsVisionOutput `type:"structure" json:"delta,omitempty"`

	Finish_reason *string `type:"string" json:"finish_reason,omitempty"`

	Index *int32 `type:"int32" json:"index,omitempty"`

	Logprobs *LogprobsForChatCompletionsVisionOutput `type:"structure" json:"logprobs,omitempty"`

	Message *MessageForChatCompletionsVisionOutput `type:"structure" json:"message,omitempty"`

	Moderation_hit_type *string `type:"string" json:"moderation_hit_type,omitempty"`
}

// String returns the string representation
func (s ChoiceForChatCompletionsVisionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ChoiceForChatCompletionsVisionOutput) GoString() string {
	return s.String()
}

// SetDelta sets the Delta field's value.
func (s *ChoiceForChatCompletionsVisionOutput) SetDelta(v *DeltaForChatCompletionsVisionOutput) *ChoiceForChatCompletionsVisionOutput {
	s.Delta = v
	return s
}

// SetFinish_reason sets the Finish_reason field's value.
func (s *ChoiceForChatCompletionsVisionOutput) SetFinish_reason(v string) *ChoiceForChatCompletionsVisionOutput {
	s.Finish_reason = &v
	return s
}

// SetIndex sets the Index field's value.
func (s *ChoiceForChatCompletionsVisionOutput) SetIndex(v int32) *ChoiceForChatCompletionsVisionOutput {
	s.Index = &v
	return s
}

// SetLogprobs sets the Logprobs field's value.
func (s *ChoiceForChatCompletionsVisionOutput) SetLogprobs(v *LogprobsForChatCompletionsVisionOutput) *ChoiceForChatCompletionsVisionOutput {
	s.Logprobs = v
	return s
}

// SetMessage sets the Message field's value.
func (s *ChoiceForChatCompletionsVisionOutput) SetMessage(v *MessageForChatCompletionsVisionOutput) *ChoiceForChatCompletionsVisionOutput {
	s.Message = v
	return s
}

// SetModeration_hit_type sets the Moderation_hit_type field's value.
func (s *ChoiceForChatCompletionsVisionOutput) SetModeration_hit_type(v string) *ChoiceForChatCompletionsVisionOutput {
	s.Moderation_hit_type = &v
	return s
}

type DeltaForChatCompletionsVisionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DeltaForChatCompletionsVisionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeltaForChatCompletionsVisionOutput) GoString() string {
	return s.String()
}

type Logit_biasForChatCompletionsVisionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s Logit_biasForChatCompletionsVisionInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Logit_biasForChatCompletionsVisionInput) GoString() string {
	return s.String()
}

type LogprobsForChatCompletionsVisionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s LogprobsForChatCompletionsVisionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s LogprobsForChatCompletionsVisionOutput) GoString() string {
	return s.String()
}

type MessageForChatCompletionsVisionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s MessageForChatCompletionsVisionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s MessageForChatCompletionsVisionOutput) GoString() string {
	return s.String()
}

type MessagesForChatCompletionsVisionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s MessagesForChatCompletionsVisionInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s MessagesForChatCompletionsVisionInput) GoString() string {
	return s.String()
}

type Prompt_tokens_detailsForChatCompletionsVisionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s Prompt_tokens_detailsForChatCompletionsVisionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Prompt_tokens_detailsForChatCompletionsVisionOutput) GoString() string {
	return s.String()
}

type Stream_optionsForChatCompletionsVisionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Include_usage *bool `type:"boolean" json:"include_usage,omitempty"`
}

// String returns the string representation
func (s Stream_optionsForChatCompletionsVisionInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s Stream_optionsForChatCompletionsVisionInput) GoString() string {
	return s.String()
}

// SetInclude_usage sets the Include_usage field's value.
func (s *Stream_optionsForChatCompletionsVisionInput) SetInclude_usage(v bool) *Stream_optionsForChatCompletionsVisionInput {
	s.Include_usage = &v
	return s
}

type UsageForChatCompletionsVisionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Completion_tokens *int32 `type:"int32" json:"completion_tokens,omitempty"`

	Prompt_tokens *int32 `type:"int32" json:"prompt_tokens,omitempty"`

	Prompt_tokens_details *Prompt_tokens_detailsForChatCompletionsVisionOutput `type:"structure" json:"prompt_tokens_details,omitempty"`

	Total_tokens *int32 `type:"int32" json:"total_tokens,omitempty"`
}

// String returns the string representation
func (s UsageForChatCompletionsVisionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UsageForChatCompletionsVisionOutput) GoString() string {
	return s.String()
}

// SetCompletion_tokens sets the Completion_tokens field's value.
func (s *UsageForChatCompletionsVisionOutput) SetCompletion_tokens(v int32) *UsageForChatCompletionsVisionOutput {
	s.Completion_tokens = &v
	return s
}

// SetPrompt_tokens sets the Prompt_tokens field's value.
func (s *UsageForChatCompletionsVisionOutput) SetPrompt_tokens(v int32) *UsageForChatCompletionsVisionOutput {
	s.Prompt_tokens = &v
	return s
}

// SetPrompt_tokens_details sets the Prompt_tokens_details field's value.
func (s *UsageForChatCompletionsVisionOutput) SetPrompt_tokens_details(v *Prompt_tokens_detailsForChatCompletionsVisionOutput) *UsageForChatCompletionsVisionOutput {
	s.Prompt_tokens_details = v
	return s
}

// SetTotal_tokens sets the Total_tokens field's value.
func (s *UsageForChatCompletionsVisionOutput) SetTotal_tokens(v int32) *UsageForChatCompletionsVisionOutput {
	s.Total_tokens = &v
	return s
}
