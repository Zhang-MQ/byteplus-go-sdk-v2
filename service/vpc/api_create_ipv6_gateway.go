// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateIpv6GatewayCommon = "CreateIpv6Gateway"

// CreateIpv6GatewayCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateIpv6GatewayCommon operation. The "output" return
// value will be populated with the CreateIpv6GatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateIpv6GatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateIpv6GatewayCommon Send returns without error.
//
// See CreateIpv6GatewayCommon for more information on using the CreateIpv6GatewayCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateIpv6GatewayCommonRequest method.
//    req, resp := client.CreateIpv6GatewayCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateIpv6GatewayCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateIpv6GatewayCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateIpv6GatewayCommon API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation CreateIpv6GatewayCommon for usage and error information.
func (c *VPC) CreateIpv6GatewayCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateIpv6GatewayCommonRequest(input)
	return out, req.Send()
}

// CreateIpv6GatewayCommonWithContext is the same as CreateIpv6GatewayCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateIpv6GatewayCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateIpv6GatewayCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateIpv6GatewayCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateIpv6Gateway = "CreateIpv6Gateway"

// CreateIpv6GatewayRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateIpv6Gateway operation. The "output" return
// value will be populated with the CreateIpv6GatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateIpv6GatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateIpv6GatewayCommon Send returns without error.
//
// See CreateIpv6Gateway for more information on using the CreateIpv6Gateway
// API call, and error handling.
//
//    // Example sending a request using the CreateIpv6GatewayRequest method.
//    req, resp := client.CreateIpv6GatewayRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateIpv6GatewayRequest(input *CreateIpv6GatewayInput) (req *request.Request, output *CreateIpv6GatewayOutput) {
	op := &request.Operation{
		Name:       opCreateIpv6Gateway,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateIpv6GatewayInput{}
	}

	output = &CreateIpv6GatewayOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateIpv6Gateway API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation CreateIpv6Gateway for usage and error information.
func (c *VPC) CreateIpv6Gateway(input *CreateIpv6GatewayInput) (*CreateIpv6GatewayOutput, error) {
	req, out := c.CreateIpv6GatewayRequest(input)
	return out, req.Send()
}

// CreateIpv6GatewayWithContext is the same as CreateIpv6Gateway with the addition of
// the ability to pass a context and additional request options.
//
// See CreateIpv6Gateway for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateIpv6GatewayWithContext(ctx byteplus.Context, input *CreateIpv6GatewayInput, opts ...request.Option) (*CreateIpv6GatewayOutput, error) {
	req, out := c.CreateIpv6GatewayRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateIpv6GatewayInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	Name *string `type:"string"`

	ProjectName *string `type:"string"`

	// VpcId is a required field
	VpcId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateIpv6GatewayInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateIpv6GatewayInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateIpv6GatewayInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateIpv6GatewayInput"}
	if s.VpcId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpcId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateIpv6GatewayInput) SetClientToken(v string) *CreateIpv6GatewayInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateIpv6GatewayInput) SetDescription(v string) *CreateIpv6GatewayInput {
	s.Description = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateIpv6GatewayInput) SetName(v string) *CreateIpv6GatewayInput {
	s.Name = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateIpv6GatewayInput) SetProjectName(v string) *CreateIpv6GatewayInput {
	s.ProjectName = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *CreateIpv6GatewayInput) SetVpcId(v string) *CreateIpv6GatewayInput {
	s.VpcId = &v
	return s
}

type CreateIpv6GatewayOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Ipv6GatewayId *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateIpv6GatewayOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateIpv6GatewayOutput) GoString() string {
	return s.String()
}

// SetIpv6GatewayId sets the Ipv6GatewayId field's value.
func (s *CreateIpv6GatewayOutput) SetIpv6GatewayId(v string) *CreateIpv6GatewayOutput {
	s.Ipv6GatewayId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateIpv6GatewayOutput) SetRequestId(v string) *CreateIpv6GatewayOutput {
	s.RequestId = &v
	return s
}
