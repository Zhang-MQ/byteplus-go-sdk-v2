// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateIpv6EgressOnlyRuleCommon = "CreateIpv6EgressOnlyRule"

// CreateIpv6EgressOnlyRuleCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateIpv6EgressOnlyRuleCommon operation. The "output" return
// value will be populated with the CreateIpv6EgressOnlyRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateIpv6EgressOnlyRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateIpv6EgressOnlyRuleCommon Send returns without error.
//
// See CreateIpv6EgressOnlyRuleCommon for more information on using the CreateIpv6EgressOnlyRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateIpv6EgressOnlyRuleCommonRequest method.
//    req, resp := client.CreateIpv6EgressOnlyRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateIpv6EgressOnlyRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateIpv6EgressOnlyRuleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateIpv6EgressOnlyRuleCommon API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation CreateIpv6EgressOnlyRuleCommon for usage and error information.
func (c *VPC) CreateIpv6EgressOnlyRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateIpv6EgressOnlyRuleCommonRequest(input)
	return out, req.Send()
}

// CreateIpv6EgressOnlyRuleCommonWithContext is the same as CreateIpv6EgressOnlyRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateIpv6EgressOnlyRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateIpv6EgressOnlyRuleCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateIpv6EgressOnlyRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateIpv6EgressOnlyRule = "CreateIpv6EgressOnlyRule"

// CreateIpv6EgressOnlyRuleRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateIpv6EgressOnlyRule operation. The "output" return
// value will be populated with the CreateIpv6EgressOnlyRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateIpv6EgressOnlyRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateIpv6EgressOnlyRuleCommon Send returns without error.
//
// See CreateIpv6EgressOnlyRule for more information on using the CreateIpv6EgressOnlyRule
// API call, and error handling.
//
//    // Example sending a request using the CreateIpv6EgressOnlyRuleRequest method.
//    req, resp := client.CreateIpv6EgressOnlyRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateIpv6EgressOnlyRuleRequest(input *CreateIpv6EgressOnlyRuleInput) (req *request.Request, output *CreateIpv6EgressOnlyRuleOutput) {
	op := &request.Operation{
		Name:       opCreateIpv6EgressOnlyRule,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateIpv6EgressOnlyRuleInput{}
	}

	output = &CreateIpv6EgressOnlyRuleOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateIpv6EgressOnlyRule API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation CreateIpv6EgressOnlyRule for usage and error information.
func (c *VPC) CreateIpv6EgressOnlyRule(input *CreateIpv6EgressOnlyRuleInput) (*CreateIpv6EgressOnlyRuleOutput, error) {
	req, out := c.CreateIpv6EgressOnlyRuleRequest(input)
	return out, req.Send()
}

// CreateIpv6EgressOnlyRuleWithContext is the same as CreateIpv6EgressOnlyRule with the addition of
// the ability to pass a context and additional request options.
//
// See CreateIpv6EgressOnlyRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateIpv6EgressOnlyRuleWithContext(ctx byteplus.Context, input *CreateIpv6EgressOnlyRuleInput, opts ...request.Option) (*CreateIpv6EgressOnlyRuleOutput, error) {
	req, out := c.CreateIpv6EgressOnlyRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateIpv6EgressOnlyRuleInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// Ipv6GatewayId is a required field
	Ipv6GatewayId *string `type:"string" required:"true"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateIpv6EgressOnlyRuleInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateIpv6EgressOnlyRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateIpv6EgressOnlyRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateIpv6EgressOnlyRuleInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Ipv6GatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("Ipv6GatewayId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateIpv6EgressOnlyRuleInput) SetClientToken(v string) *CreateIpv6EgressOnlyRuleInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateIpv6EgressOnlyRuleInput) SetDescription(v string) *CreateIpv6EgressOnlyRuleInput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateIpv6EgressOnlyRuleInput) SetInstanceId(v string) *CreateIpv6EgressOnlyRuleInput {
	s.InstanceId = &v
	return s
}

// SetIpv6GatewayId sets the Ipv6GatewayId field's value.
func (s *CreateIpv6EgressOnlyRuleInput) SetIpv6GatewayId(v string) *CreateIpv6EgressOnlyRuleInput {
	s.Ipv6GatewayId = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateIpv6EgressOnlyRuleInput) SetName(v string) *CreateIpv6EgressOnlyRuleInput {
	s.Name = &v
	return s
}

type CreateIpv6EgressOnlyRuleOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Ipv6EgressOnlyRuleId *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateIpv6EgressOnlyRuleOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateIpv6EgressOnlyRuleOutput) GoString() string {
	return s.String()
}

// SetIpv6EgressOnlyRuleId sets the Ipv6EgressOnlyRuleId field's value.
func (s *CreateIpv6EgressOnlyRuleOutput) SetIpv6EgressOnlyRuleId(v string) *CreateIpv6EgressOnlyRuleOutput {
	s.Ipv6EgressOnlyRuleId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateIpv6EgressOnlyRuleOutput) SetRequestId(v string) *CreateIpv6EgressOnlyRuleOutput {
	s.RequestId = &v
	return s
}
