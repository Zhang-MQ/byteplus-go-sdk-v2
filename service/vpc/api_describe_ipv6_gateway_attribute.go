// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeIpv6GatewayAttributeCommon = "DescribeIpv6GatewayAttribute"

// DescribeIpv6GatewayAttributeCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeIpv6GatewayAttributeCommon operation. The "output" return
// value will be populated with the DescribeIpv6GatewayAttributeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeIpv6GatewayAttributeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeIpv6GatewayAttributeCommon Send returns without error.
//
// See DescribeIpv6GatewayAttributeCommon for more information on using the DescribeIpv6GatewayAttributeCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeIpv6GatewayAttributeCommonRequest method.
//    req, resp := client.DescribeIpv6GatewayAttributeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeIpv6GatewayAttributeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeIpv6GatewayAttributeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeIpv6GatewayAttributeCommon API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DescribeIpv6GatewayAttributeCommon for usage and error information.
func (c *VPC) DescribeIpv6GatewayAttributeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeIpv6GatewayAttributeCommonRequest(input)
	return out, req.Send()
}

// DescribeIpv6GatewayAttributeCommonWithContext is the same as DescribeIpv6GatewayAttributeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeIpv6GatewayAttributeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeIpv6GatewayAttributeCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeIpv6GatewayAttributeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeIpv6GatewayAttribute = "DescribeIpv6GatewayAttribute"

// DescribeIpv6GatewayAttributeRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeIpv6GatewayAttribute operation. The "output" return
// value will be populated with the DescribeIpv6GatewayAttributeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeIpv6GatewayAttributeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeIpv6GatewayAttributeCommon Send returns without error.
//
// See DescribeIpv6GatewayAttribute for more information on using the DescribeIpv6GatewayAttribute
// API call, and error handling.
//
//    // Example sending a request using the DescribeIpv6GatewayAttributeRequest method.
//    req, resp := client.DescribeIpv6GatewayAttributeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeIpv6GatewayAttributeRequest(input *DescribeIpv6GatewayAttributeInput) (req *request.Request, output *DescribeIpv6GatewayAttributeOutput) {
	op := &request.Operation{
		Name:       opDescribeIpv6GatewayAttribute,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeIpv6GatewayAttributeInput{}
	}

	output = &DescribeIpv6GatewayAttributeOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeIpv6GatewayAttribute API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DescribeIpv6GatewayAttribute for usage and error information.
func (c *VPC) DescribeIpv6GatewayAttribute(input *DescribeIpv6GatewayAttributeInput) (*DescribeIpv6GatewayAttributeOutput, error) {
	req, out := c.DescribeIpv6GatewayAttributeRequest(input)
	return out, req.Send()
}

// DescribeIpv6GatewayAttributeWithContext is the same as DescribeIpv6GatewayAttribute with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeIpv6GatewayAttribute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeIpv6GatewayAttributeWithContext(ctx byteplus.Context, input *DescribeIpv6GatewayAttributeInput, opts ...request.Option) (*DescribeIpv6GatewayAttributeOutput, error) {
	req, out := c.DescribeIpv6GatewayAttributeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeIpv6GatewayAttributeInput struct {
	_ struct{} `type:"structure"`

	// Ipv6GatewayId is a required field
	Ipv6GatewayId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeIpv6GatewayAttributeInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeIpv6GatewayAttributeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeIpv6GatewayAttributeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeIpv6GatewayAttributeInput"}
	if s.Ipv6GatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("Ipv6GatewayId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetIpv6GatewayId sets the Ipv6GatewayId field's value.
func (s *DescribeIpv6GatewayAttributeInput) SetIpv6GatewayId(v string) *DescribeIpv6GatewayAttributeInput {
	s.Ipv6GatewayId = &v
	return s
}

type DescribeIpv6GatewayAttributeOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CreationTime *string `type:"string"`

	Description *string `type:"string"`

	Ipv6GatewayId *string `type:"string"`

	Name *string `type:"string"`

	ProjectName *string `type:"string"`

	RequestId *string `type:"string"`

	RouteTableId *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`

	VpcId *string `type:"string"`
}

// String returns the string representation
func (s DescribeIpv6GatewayAttributeOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeIpv6GatewayAttributeOutput) GoString() string {
	return s.String()
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeIpv6GatewayAttributeOutput) SetCreationTime(v string) *DescribeIpv6GatewayAttributeOutput {
	s.CreationTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeIpv6GatewayAttributeOutput) SetDescription(v string) *DescribeIpv6GatewayAttributeOutput {
	s.Description = &v
	return s
}

// SetIpv6GatewayId sets the Ipv6GatewayId field's value.
func (s *DescribeIpv6GatewayAttributeOutput) SetIpv6GatewayId(v string) *DescribeIpv6GatewayAttributeOutput {
	s.Ipv6GatewayId = &v
	return s
}

// SetName sets the Name field's value.
func (s *DescribeIpv6GatewayAttributeOutput) SetName(v string) *DescribeIpv6GatewayAttributeOutput {
	s.Name = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeIpv6GatewayAttributeOutput) SetProjectName(v string) *DescribeIpv6GatewayAttributeOutput {
	s.ProjectName = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeIpv6GatewayAttributeOutput) SetRequestId(v string) *DescribeIpv6GatewayAttributeOutput {
	s.RequestId = &v
	return s
}

// SetRouteTableId sets the RouteTableId field's value.
func (s *DescribeIpv6GatewayAttributeOutput) SetRouteTableId(v string) *DescribeIpv6GatewayAttributeOutput {
	s.RouteTableId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeIpv6GatewayAttributeOutput) SetStatus(v string) *DescribeIpv6GatewayAttributeOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeIpv6GatewayAttributeOutput) SetUpdateTime(v string) *DescribeIpv6GatewayAttributeOutput {
	s.UpdateTime = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeIpv6GatewayAttributeOutput) SetVpcId(v string) *DescribeIpv6GatewayAttributeOutput {
	s.VpcId = &v
	return s
}
