// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opAddIpAddressPoolCidrBlockCommon = "AddIpAddressPoolCidrBlock"

// AddIpAddressPoolCidrBlockCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the AddIpAddressPoolCidrBlockCommon operation. The "output" return
// value will be populated with the AddIpAddressPoolCidrBlockCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddIpAddressPoolCidrBlockCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddIpAddressPoolCidrBlockCommon Send returns without error.
//
// See AddIpAddressPoolCidrBlockCommon for more information on using the AddIpAddressPoolCidrBlockCommon
// API call, and error handling.
//
//    // Example sending a request using the AddIpAddressPoolCidrBlockCommonRequest method.
//    req, resp := client.AddIpAddressPoolCidrBlockCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) AddIpAddressPoolCidrBlockCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddIpAddressPoolCidrBlockCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AddIpAddressPoolCidrBlockCommon API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation AddIpAddressPoolCidrBlockCommon for usage and error information.
func (c *VPC) AddIpAddressPoolCidrBlockCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddIpAddressPoolCidrBlockCommonRequest(input)
	return out, req.Send()
}

// AddIpAddressPoolCidrBlockCommonWithContext is the same as AddIpAddressPoolCidrBlockCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddIpAddressPoolCidrBlockCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) AddIpAddressPoolCidrBlockCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddIpAddressPoolCidrBlockCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddIpAddressPoolCidrBlock = "AddIpAddressPoolCidrBlock"

// AddIpAddressPoolCidrBlockRequest generates a "byteplus/request.Request" representing the
// client's request for the AddIpAddressPoolCidrBlock operation. The "output" return
// value will be populated with the AddIpAddressPoolCidrBlockCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddIpAddressPoolCidrBlockCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddIpAddressPoolCidrBlockCommon Send returns without error.
//
// See AddIpAddressPoolCidrBlock for more information on using the AddIpAddressPoolCidrBlock
// API call, and error handling.
//
//    // Example sending a request using the AddIpAddressPoolCidrBlockRequest method.
//    req, resp := client.AddIpAddressPoolCidrBlockRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) AddIpAddressPoolCidrBlockRequest(input *AddIpAddressPoolCidrBlockInput) (req *request.Request, output *AddIpAddressPoolCidrBlockOutput) {
	op := &request.Operation{
		Name:       opAddIpAddressPoolCidrBlock,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddIpAddressPoolCidrBlockInput{}
	}

	output = &AddIpAddressPoolCidrBlockOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AddIpAddressPoolCidrBlock API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation AddIpAddressPoolCidrBlock for usage and error information.
func (c *VPC) AddIpAddressPoolCidrBlock(input *AddIpAddressPoolCidrBlockInput) (*AddIpAddressPoolCidrBlockOutput, error) {
	req, out := c.AddIpAddressPoolCidrBlockRequest(input)
	return out, req.Send()
}

// AddIpAddressPoolCidrBlockWithContext is the same as AddIpAddressPoolCidrBlock with the addition of
// the ability to pass a context and additional request options.
//
// See AddIpAddressPoolCidrBlock for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) AddIpAddressPoolCidrBlockWithContext(ctx byteplus.Context, input *AddIpAddressPoolCidrBlockInput, opts ...request.Option) (*AddIpAddressPoolCidrBlockOutput, error) {
	req, out := c.AddIpAddressPoolCidrBlockRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddIpAddressPoolCidrBlockInput struct {
	_ struct{} `type:"structure"`

	CidrBlock *string `type:"string"`

	CidrMask *int64 `type:"integer"`

	ClientToken *string `type:"string"`

	// IpAddressPoolId is a required field
	IpAddressPoolId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AddIpAddressPoolCidrBlockInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s AddIpAddressPoolCidrBlockInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddIpAddressPoolCidrBlockInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AddIpAddressPoolCidrBlockInput"}
	if s.IpAddressPoolId == nil {
		invalidParams.Add(request.NewErrParamRequired("IpAddressPoolId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *AddIpAddressPoolCidrBlockInput) SetCidrBlock(v string) *AddIpAddressPoolCidrBlockInput {
	s.CidrBlock = &v
	return s
}

// SetCidrMask sets the CidrMask field's value.
func (s *AddIpAddressPoolCidrBlockInput) SetCidrMask(v int64) *AddIpAddressPoolCidrBlockInput {
	s.CidrMask = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *AddIpAddressPoolCidrBlockInput) SetClientToken(v string) *AddIpAddressPoolCidrBlockInput {
	s.ClientToken = &v
	return s
}

// SetIpAddressPoolId sets the IpAddressPoolId field's value.
func (s *AddIpAddressPoolCidrBlockInput) SetIpAddressPoolId(v string) *AddIpAddressPoolCidrBlockInput {
	s.IpAddressPoolId = &v
	return s
}

type AddIpAddressPoolCidrBlockOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CidrBlock *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s AddIpAddressPoolCidrBlockOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s AddIpAddressPoolCidrBlockOutput) GoString() string {
	return s.String()
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *AddIpAddressPoolCidrBlockOutput) SetCidrBlock(v string) *AddIpAddressPoolCidrBlockOutput {
	s.CidrBlock = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *AddIpAddressPoolCidrBlockOutput) SetRequestId(v string) *AddIpAddressPoolCidrBlockOutput {
	s.RequestId = &v
	return s
}
