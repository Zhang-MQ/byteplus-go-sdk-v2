// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeIpAddressPoolsCommon = "DescribeIpAddressPools"

// DescribeIpAddressPoolsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeIpAddressPoolsCommon operation. The "output" return
// value will be populated with the DescribeIpAddressPoolsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeIpAddressPoolsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeIpAddressPoolsCommon Send returns without error.
//
// See DescribeIpAddressPoolsCommon for more information on using the DescribeIpAddressPoolsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeIpAddressPoolsCommonRequest method.
//    req, resp := client.DescribeIpAddressPoolsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeIpAddressPoolsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeIpAddressPoolsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeIpAddressPoolsCommon API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DescribeIpAddressPoolsCommon for usage and error information.
func (c *VPC) DescribeIpAddressPoolsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeIpAddressPoolsCommonRequest(input)
	return out, req.Send()
}

// DescribeIpAddressPoolsCommonWithContext is the same as DescribeIpAddressPoolsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeIpAddressPoolsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeIpAddressPoolsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeIpAddressPoolsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeIpAddressPools = "DescribeIpAddressPools"

// DescribeIpAddressPoolsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeIpAddressPools operation. The "output" return
// value will be populated with the DescribeIpAddressPoolsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeIpAddressPoolsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeIpAddressPoolsCommon Send returns without error.
//
// See DescribeIpAddressPools for more information on using the DescribeIpAddressPools
// API call, and error handling.
//
//    // Example sending a request using the DescribeIpAddressPoolsRequest method.
//    req, resp := client.DescribeIpAddressPoolsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeIpAddressPoolsRequest(input *DescribeIpAddressPoolsInput) (req *request.Request, output *DescribeIpAddressPoolsOutput) {
	op := &request.Operation{
		Name:       opDescribeIpAddressPools,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeIpAddressPoolsInput{}
	}

	output = &DescribeIpAddressPoolsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeIpAddressPools API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DescribeIpAddressPools for usage and error information.
func (c *VPC) DescribeIpAddressPools(input *DescribeIpAddressPoolsInput) (*DescribeIpAddressPoolsOutput, error) {
	req, out := c.DescribeIpAddressPoolsRequest(input)
	return out, req.Send()
}

// DescribeIpAddressPoolsWithContext is the same as DescribeIpAddressPools with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeIpAddressPools for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeIpAddressPoolsWithContext(ctx byteplus.Context, input *DescribeIpAddressPoolsInput, opts ...request.Option) (*DescribeIpAddressPoolsOutput, error) {
	req, out := c.DescribeIpAddressPoolsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeIpAddressPoolsInput struct {
	_ struct{} `type:"structure"`

	ISP *string `type:"string"`

	IpAddressPoolIds []*string `type:"list"`

	MaxResults *int64 `type:"integer"`

	NextToken *string `type:"string"`

	ProjectName *string `type:"string"`

	Status *string `type:"string"`

	TagFilters []*TagFilterForDescribeIpAddressPoolsInput `type:"list"`
}

// String returns the string representation
func (s DescribeIpAddressPoolsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeIpAddressPoolsInput) GoString() string {
	return s.String()
}

// SetISP sets the ISP field's value.
func (s *DescribeIpAddressPoolsInput) SetISP(v string) *DescribeIpAddressPoolsInput {
	s.ISP = &v
	return s
}

// SetIpAddressPoolIds sets the IpAddressPoolIds field's value.
func (s *DescribeIpAddressPoolsInput) SetIpAddressPoolIds(v []*string) *DescribeIpAddressPoolsInput {
	s.IpAddressPoolIds = v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeIpAddressPoolsInput) SetMaxResults(v int64) *DescribeIpAddressPoolsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeIpAddressPoolsInput) SetNextToken(v string) *DescribeIpAddressPoolsInput {
	s.NextToken = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeIpAddressPoolsInput) SetProjectName(v string) *DescribeIpAddressPoolsInput {
	s.ProjectName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeIpAddressPoolsInput) SetStatus(v string) *DescribeIpAddressPoolsInput {
	s.Status = &v
	return s
}

// SetTagFilters sets the TagFilters field's value.
func (s *DescribeIpAddressPoolsInput) SetTagFilters(v []*TagFilterForDescribeIpAddressPoolsInput) *DescribeIpAddressPoolsInput {
	s.TagFilters = v
	return s
}

type DescribeIpAddressPoolsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	IpAddressPools []*IpAddressPoolForDescribeIpAddressPoolsOutput `type:"list"`

	NextToken *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DescribeIpAddressPoolsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeIpAddressPoolsOutput) GoString() string {
	return s.String()
}

// SetIpAddressPools sets the IpAddressPools field's value.
func (s *DescribeIpAddressPoolsOutput) SetIpAddressPools(v []*IpAddressPoolForDescribeIpAddressPoolsOutput) *DescribeIpAddressPoolsOutput {
	s.IpAddressPools = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeIpAddressPoolsOutput) SetNextToken(v string) *DescribeIpAddressPoolsOutput {
	s.NextToken = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeIpAddressPoolsOutput) SetRequestId(v string) *DescribeIpAddressPoolsOutput {
	s.RequestId = &v
	return s
}

type IpAddressPoolForDescribeIpAddressPoolsOutput struct {
	_ struct{} `type:"structure"`

	BusinessStatus *string `type:"string"`

	CidrBlocks []*string `type:"list"`

	CreationTime *string `type:"string"`

	DeletedTime *string `type:"string"`

	Description *string `type:"string"`

	ISP *string `type:"string"`

	IpAddressPoolId *string `type:"string"`

	Name *string `type:"string"`

	OverdueTime *string `type:"string"`

	ProjectName *string `type:"string"`

	Status *string `type:"string"`

	Tags []*TagForDescribeIpAddressPoolsOutput `type:"list"`

	TotalIpCount *int64 `type:"integer"`

	UpdateTime *string `type:"string"`

	UsedIpCount *int64 `type:"integer"`
}

// String returns the string representation
func (s IpAddressPoolForDescribeIpAddressPoolsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s IpAddressPoolForDescribeIpAddressPoolsOutput) GoString() string {
	return s.String()
}

// SetBusinessStatus sets the BusinessStatus field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetBusinessStatus(v string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.BusinessStatus = &v
	return s
}

// SetCidrBlocks sets the CidrBlocks field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetCidrBlocks(v []*string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.CidrBlocks = v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetCreationTime(v string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.CreationTime = &v
	return s
}

// SetDeletedTime sets the DeletedTime field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetDeletedTime(v string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.DeletedTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetDescription(v string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.Description = &v
	return s
}

// SetISP sets the ISP field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetISP(v string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.ISP = &v
	return s
}

// SetIpAddressPoolId sets the IpAddressPoolId field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetIpAddressPoolId(v string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.IpAddressPoolId = &v
	return s
}

// SetName sets the Name field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetName(v string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.Name = &v
	return s
}

// SetOverdueTime sets the OverdueTime field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetOverdueTime(v string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.OverdueTime = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetProjectName(v string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.ProjectName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetStatus(v string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.Status = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetTags(v []*TagForDescribeIpAddressPoolsOutput) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.Tags = v
	return s
}

// SetTotalIpCount sets the TotalIpCount field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetTotalIpCount(v int64) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.TotalIpCount = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetUpdateTime(v string) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.UpdateTime = &v
	return s
}

// SetUsedIpCount sets the UsedIpCount field's value.
func (s *IpAddressPoolForDescribeIpAddressPoolsOutput) SetUsedIpCount(v int64) *IpAddressPoolForDescribeIpAddressPoolsOutput {
	s.UsedIpCount = &v
	return s
}

type TagFilterForDescribeIpAddressPoolsInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Values []*string `type:"list"`
}

// String returns the string representation
func (s TagFilterForDescribeIpAddressPoolsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagFilterForDescribeIpAddressPoolsInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagFilterForDescribeIpAddressPoolsInput) SetKey(v string) *TagFilterForDescribeIpAddressPoolsInput {
	s.Key = &v
	return s
}

// SetValues sets the Values field's value.
func (s *TagFilterForDescribeIpAddressPoolsInput) SetValues(v []*string) *TagFilterForDescribeIpAddressPoolsInput {
	s.Values = v
	return s
}

type TagForDescribeIpAddressPoolsOutput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForDescribeIpAddressPoolsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForDescribeIpAddressPoolsOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForDescribeIpAddressPoolsOutput) SetKey(v string) *TagForDescribeIpAddressPoolsOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForDescribeIpAddressPoolsOutput) SetValue(v string) *TagForDescribeIpAddressPoolsOutput {
	s.Value = &v
	return s
}
