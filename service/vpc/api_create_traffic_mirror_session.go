// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateTrafficMirrorSessionCommon = "CreateTrafficMirrorSession"

// CreateTrafficMirrorSessionCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateTrafficMirrorSessionCommon operation. The "output" return
// value will be populated with the CreateTrafficMirrorSessionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTrafficMirrorSessionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTrafficMirrorSessionCommon Send returns without error.
//
// See CreateTrafficMirrorSessionCommon for more information on using the CreateTrafficMirrorSessionCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateTrafficMirrorSessionCommonRequest method.
//    req, resp := client.CreateTrafficMirrorSessionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateTrafficMirrorSessionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateTrafficMirrorSessionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTrafficMirrorSessionCommon API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation CreateTrafficMirrorSessionCommon for usage and error information.
func (c *VPC) CreateTrafficMirrorSessionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateTrafficMirrorSessionCommonRequest(input)
	return out, req.Send()
}

// CreateTrafficMirrorSessionCommonWithContext is the same as CreateTrafficMirrorSessionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTrafficMirrorSessionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateTrafficMirrorSessionCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateTrafficMirrorSessionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateTrafficMirrorSession = "CreateTrafficMirrorSession"

// CreateTrafficMirrorSessionRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateTrafficMirrorSession operation. The "output" return
// value will be populated with the CreateTrafficMirrorSessionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTrafficMirrorSessionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTrafficMirrorSessionCommon Send returns without error.
//
// See CreateTrafficMirrorSession for more information on using the CreateTrafficMirrorSession
// API call, and error handling.
//
//    // Example sending a request using the CreateTrafficMirrorSessionRequest method.
//    req, resp := client.CreateTrafficMirrorSessionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateTrafficMirrorSessionRequest(input *CreateTrafficMirrorSessionInput) (req *request.Request, output *CreateTrafficMirrorSessionOutput) {
	op := &request.Operation{
		Name:       opCreateTrafficMirrorSession,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateTrafficMirrorSessionInput{}
	}

	output = &CreateTrafficMirrorSessionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTrafficMirrorSession API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation CreateTrafficMirrorSession for usage and error information.
func (c *VPC) CreateTrafficMirrorSession(input *CreateTrafficMirrorSessionInput) (*CreateTrafficMirrorSessionOutput, error) {
	req, out := c.CreateTrafficMirrorSessionRequest(input)
	return out, req.Send()
}

// CreateTrafficMirrorSessionWithContext is the same as CreateTrafficMirrorSession with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTrafficMirrorSession for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateTrafficMirrorSessionWithContext(ctx byteplus.Context, input *CreateTrafficMirrorSessionInput, opts ...request.Option) (*CreateTrafficMirrorSessionOutput, error) {
	req, out := c.CreateTrafficMirrorSessionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateTrafficMirrorSessionInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	// NetworkInterfaceId is a required field
	NetworkInterfaceId *string `type:"string" required:"true"`

	PacketLength *int64 `type:"integer"`

	// Priority is a required field
	Priority *int64 `type:"integer" required:"true"`

	ProjectName *string `type:"string"`

	Tags []*TagForCreateTrafficMirrorSessionInput `type:"list"`

	// TrafficMirrorFilterId is a required field
	TrafficMirrorFilterId *string `type:"string" required:"true"`

	TrafficMirrorSessionName *string `type:"string"`

	// TrafficMirrorTargetId is a required field
	TrafficMirrorTargetId *string `type:"string" required:"true"`

	VirtualNetworkId *int64 `type:"integer"`
}

// String returns the string representation
func (s CreateTrafficMirrorSessionInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTrafficMirrorSessionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateTrafficMirrorSessionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateTrafficMirrorSessionInput"}
	if s.NetworkInterfaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
	}
	if s.Priority == nil {
		invalidParams.Add(request.NewErrParamRequired("Priority"))
	}
	if s.TrafficMirrorFilterId == nil {
		invalidParams.Add(request.NewErrParamRequired("TrafficMirrorFilterId"))
	}
	if s.TrafficMirrorTargetId == nil {
		invalidParams.Add(request.NewErrParamRequired("TrafficMirrorTargetId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateTrafficMirrorSessionInput) SetClientToken(v string) *CreateTrafficMirrorSessionInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateTrafficMirrorSessionInput) SetDescription(v string) *CreateTrafficMirrorSessionInput {
	s.Description = &v
	return s
}

// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
func (s *CreateTrafficMirrorSessionInput) SetNetworkInterfaceId(v string) *CreateTrafficMirrorSessionInput {
	s.NetworkInterfaceId = &v
	return s
}

// SetPacketLength sets the PacketLength field's value.
func (s *CreateTrafficMirrorSessionInput) SetPacketLength(v int64) *CreateTrafficMirrorSessionInput {
	s.PacketLength = &v
	return s
}

// SetPriority sets the Priority field's value.
func (s *CreateTrafficMirrorSessionInput) SetPriority(v int64) *CreateTrafficMirrorSessionInput {
	s.Priority = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateTrafficMirrorSessionInput) SetProjectName(v string) *CreateTrafficMirrorSessionInput {
	s.ProjectName = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *CreateTrafficMirrorSessionInput) SetTags(v []*TagForCreateTrafficMirrorSessionInput) *CreateTrafficMirrorSessionInput {
	s.Tags = v
	return s
}

// SetTrafficMirrorFilterId sets the TrafficMirrorFilterId field's value.
func (s *CreateTrafficMirrorSessionInput) SetTrafficMirrorFilterId(v string) *CreateTrafficMirrorSessionInput {
	s.TrafficMirrorFilterId = &v
	return s
}

// SetTrafficMirrorSessionName sets the TrafficMirrorSessionName field's value.
func (s *CreateTrafficMirrorSessionInput) SetTrafficMirrorSessionName(v string) *CreateTrafficMirrorSessionInput {
	s.TrafficMirrorSessionName = &v
	return s
}

// SetTrafficMirrorTargetId sets the TrafficMirrorTargetId field's value.
func (s *CreateTrafficMirrorSessionInput) SetTrafficMirrorTargetId(v string) *CreateTrafficMirrorSessionInput {
	s.TrafficMirrorTargetId = &v
	return s
}

// SetVirtualNetworkId sets the VirtualNetworkId field's value.
func (s *CreateTrafficMirrorSessionInput) SetVirtualNetworkId(v int64) *CreateTrafficMirrorSessionInput {
	s.VirtualNetworkId = &v
	return s
}

type CreateTrafficMirrorSessionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	OrderId *string `type:"string"`

	RequestId *string `type:"string"`

	TrafficMirrorSessionId *string `type:"string"`
}

// String returns the string representation
func (s CreateTrafficMirrorSessionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTrafficMirrorSessionOutput) GoString() string {
	return s.String()
}

// SetOrderId sets the OrderId field's value.
func (s *CreateTrafficMirrorSessionOutput) SetOrderId(v string) *CreateTrafficMirrorSessionOutput {
	s.OrderId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateTrafficMirrorSessionOutput) SetRequestId(v string) *CreateTrafficMirrorSessionOutput {
	s.RequestId = &v
	return s
}

// SetTrafficMirrorSessionId sets the TrafficMirrorSessionId field's value.
func (s *CreateTrafficMirrorSessionOutput) SetTrafficMirrorSessionId(v string) *CreateTrafficMirrorSessionOutput {
	s.TrafficMirrorSessionId = &v
	return s
}

type TagForCreateTrafficMirrorSessionInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForCreateTrafficMirrorSessionInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForCreateTrafficMirrorSessionInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForCreateTrafficMirrorSessionInput) SetKey(v string) *TagForCreateTrafficMirrorSessionInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForCreateTrafficMirrorSessionInput) SetValue(v string) *TagForCreateTrafficMirrorSessionInput {
	s.Value = &v
	return s
}
