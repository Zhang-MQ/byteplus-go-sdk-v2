// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeTrafficMirrorFiltersCommon = "DescribeTrafficMirrorFilters"

// DescribeTrafficMirrorFiltersCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeTrafficMirrorFiltersCommon operation. The "output" return
// value will be populated with the DescribeTrafficMirrorFiltersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTrafficMirrorFiltersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTrafficMirrorFiltersCommon Send returns without error.
//
// See DescribeTrafficMirrorFiltersCommon for more information on using the DescribeTrafficMirrorFiltersCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeTrafficMirrorFiltersCommonRequest method.
//    req, resp := client.DescribeTrafficMirrorFiltersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeTrafficMirrorFiltersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeTrafficMirrorFiltersCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeTrafficMirrorFiltersCommon API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DescribeTrafficMirrorFiltersCommon for usage and error information.
func (c *VPC) DescribeTrafficMirrorFiltersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeTrafficMirrorFiltersCommonRequest(input)
	return out, req.Send()
}

// DescribeTrafficMirrorFiltersCommonWithContext is the same as DescribeTrafficMirrorFiltersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTrafficMirrorFiltersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeTrafficMirrorFiltersCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeTrafficMirrorFiltersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeTrafficMirrorFilters = "DescribeTrafficMirrorFilters"

// DescribeTrafficMirrorFiltersRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeTrafficMirrorFilters operation. The "output" return
// value will be populated with the DescribeTrafficMirrorFiltersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTrafficMirrorFiltersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTrafficMirrorFiltersCommon Send returns without error.
//
// See DescribeTrafficMirrorFilters for more information on using the DescribeTrafficMirrorFilters
// API call, and error handling.
//
//    // Example sending a request using the DescribeTrafficMirrorFiltersRequest method.
//    req, resp := client.DescribeTrafficMirrorFiltersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeTrafficMirrorFiltersRequest(input *DescribeTrafficMirrorFiltersInput) (req *request.Request, output *DescribeTrafficMirrorFiltersOutput) {
	op := &request.Operation{
		Name:       opDescribeTrafficMirrorFilters,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeTrafficMirrorFiltersInput{}
	}

	output = &DescribeTrafficMirrorFiltersOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeTrafficMirrorFilters API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DescribeTrafficMirrorFilters for usage and error information.
func (c *VPC) DescribeTrafficMirrorFilters(input *DescribeTrafficMirrorFiltersInput) (*DescribeTrafficMirrorFiltersOutput, error) {
	req, out := c.DescribeTrafficMirrorFiltersRequest(input)
	return out, req.Send()
}

// DescribeTrafficMirrorFiltersWithContext is the same as DescribeTrafficMirrorFilters with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTrafficMirrorFilters for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeTrafficMirrorFiltersWithContext(ctx byteplus.Context, input *DescribeTrafficMirrorFiltersInput, opts ...request.Option) (*DescribeTrafficMirrorFiltersOutput, error) {
	req, out := c.DescribeTrafficMirrorFiltersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeTrafficMirrorFiltersInput struct {
	_ struct{} `type:"structure"`

	MaxResults *int64 `type:"integer"`

	NextToken *string `type:"string"`

	ProjectName *string `type:"string"`

	TagFilters []*TagFilterForDescribeTrafficMirrorFiltersInput `type:"list"`

	TrafficMirrorFilterIds *string `type:"string"`

	TrafficMirrorFilterNames *string `type:"string"`
}

// String returns the string representation
func (s DescribeTrafficMirrorFiltersInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTrafficMirrorFiltersInput) GoString() string {
	return s.String()
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeTrafficMirrorFiltersInput) SetMaxResults(v int64) *DescribeTrafficMirrorFiltersInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeTrafficMirrorFiltersInput) SetNextToken(v string) *DescribeTrafficMirrorFiltersInput {
	s.NextToken = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeTrafficMirrorFiltersInput) SetProjectName(v string) *DescribeTrafficMirrorFiltersInput {
	s.ProjectName = &v
	return s
}

// SetTagFilters sets the TagFilters field's value.
func (s *DescribeTrafficMirrorFiltersInput) SetTagFilters(v []*TagFilterForDescribeTrafficMirrorFiltersInput) *DescribeTrafficMirrorFiltersInput {
	s.TagFilters = v
	return s
}

// SetTrafficMirrorFilterIds sets the TrafficMirrorFilterIds field's value.
func (s *DescribeTrafficMirrorFiltersInput) SetTrafficMirrorFilterIds(v string) *DescribeTrafficMirrorFiltersInput {
	s.TrafficMirrorFilterIds = &v
	return s
}

// SetTrafficMirrorFilterNames sets the TrafficMirrorFilterNames field's value.
func (s *DescribeTrafficMirrorFiltersInput) SetTrafficMirrorFilterNames(v string) *DescribeTrafficMirrorFiltersInput {
	s.TrafficMirrorFilterNames = &v
	return s
}

type DescribeTrafficMirrorFiltersOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	NextToken *string `type:"string"`

	RequestId *string `type:"string"`

	TrafficMirrorFilters []*TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput `type:"list"`
}

// String returns the string representation
func (s DescribeTrafficMirrorFiltersOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTrafficMirrorFiltersOutput) GoString() string {
	return s.String()
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeTrafficMirrorFiltersOutput) SetNextToken(v string) *DescribeTrafficMirrorFiltersOutput {
	s.NextToken = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeTrafficMirrorFiltersOutput) SetRequestId(v string) *DescribeTrafficMirrorFiltersOutput {
	s.RequestId = &v
	return s
}

// SetTrafficMirrorFilters sets the TrafficMirrorFilters field's value.
func (s *DescribeTrafficMirrorFiltersOutput) SetTrafficMirrorFilters(v []*TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) *DescribeTrafficMirrorFiltersOutput {
	s.TrafficMirrorFilters = v
	return s
}

type EgressFilterRuleForDescribeTrafficMirrorFiltersOutput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	DestinationCidrBlock *string `type:"string"`

	DestinationPortRange *string `type:"string"`

	Policy *string `type:"string"`

	Priority *int64 `type:"integer"`

	ProjectName *string `type:"string"`

	Protocol *string `type:"string"`

	SourceCidrBlock *string `type:"string"`

	SourcePortRange *string `type:"string"`

	Status *string `type:"string"`

	TrafficDirection *string `type:"string"`

	TrafficMirrorFilterId *string `type:"string"`

	TrafficMirrorFilterRuleId *string `type:"string"`
}

// String returns the string representation
func (s EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetDescription(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.Description = &v
	return s
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetDestinationCidrBlock(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.DestinationCidrBlock = &v
	return s
}

// SetDestinationPortRange sets the DestinationPortRange field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetDestinationPortRange(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.DestinationPortRange = &v
	return s
}

// SetPolicy sets the Policy field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetPolicy(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.Policy = &v
	return s
}

// SetPriority sets the Priority field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetPriority(v int64) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.Priority = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetProjectName(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.ProjectName = &v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetProtocol(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.Protocol = &v
	return s
}

// SetSourceCidrBlock sets the SourceCidrBlock field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetSourceCidrBlock(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.SourceCidrBlock = &v
	return s
}

// SetSourcePortRange sets the SourcePortRange field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetSourcePortRange(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.SourcePortRange = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetStatus(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.Status = &v
	return s
}

// SetTrafficDirection sets the TrafficDirection field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetTrafficDirection(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.TrafficDirection = &v
	return s
}

// SetTrafficMirrorFilterId sets the TrafficMirrorFilterId field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetTrafficMirrorFilterId(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.TrafficMirrorFilterId = &v
	return s
}

// SetTrafficMirrorFilterRuleId sets the TrafficMirrorFilterRuleId field's value.
func (s *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetTrafficMirrorFilterRuleId(v string) *EgressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.TrafficMirrorFilterRuleId = &v
	return s
}

type IngressFilterRuleForDescribeTrafficMirrorFiltersOutput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	DestinationCidrBlock *string `type:"string"`

	DestinationPortRange *string `type:"string"`

	Policy *string `type:"string"`

	Priority *int64 `type:"integer"`

	ProjectName *string `type:"string"`

	Protocol *string `type:"string"`

	SourceCidrBlock *string `type:"string"`

	SourcePortRange *string `type:"string"`

	Status *string `type:"string"`

	TrafficDirection *string `type:"string"`

	TrafficMirrorFilterId *string `type:"string"`

	TrafficMirrorFilterRuleId *string `type:"string"`
}

// String returns the string representation
func (s IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetDescription(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.Description = &v
	return s
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetDestinationCidrBlock(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.DestinationCidrBlock = &v
	return s
}

// SetDestinationPortRange sets the DestinationPortRange field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetDestinationPortRange(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.DestinationPortRange = &v
	return s
}

// SetPolicy sets the Policy field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetPolicy(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.Policy = &v
	return s
}

// SetPriority sets the Priority field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetPriority(v int64) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.Priority = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetProjectName(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.ProjectName = &v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetProtocol(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.Protocol = &v
	return s
}

// SetSourceCidrBlock sets the SourceCidrBlock field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetSourceCidrBlock(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.SourceCidrBlock = &v
	return s
}

// SetSourcePortRange sets the SourcePortRange field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetSourcePortRange(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.SourcePortRange = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetStatus(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.Status = &v
	return s
}

// SetTrafficDirection sets the TrafficDirection field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetTrafficDirection(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.TrafficDirection = &v
	return s
}

// SetTrafficMirrorFilterId sets the TrafficMirrorFilterId field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetTrafficMirrorFilterId(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.TrafficMirrorFilterId = &v
	return s
}

// SetTrafficMirrorFilterRuleId sets the TrafficMirrorFilterRuleId field's value.
func (s *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) SetTrafficMirrorFilterRuleId(v string) *IngressFilterRuleForDescribeTrafficMirrorFiltersOutput {
	s.TrafficMirrorFilterRuleId = &v
	return s
}

type TagFilterForDescribeTrafficMirrorFiltersInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Values []*string `type:"list"`
}

// String returns the string representation
func (s TagFilterForDescribeTrafficMirrorFiltersInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagFilterForDescribeTrafficMirrorFiltersInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagFilterForDescribeTrafficMirrorFiltersInput) SetKey(v string) *TagFilterForDescribeTrafficMirrorFiltersInput {
	s.Key = &v
	return s
}

// SetValues sets the Values field's value.
func (s *TagFilterForDescribeTrafficMirrorFiltersInput) SetValues(v []*string) *TagFilterForDescribeTrafficMirrorFiltersInput {
	s.Values = v
	return s
}

type TagForDescribeTrafficMirrorFiltersOutput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForDescribeTrafficMirrorFiltersOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForDescribeTrafficMirrorFiltersOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForDescribeTrafficMirrorFiltersOutput) SetKey(v string) *TagForDescribeTrafficMirrorFiltersOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForDescribeTrafficMirrorFiltersOutput) SetValue(v string) *TagForDescribeTrafficMirrorFiltersOutput {
	s.Value = &v
	return s
}

type TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput struct {
	_ struct{} `type:"structure"`

	CreatedAt *string `type:"string"`

	Description *string `type:"string"`

	EgressFilterRules []*EgressFilterRuleForDescribeTrafficMirrorFiltersOutput `type:"list"`

	IngressFilterRules []*IngressFilterRuleForDescribeTrafficMirrorFiltersOutput `type:"list"`

	ProjectName *string `type:"string"`

	Status *string `type:"string"`

	Tags []*TagForDescribeTrafficMirrorFiltersOutput `type:"list"`

	TrafficMirrorFilterId *string `type:"string"`

	TrafficMirrorFilterName *string `type:"string"`
}

// String returns the string representation
func (s TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) SetCreatedAt(v string) *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput {
	s.CreatedAt = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) SetDescription(v string) *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput {
	s.Description = &v
	return s
}

// SetEgressFilterRules sets the EgressFilterRules field's value.
func (s *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) SetEgressFilterRules(v []*EgressFilterRuleForDescribeTrafficMirrorFiltersOutput) *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput {
	s.EgressFilterRules = v
	return s
}

// SetIngressFilterRules sets the IngressFilterRules field's value.
func (s *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) SetIngressFilterRules(v []*IngressFilterRuleForDescribeTrafficMirrorFiltersOutput) *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput {
	s.IngressFilterRules = v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) SetProjectName(v string) *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput {
	s.ProjectName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) SetStatus(v string) *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput {
	s.Status = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) SetTags(v []*TagForDescribeTrafficMirrorFiltersOutput) *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput {
	s.Tags = v
	return s
}

// SetTrafficMirrorFilterId sets the TrafficMirrorFilterId field's value.
func (s *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) SetTrafficMirrorFilterId(v string) *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput {
	s.TrafficMirrorFilterId = &v
	return s
}

// SetTrafficMirrorFilterName sets the TrafficMirrorFilterName field's value.
func (s *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput) SetTrafficMirrorFilterName(v string) *TrafficMirrorFilterForDescribeTrafficMirrorFiltersOutput {
	s.TrafficMirrorFilterName = &v
	return s
}
