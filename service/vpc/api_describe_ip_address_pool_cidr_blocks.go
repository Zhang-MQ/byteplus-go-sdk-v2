// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeIpAddressPoolCidrBlocksCommon = "DescribeIpAddressPoolCidrBlocks"

// DescribeIpAddressPoolCidrBlocksCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeIpAddressPoolCidrBlocksCommon operation. The "output" return
// value will be populated with the DescribeIpAddressPoolCidrBlocksCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeIpAddressPoolCidrBlocksCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeIpAddressPoolCidrBlocksCommon Send returns without error.
//
// See DescribeIpAddressPoolCidrBlocksCommon for more information on using the DescribeIpAddressPoolCidrBlocksCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeIpAddressPoolCidrBlocksCommonRequest method.
//    req, resp := client.DescribeIpAddressPoolCidrBlocksCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeIpAddressPoolCidrBlocksCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeIpAddressPoolCidrBlocksCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeIpAddressPoolCidrBlocksCommon API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DescribeIpAddressPoolCidrBlocksCommon for usage and error information.
func (c *VPC) DescribeIpAddressPoolCidrBlocksCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeIpAddressPoolCidrBlocksCommonRequest(input)
	return out, req.Send()
}

// DescribeIpAddressPoolCidrBlocksCommonWithContext is the same as DescribeIpAddressPoolCidrBlocksCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeIpAddressPoolCidrBlocksCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeIpAddressPoolCidrBlocksCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeIpAddressPoolCidrBlocksCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeIpAddressPoolCidrBlocks = "DescribeIpAddressPoolCidrBlocks"

// DescribeIpAddressPoolCidrBlocksRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeIpAddressPoolCidrBlocks operation. The "output" return
// value will be populated with the DescribeIpAddressPoolCidrBlocksCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeIpAddressPoolCidrBlocksCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeIpAddressPoolCidrBlocksCommon Send returns without error.
//
// See DescribeIpAddressPoolCidrBlocks for more information on using the DescribeIpAddressPoolCidrBlocks
// API call, and error handling.
//
//    // Example sending a request using the DescribeIpAddressPoolCidrBlocksRequest method.
//    req, resp := client.DescribeIpAddressPoolCidrBlocksRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeIpAddressPoolCidrBlocksRequest(input *DescribeIpAddressPoolCidrBlocksInput) (req *request.Request, output *DescribeIpAddressPoolCidrBlocksOutput) {
	op := &request.Operation{
		Name:       opDescribeIpAddressPoolCidrBlocks,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeIpAddressPoolCidrBlocksInput{}
	}

	output = &DescribeIpAddressPoolCidrBlocksOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeIpAddressPoolCidrBlocks API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DescribeIpAddressPoolCidrBlocks for usage and error information.
func (c *VPC) DescribeIpAddressPoolCidrBlocks(input *DescribeIpAddressPoolCidrBlocksInput) (*DescribeIpAddressPoolCidrBlocksOutput, error) {
	req, out := c.DescribeIpAddressPoolCidrBlocksRequest(input)
	return out, req.Send()
}

// DescribeIpAddressPoolCidrBlocksWithContext is the same as DescribeIpAddressPoolCidrBlocks with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeIpAddressPoolCidrBlocks for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeIpAddressPoolCidrBlocksWithContext(ctx byteplus.Context, input *DescribeIpAddressPoolCidrBlocksInput, opts ...request.Option) (*DescribeIpAddressPoolCidrBlocksOutput, error) {
	req, out := c.DescribeIpAddressPoolCidrBlocksRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeIpAddressPoolCidrBlocksInput struct {
	_ struct{} `type:"structure"`

	CidrBlock *string `type:"string"`

	// IpAddressPoolId is a required field
	IpAddressPoolId *string `type:"string" required:"true"`

	MaxResults *int64 `type:"integer"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s DescribeIpAddressPoolCidrBlocksInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeIpAddressPoolCidrBlocksInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeIpAddressPoolCidrBlocksInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeIpAddressPoolCidrBlocksInput"}
	if s.IpAddressPoolId == nil {
		invalidParams.Add(request.NewErrParamRequired("IpAddressPoolId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *DescribeIpAddressPoolCidrBlocksInput) SetCidrBlock(v string) *DescribeIpAddressPoolCidrBlocksInput {
	s.CidrBlock = &v
	return s
}

// SetIpAddressPoolId sets the IpAddressPoolId field's value.
func (s *DescribeIpAddressPoolCidrBlocksInput) SetIpAddressPoolId(v string) *DescribeIpAddressPoolCidrBlocksInput {
	s.IpAddressPoolId = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeIpAddressPoolCidrBlocksInput) SetMaxResults(v int64) *DescribeIpAddressPoolCidrBlocksInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeIpAddressPoolCidrBlocksInput) SetNextToken(v string) *DescribeIpAddressPoolCidrBlocksInput {
	s.NextToken = &v
	return s
}

type DescribeIpAddressPoolCidrBlocksOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	IpAddressPoolCidrBlocks []*IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput `type:"list"`

	NextToken *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DescribeIpAddressPoolCidrBlocksOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeIpAddressPoolCidrBlocksOutput) GoString() string {
	return s.String()
}

// SetIpAddressPoolCidrBlocks sets the IpAddressPoolCidrBlocks field's value.
func (s *DescribeIpAddressPoolCidrBlocksOutput) SetIpAddressPoolCidrBlocks(v []*IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput) *DescribeIpAddressPoolCidrBlocksOutput {
	s.IpAddressPoolCidrBlocks = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeIpAddressPoolCidrBlocksOutput) SetNextToken(v string) *DescribeIpAddressPoolCidrBlocksOutput {
	s.NextToken = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeIpAddressPoolCidrBlocksOutput) SetRequestId(v string) *DescribeIpAddressPoolCidrBlocksOutput {
	s.RequestId = &v
	return s
}

type IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput struct {
	_ struct{} `type:"structure"`

	CidrBlock *string `type:"string"`

	CreationTime *string `type:"string"`

	Status *string `type:"string"`

	TotalIpCount *int64 `type:"integer"`

	UsedIpCount *int64 `type:"integer"`
}

// String returns the string representation
func (s IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput) GoString() string {
	return s.String()
}

// SetCidrBlock sets the CidrBlock field's value.
func (s *IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput) SetCidrBlock(v string) *IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput {
	s.CidrBlock = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput) SetCreationTime(v string) *IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput {
	s.CreationTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput) SetStatus(v string) *IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput {
	s.Status = &v
	return s
}

// SetTotalIpCount sets the TotalIpCount field's value.
func (s *IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput) SetTotalIpCount(v int64) *IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput {
	s.TotalIpCount = &v
	return s
}

// SetUsedIpCount sets the UsedIpCount field's value.
func (s *IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput) SetUsedIpCount(v int64) *IpAddressPoolCidrBlockForDescribeIpAddressPoolCidrBlocksOutput {
	s.UsedIpCount = &v
	return s
}
