// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeTrafficMirrorSessionsCommon = "DescribeTrafficMirrorSessions"

// DescribeTrafficMirrorSessionsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeTrafficMirrorSessionsCommon operation. The "output" return
// value will be populated with the DescribeTrafficMirrorSessionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTrafficMirrorSessionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTrafficMirrorSessionsCommon Send returns without error.
//
// See DescribeTrafficMirrorSessionsCommon for more information on using the DescribeTrafficMirrorSessionsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeTrafficMirrorSessionsCommonRequest method.
//    req, resp := client.DescribeTrafficMirrorSessionsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeTrafficMirrorSessionsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeTrafficMirrorSessionsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeTrafficMirrorSessionsCommon API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DescribeTrafficMirrorSessionsCommon for usage and error information.
func (c *VPC) DescribeTrafficMirrorSessionsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeTrafficMirrorSessionsCommonRequest(input)
	return out, req.Send()
}

// DescribeTrafficMirrorSessionsCommonWithContext is the same as DescribeTrafficMirrorSessionsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTrafficMirrorSessionsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeTrafficMirrorSessionsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeTrafficMirrorSessionsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeTrafficMirrorSessions = "DescribeTrafficMirrorSessions"

// DescribeTrafficMirrorSessionsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeTrafficMirrorSessions operation. The "output" return
// value will be populated with the DescribeTrafficMirrorSessionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTrafficMirrorSessionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTrafficMirrorSessionsCommon Send returns without error.
//
// See DescribeTrafficMirrorSessions for more information on using the DescribeTrafficMirrorSessions
// API call, and error handling.
//
//    // Example sending a request using the DescribeTrafficMirrorSessionsRequest method.
//    req, resp := client.DescribeTrafficMirrorSessionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DescribeTrafficMirrorSessionsRequest(input *DescribeTrafficMirrorSessionsInput) (req *request.Request, output *DescribeTrafficMirrorSessionsOutput) {
	op := &request.Operation{
		Name:       opDescribeTrafficMirrorSessions,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeTrafficMirrorSessionsInput{}
	}

	output = &DescribeTrafficMirrorSessionsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeTrafficMirrorSessions API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DescribeTrafficMirrorSessions for usage and error information.
func (c *VPC) DescribeTrafficMirrorSessions(input *DescribeTrafficMirrorSessionsInput) (*DescribeTrafficMirrorSessionsOutput, error) {
	req, out := c.DescribeTrafficMirrorSessionsRequest(input)
	return out, req.Send()
}

// DescribeTrafficMirrorSessionsWithContext is the same as DescribeTrafficMirrorSessions with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTrafficMirrorSessions for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DescribeTrafficMirrorSessionsWithContext(ctx byteplus.Context, input *DescribeTrafficMirrorSessionsInput, opts ...request.Option) (*DescribeTrafficMirrorSessionsOutput, error) {
	req, out := c.DescribeTrafficMirrorSessionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeTrafficMirrorSessionsInput struct {
	_ struct{} `type:"structure"`

	MaxResults *int64 `type:"integer"`

	NetworkInterfaceId *string `type:"string"`

	NextToken *string `type:"string"`

	PacketLength *int64 `type:"integer"`

	Priority *int64 `type:"integer"`

	ProjectName *string `type:"string"`

	TagFilters []*TagFilterForDescribeTrafficMirrorSessionsInput `type:"list"`

	TrafficMirrorFilterId *string `type:"string"`

	TrafficMirrorSessionIds *string `type:"string"`

	TrafficMirrorSessionNames *string `type:"string"`

	TrafficMirrorTargetId *string `type:"string"`

	VirtualNetworkId *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeTrafficMirrorSessionsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTrafficMirrorSessionsInput) GoString() string {
	return s.String()
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetMaxResults(v int64) *DescribeTrafficMirrorSessionsInput {
	s.MaxResults = &v
	return s
}

// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetNetworkInterfaceId(v string) *DescribeTrafficMirrorSessionsInput {
	s.NetworkInterfaceId = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetNextToken(v string) *DescribeTrafficMirrorSessionsInput {
	s.NextToken = &v
	return s
}

// SetPacketLength sets the PacketLength field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetPacketLength(v int64) *DescribeTrafficMirrorSessionsInput {
	s.PacketLength = &v
	return s
}

// SetPriority sets the Priority field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetPriority(v int64) *DescribeTrafficMirrorSessionsInput {
	s.Priority = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetProjectName(v string) *DescribeTrafficMirrorSessionsInput {
	s.ProjectName = &v
	return s
}

// SetTagFilters sets the TagFilters field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetTagFilters(v []*TagFilterForDescribeTrafficMirrorSessionsInput) *DescribeTrafficMirrorSessionsInput {
	s.TagFilters = v
	return s
}

// SetTrafficMirrorFilterId sets the TrafficMirrorFilterId field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetTrafficMirrorFilterId(v string) *DescribeTrafficMirrorSessionsInput {
	s.TrafficMirrorFilterId = &v
	return s
}

// SetTrafficMirrorSessionIds sets the TrafficMirrorSessionIds field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetTrafficMirrorSessionIds(v string) *DescribeTrafficMirrorSessionsInput {
	s.TrafficMirrorSessionIds = &v
	return s
}

// SetTrafficMirrorSessionNames sets the TrafficMirrorSessionNames field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetTrafficMirrorSessionNames(v string) *DescribeTrafficMirrorSessionsInput {
	s.TrafficMirrorSessionNames = &v
	return s
}

// SetTrafficMirrorTargetId sets the TrafficMirrorTargetId field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetTrafficMirrorTargetId(v string) *DescribeTrafficMirrorSessionsInput {
	s.TrafficMirrorTargetId = &v
	return s
}

// SetVirtualNetworkId sets the VirtualNetworkId field's value.
func (s *DescribeTrafficMirrorSessionsInput) SetVirtualNetworkId(v int64) *DescribeTrafficMirrorSessionsInput {
	s.VirtualNetworkId = &v
	return s
}

type DescribeTrafficMirrorSessionsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	NextToken *string `type:"string"`

	RequestId *string `type:"string"`

	TrafficMirrorSessions []*TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput `type:"list"`
}

// String returns the string representation
func (s DescribeTrafficMirrorSessionsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTrafficMirrorSessionsOutput) GoString() string {
	return s.String()
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeTrafficMirrorSessionsOutput) SetNextToken(v string) *DescribeTrafficMirrorSessionsOutput {
	s.NextToken = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeTrafficMirrorSessionsOutput) SetRequestId(v string) *DescribeTrafficMirrorSessionsOutput {
	s.RequestId = &v
	return s
}

// SetTrafficMirrorSessions sets the TrafficMirrorSessions field's value.
func (s *DescribeTrafficMirrorSessionsOutput) SetTrafficMirrorSessions(v []*TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) *DescribeTrafficMirrorSessionsOutput {
	s.TrafficMirrorSessions = v
	return s
}

type TagFilterForDescribeTrafficMirrorSessionsInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Values []*string `type:"list"`
}

// String returns the string representation
func (s TagFilterForDescribeTrafficMirrorSessionsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagFilterForDescribeTrafficMirrorSessionsInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagFilterForDescribeTrafficMirrorSessionsInput) SetKey(v string) *TagFilterForDescribeTrafficMirrorSessionsInput {
	s.Key = &v
	return s
}

// SetValues sets the Values field's value.
func (s *TagFilterForDescribeTrafficMirrorSessionsInput) SetValues(v []*string) *TagFilterForDescribeTrafficMirrorSessionsInput {
	s.Values = v
	return s
}

type TagForDescribeTrafficMirrorSessionsOutput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForDescribeTrafficMirrorSessionsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForDescribeTrafficMirrorSessionsOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForDescribeTrafficMirrorSessionsOutput) SetKey(v string) *TagForDescribeTrafficMirrorSessionsOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForDescribeTrafficMirrorSessionsOutput) SetValue(v string) *TagForDescribeTrafficMirrorSessionsOutput {
	s.Value = &v
	return s
}

type TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput struct {
	_ struct{} `type:"structure"`

	BusinessStatus *string `type:"string"`

	CreatedAt *string `type:"string"`

	Description *string `type:"string"`

	LockReason *string `type:"string"`

	PacketLength *int64 `type:"integer"`

	Priority *int64 `type:"integer"`

	ProjectName *string `type:"string"`

	Status *string `type:"string"`

	Tags []*TagForDescribeTrafficMirrorSessionsOutput `type:"list"`

	TrafficMirrorFilterId *string `type:"string"`

	TrafficMirrorSessionId *string `type:"string"`

	TrafficMirrorSessionName *string `type:"string"`

	TrafficMirrorSourceIds []*string `type:"list"`

	TrafficMirrorTargetId *string `type:"string"`

	VirtualNetworkId *int64 `type:"integer"`
}

// String returns the string representation
func (s TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) GoString() string {
	return s.String()
}

// SetBusinessStatus sets the BusinessStatus field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetBusinessStatus(v string) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.BusinessStatus = &v
	return s
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetCreatedAt(v string) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.CreatedAt = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetDescription(v string) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.Description = &v
	return s
}

// SetLockReason sets the LockReason field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetLockReason(v string) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.LockReason = &v
	return s
}

// SetPacketLength sets the PacketLength field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetPacketLength(v int64) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.PacketLength = &v
	return s
}

// SetPriority sets the Priority field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetPriority(v int64) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.Priority = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetProjectName(v string) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.ProjectName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetStatus(v string) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.Status = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetTags(v []*TagForDescribeTrafficMirrorSessionsOutput) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.Tags = v
	return s
}

// SetTrafficMirrorFilterId sets the TrafficMirrorFilterId field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetTrafficMirrorFilterId(v string) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.TrafficMirrorFilterId = &v
	return s
}

// SetTrafficMirrorSessionId sets the TrafficMirrorSessionId field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetTrafficMirrorSessionId(v string) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.TrafficMirrorSessionId = &v
	return s
}

// SetTrafficMirrorSessionName sets the TrafficMirrorSessionName field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetTrafficMirrorSessionName(v string) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.TrafficMirrorSessionName = &v
	return s
}

// SetTrafficMirrorSourceIds sets the TrafficMirrorSourceIds field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetTrafficMirrorSourceIds(v []*string) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.TrafficMirrorSourceIds = v
	return s
}

// SetTrafficMirrorTargetId sets the TrafficMirrorTargetId field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetTrafficMirrorTargetId(v string) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.TrafficMirrorTargetId = &v
	return s
}

// SetVirtualNetworkId sets the VirtualNetworkId field's value.
func (s *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput) SetVirtualNetworkId(v int64) *TrafficMirrorSessionForDescribeTrafficMirrorSessionsOutput {
	s.VirtualNetworkId = &v
	return s
}
