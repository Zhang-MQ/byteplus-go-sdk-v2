// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteTrafficMirrorSessionCommon = "DeleteTrafficMirrorSession"

// DeleteTrafficMirrorSessionCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteTrafficMirrorSessionCommon operation. The "output" return
// value will be populated with the DeleteTrafficMirrorSessionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteTrafficMirrorSessionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteTrafficMirrorSessionCommon Send returns without error.
//
// See DeleteTrafficMirrorSessionCommon for more information on using the DeleteTrafficMirrorSessionCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteTrafficMirrorSessionCommonRequest method.
//    req, resp := client.DeleteTrafficMirrorSessionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeleteTrafficMirrorSessionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteTrafficMirrorSessionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteTrafficMirrorSessionCommon API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DeleteTrafficMirrorSessionCommon for usage and error information.
func (c *VPC) DeleteTrafficMirrorSessionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteTrafficMirrorSessionCommonRequest(input)
	return out, req.Send()
}

// DeleteTrafficMirrorSessionCommonWithContext is the same as DeleteTrafficMirrorSessionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteTrafficMirrorSessionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeleteTrafficMirrorSessionCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteTrafficMirrorSessionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteTrafficMirrorSession = "DeleteTrafficMirrorSession"

// DeleteTrafficMirrorSessionRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteTrafficMirrorSession operation. The "output" return
// value will be populated with the DeleteTrafficMirrorSessionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteTrafficMirrorSessionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteTrafficMirrorSessionCommon Send returns without error.
//
// See DeleteTrafficMirrorSession for more information on using the DeleteTrafficMirrorSession
// API call, and error handling.
//
//    // Example sending a request using the DeleteTrafficMirrorSessionRequest method.
//    req, resp := client.DeleteTrafficMirrorSessionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeleteTrafficMirrorSessionRequest(input *DeleteTrafficMirrorSessionInput) (req *request.Request, output *DeleteTrafficMirrorSessionOutput) {
	op := &request.Operation{
		Name:       opDeleteTrafficMirrorSession,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteTrafficMirrorSessionInput{}
	}

	output = &DeleteTrafficMirrorSessionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteTrafficMirrorSession API operation for VPC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPC's
// API operation DeleteTrafficMirrorSession for usage and error information.
func (c *VPC) DeleteTrafficMirrorSession(input *DeleteTrafficMirrorSessionInput) (*DeleteTrafficMirrorSessionOutput, error) {
	req, out := c.DeleteTrafficMirrorSessionRequest(input)
	return out, req.Send()
}

// DeleteTrafficMirrorSessionWithContext is the same as DeleteTrafficMirrorSession with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteTrafficMirrorSession for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeleteTrafficMirrorSessionWithContext(ctx byteplus.Context, input *DeleteTrafficMirrorSessionInput, opts ...request.Option) (*DeleteTrafficMirrorSessionOutput, error) {
	req, out := c.DeleteTrafficMirrorSessionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteTrafficMirrorSessionInput struct {
	_ struct{} `type:"structure"`

	// TrafficMirrorSessionId is a required field
	TrafficMirrorSessionId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteTrafficMirrorSessionInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTrafficMirrorSessionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteTrafficMirrorSessionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteTrafficMirrorSessionInput"}
	if s.TrafficMirrorSessionId == nil {
		invalidParams.Add(request.NewErrParamRequired("TrafficMirrorSessionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTrafficMirrorSessionId sets the TrafficMirrorSessionId field's value.
func (s *DeleteTrafficMirrorSessionInput) SetTrafficMirrorSessionId(v string) *DeleteTrafficMirrorSessionInput {
	s.TrafficMirrorSessionId = &v
	return s
}

type DeleteTrafficMirrorSessionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteTrafficMirrorSessionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTrafficMirrorSessionOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteTrafficMirrorSessionOutput) SetRequestId(v string) *DeleteTrafficMirrorSessionOutput {
	s.RequestId = &v
	return s
}
