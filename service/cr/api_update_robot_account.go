// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cr

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateRobotAccountCommon = "UpdateRobotAccount"

// UpdateRobotAccountCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateRobotAccountCommon operation. The "output" return
// value will be populated with the UpdateRobotAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateRobotAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateRobotAccountCommon Send returns without error.
//
// See UpdateRobotAccountCommon for more information on using the UpdateRobotAccountCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateRobotAccountCommonRequest method.
//    req, resp := client.UpdateRobotAccountCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CR) UpdateRobotAccountCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateRobotAccountCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateRobotAccountCommon API operation for CR.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CR's
// API operation UpdateRobotAccountCommon for usage and error information.
func (c *CR) UpdateRobotAccountCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateRobotAccountCommonRequest(input)
	return out, req.Send()
}

// UpdateRobotAccountCommonWithContext is the same as UpdateRobotAccountCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateRobotAccountCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CR) UpdateRobotAccountCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateRobotAccountCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateRobotAccount = "UpdateRobotAccount"

// UpdateRobotAccountRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateRobotAccount operation. The "output" return
// value will be populated with the UpdateRobotAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateRobotAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateRobotAccountCommon Send returns without error.
//
// See UpdateRobotAccount for more information on using the UpdateRobotAccount
// API call, and error handling.
//
//    // Example sending a request using the UpdateRobotAccountRequest method.
//    req, resp := client.UpdateRobotAccountRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CR) UpdateRobotAccountRequest(input *UpdateRobotAccountInput) (req *request.Request, output *UpdateRobotAccountOutput) {
	op := &request.Operation{
		Name:       opUpdateRobotAccount,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateRobotAccountInput{}
	}

	output = &UpdateRobotAccountOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateRobotAccount API operation for CR.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CR's
// API operation UpdateRobotAccount for usage and error information.
func (c *CR) UpdateRobotAccount(input *UpdateRobotAccountInput) (*UpdateRobotAccountOutput, error) {
	req, out := c.UpdateRobotAccountRequest(input)
	return out, req.Send()
}

// UpdateRobotAccountWithContext is the same as UpdateRobotAccount with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateRobotAccount for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CR) UpdateRobotAccountWithContext(ctx byteplus.Context, input *UpdateRobotAccountInput, opts ...request.Option) (*UpdateRobotAccountOutput, error) {
	req, out := c.UpdateRobotAccountRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type PermissionForUpdateRobotAccountInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Actions []*string `type:"list" json:",omitempty"`

	Resource *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PermissionForUpdateRobotAccountInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PermissionForUpdateRobotAccountInput) GoString() string {
	return s.String()
}

// SetActions sets the Actions field's value.
func (s *PermissionForUpdateRobotAccountInput) SetActions(v []*string) *PermissionForUpdateRobotAccountInput {
	s.Actions = v
	return s
}

// SetResource sets the Resource field's value.
func (s *PermissionForUpdateRobotAccountInput) SetResource(v string) *PermissionForUpdateRobotAccountInput {
	s.Resource = &v
	return s
}

type UpdateRobotAccountInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Disabled *bool `type:"boolean" json:",omitempty"`

	Duration *int64 `type:"int64" json:",omitempty"`

	Permissions []*PermissionForUpdateRobotAccountInput `type:"list" json:",omitempty"`

	// Registry is a required field
	Registry *string `min:"3" max:"30" type:"string" json:",omitempty" required:"true"`

	// Username is a required field
	Username *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateRobotAccountInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateRobotAccountInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateRobotAccountInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateRobotAccountInput"}
	if s.Registry == nil {
		invalidParams.Add(request.NewErrParamRequired("Registry"))
	}
	if s.Registry != nil && len(*s.Registry) < 3 {
		invalidParams.Add(request.NewErrParamMinLen("Registry", 3))
	}
	if s.Registry != nil && len(*s.Registry) > 30 {
		invalidParams.Add(request.NewErrParamMaxLen("Registry", 30, *s.Registry))
	}
	if s.Username == nil {
		invalidParams.Add(request.NewErrParamRequired("Username"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *UpdateRobotAccountInput) SetDescription(v string) *UpdateRobotAccountInput {
	s.Description = &v
	return s
}

// SetDisabled sets the Disabled field's value.
func (s *UpdateRobotAccountInput) SetDisabled(v bool) *UpdateRobotAccountInput {
	s.Disabled = &v
	return s
}

// SetDuration sets the Duration field's value.
func (s *UpdateRobotAccountInput) SetDuration(v int64) *UpdateRobotAccountInput {
	s.Duration = &v
	return s
}

// SetPermissions sets the Permissions field's value.
func (s *UpdateRobotAccountInput) SetPermissions(v []*PermissionForUpdateRobotAccountInput) *UpdateRobotAccountInput {
	s.Permissions = v
	return s
}

// SetRegistry sets the Registry field's value.
func (s *UpdateRobotAccountInput) SetRegistry(v string) *UpdateRobotAccountInput {
	s.Registry = &v
	return s
}

// SetUsername sets the Username field's value.
func (s *UpdateRobotAccountInput) SetUsername(v string) *UpdateRobotAccountInput {
	s.Username = &v
	return s
}

type UpdateRobotAccountOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateRobotAccountOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateRobotAccountOutput) GoString() string {
	return s.String()
}
