// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cr

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteRegistryCommon = "DeleteRegistry"

// DeleteRegistryCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteRegistryCommon operation. The "output" return
// value will be populated with the DeleteRegistryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteRegistryCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteRegistryCommon Send returns without error.
//
// See DeleteRegistryCommon for more information on using the DeleteRegistryCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteRegistryCommonRequest method.
//    req, resp := client.DeleteRegistryCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CR) DeleteRegistryCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteRegistryCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteRegistryCommon API operation for CR.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CR's
// API operation DeleteRegistryCommon for usage and error information.
func (c *CR) DeleteRegistryCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteRegistryCommonRequest(input)
	return out, req.Send()
}

// DeleteRegistryCommonWithContext is the same as DeleteRegistryCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRegistryCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CR) DeleteRegistryCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteRegistryCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteRegistry = "DeleteRegistry"

// DeleteRegistryRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteRegistry operation. The "output" return
// value will be populated with the DeleteRegistryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteRegistryCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteRegistryCommon Send returns without error.
//
// See DeleteRegistry for more information on using the DeleteRegistry
// API call, and error handling.
//
//    // Example sending a request using the DeleteRegistryRequest method.
//    req, resp := client.DeleteRegistryRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CR) DeleteRegistryRequest(input *DeleteRegistryInput) (req *request.Request, output *DeleteRegistryOutput) {
	op := &request.Operation{
		Name:       opDeleteRegistry,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteRegistryInput{}
	}

	output = &DeleteRegistryOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteRegistry API operation for CR.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CR's
// API operation DeleteRegistry for usage and error information.
func (c *CR) DeleteRegistry(input *DeleteRegistryInput) (*DeleteRegistryOutput, error) {
	req, out := c.DeleteRegistryRequest(input)
	return out, req.Send()
}

// DeleteRegistryWithContext is the same as DeleteRegistry with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRegistry for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CR) DeleteRegistryWithContext(ctx byteplus.Context, input *DeleteRegistryInput, opts ...request.Option) (*DeleteRegistryOutput, error) {
	req, out := c.DeleteRegistryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteRegistryInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DeleteImmediately *bool `type:"boolean" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteRegistryInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteRegistryInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteRegistryInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteRegistryInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeleteImmediately sets the DeleteImmediately field's value.
func (s *DeleteRegistryInput) SetDeleteImmediately(v bool) *DeleteRegistryInput {
	s.DeleteImmediately = &v
	return s
}

// SetName sets the Name field's value.
func (s *DeleteRegistryInput) SetName(v string) *DeleteRegistryInput {
	s.Name = &v
	return s
}

type DeleteRegistryOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteRegistryOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteRegistryOutput) GoString() string {
	return s.String()
}
