// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDetectImageCommon = "DetectImage"

// DetectImageCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DetectImageCommon operation. The "output" return
// value will be populated with the DetectImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DetectImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after DetectImageCommon Send returns without error.
//
// See DetectImageCommon for more information on using the DetectImageCommon
// API call, and error handling.
//
//    // Example sending a request using the DetectImageCommonRequest method.
//    req, resp := client.DetectImageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DetectImageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDetectImageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DetectImageCommon API operation for ECS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECS's
// API operation DetectImageCommon for usage and error information.
func (c *ECS) DetectImageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DetectImageCommonRequest(input)
	return out, req.Send()
}

// DetectImageCommonWithContext is the same as DetectImageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DetectImageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DetectImageCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DetectImageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDetectImage = "DetectImage"

// DetectImageRequest generates a "byteplus/request.Request" representing the
// client's request for the DetectImage operation. The "output" return
// value will be populated with the DetectImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DetectImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after DetectImageCommon Send returns without error.
//
// See DetectImage for more information on using the DetectImage
// API call, and error handling.
//
//    // Example sending a request using the DetectImageRequest method.
//    req, resp := client.DetectImageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DetectImageRequest(input *DetectImageInput) (req *request.Request, output *DetectImageOutput) {
	op := &request.Operation{
		Name:       opDetectImage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DetectImageInput{}
	}

	output = &DetectImageOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DetectImage API operation for ECS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECS's
// API operation DetectImage for usage and error information.
func (c *ECS) DetectImage(input *DetectImageInput) (*DetectImageOutput, error) {
	req, out := c.DetectImageRequest(input)
	return out, req.Send()
}

// DetectImageWithContext is the same as DetectImage with the addition of
// the ability to pass a context and additional request options.
//
// See DetectImage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DetectImageWithContext(ctx byteplus.Context, input *DetectImageInput, opts ...request.Option) (*DetectImageOutput, error) {
	req, out := c.DetectImageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DetectImageInput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`
}

// String returns the string representation
func (s DetectImageInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DetectImageInput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *DetectImageInput) SetImageId(v string) *DetectImageInput {
	s.ImageId = &v
	return s
}

type DetectImageOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DetectImageOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DetectImageOutput) GoString() string {
	return s.String()
}
