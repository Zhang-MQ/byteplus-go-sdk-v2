// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteScheduledInstanceCommon = "DeleteScheduledInstance"

// DeleteScheduledInstanceCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteScheduledInstanceCommon operation. The "output" return
// value will be populated with the DeleteScheduledInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteScheduledInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteScheduledInstanceCommon Send returns without error.
//
// See DeleteScheduledInstanceCommon for more information on using the DeleteScheduledInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteScheduledInstanceCommonRequest method.
//    req, resp := client.DeleteScheduledInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteScheduledInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteScheduledInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteScheduledInstanceCommon API operation for ECS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECS's
// API operation DeleteScheduledInstanceCommon for usage and error information.
func (c *ECS) DeleteScheduledInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteScheduledInstanceCommonRequest(input)
	return out, req.Send()
}

// DeleteScheduledInstanceCommonWithContext is the same as DeleteScheduledInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteScheduledInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteScheduledInstanceCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteScheduledInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteScheduledInstance = "DeleteScheduledInstance"

// DeleteScheduledInstanceRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteScheduledInstance operation. The "output" return
// value will be populated with the DeleteScheduledInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteScheduledInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteScheduledInstanceCommon Send returns without error.
//
// See DeleteScheduledInstance for more information on using the DeleteScheduledInstance
// API call, and error handling.
//
//    // Example sending a request using the DeleteScheduledInstanceRequest method.
//    req, resp := client.DeleteScheduledInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteScheduledInstanceRequest(input *DeleteScheduledInstanceInput) (req *request.Request, output *DeleteScheduledInstanceOutput) {
	op := &request.Operation{
		Name:       opDeleteScheduledInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteScheduledInstanceInput{}
	}

	output = &DeleteScheduledInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteScheduledInstance API operation for ECS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECS's
// API operation DeleteScheduledInstance for usage and error information.
func (c *ECS) DeleteScheduledInstance(input *DeleteScheduledInstanceInput) (*DeleteScheduledInstanceOutput, error) {
	req, out := c.DeleteScheduledInstanceRequest(input)
	return out, req.Send()
}

// DeleteScheduledInstanceWithContext is the same as DeleteScheduledInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteScheduledInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteScheduledInstanceWithContext(ctx byteplus.Context, input *DeleteScheduledInstanceInput, opts ...request.Option) (*DeleteScheduledInstanceOutput, error) {
	req, out := c.DeleteScheduledInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteScheduledInstanceInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	ScheduledInstanceId *string `type:"string"`
}

// String returns the string representation
func (s DeleteScheduledInstanceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteScheduledInstanceInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *DeleteScheduledInstanceInput) SetClientToken(v string) *DeleteScheduledInstanceInput {
	s.ClientToken = &v
	return s
}

// SetScheduledInstanceId sets the ScheduledInstanceId field's value.
func (s *DeleteScheduledInstanceInput) SetScheduledInstanceId(v string) *DeleteScheduledInstanceInput {
	s.ScheduledInstanceId = &v
	return s
}

type DeleteScheduledInstanceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteScheduledInstanceOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteScheduledInstanceOutput) GoString() string {
	return s.String()
}
