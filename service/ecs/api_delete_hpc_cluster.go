// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteHpcClusterCommon = "DeleteHpcCluster"

// DeleteHpcClusterCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteHpcClusterCommon operation. The "output" return
// value will be populated with the DeleteHpcClusterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteHpcClusterCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteHpcClusterCommon Send returns without error.
//
// See DeleteHpcClusterCommon for more information on using the DeleteHpcClusterCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteHpcClusterCommonRequest method.
//    req, resp := client.DeleteHpcClusterCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteHpcClusterCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteHpcClusterCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteHpcClusterCommon API operation for ECS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECS's
// API operation DeleteHpcClusterCommon for usage and error information.
func (c *ECS) DeleteHpcClusterCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteHpcClusterCommonRequest(input)
	return out, req.Send()
}

// DeleteHpcClusterCommonWithContext is the same as DeleteHpcClusterCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteHpcClusterCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteHpcClusterCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteHpcClusterCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteHpcCluster = "DeleteHpcCluster"

// DeleteHpcClusterRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteHpcCluster operation. The "output" return
// value will be populated with the DeleteHpcClusterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteHpcClusterCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteHpcClusterCommon Send returns without error.
//
// See DeleteHpcCluster for more information on using the DeleteHpcCluster
// API call, and error handling.
//
//    // Example sending a request using the DeleteHpcClusterRequest method.
//    req, resp := client.DeleteHpcClusterRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteHpcClusterRequest(input *DeleteHpcClusterInput) (req *request.Request, output *DeleteHpcClusterOutput) {
	op := &request.Operation{
		Name:       opDeleteHpcCluster,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteHpcClusterInput{}
	}

	output = &DeleteHpcClusterOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteHpcCluster API operation for ECS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECS's
// API operation DeleteHpcCluster for usage and error information.
func (c *ECS) DeleteHpcCluster(input *DeleteHpcClusterInput) (*DeleteHpcClusterOutput, error) {
	req, out := c.DeleteHpcClusterRequest(input)
	return out, req.Send()
}

// DeleteHpcClusterWithContext is the same as DeleteHpcCluster with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteHpcCluster for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteHpcClusterWithContext(ctx byteplus.Context, input *DeleteHpcClusterInput, opts ...request.Option) (*DeleteHpcClusterOutput, error) {
	req, out := c.DeleteHpcClusterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteHpcClusterInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	// HpcClusterId is a required field
	HpcClusterId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteHpcClusterInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteHpcClusterInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteHpcClusterInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteHpcClusterInput"}
	if s.HpcClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("HpcClusterId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *DeleteHpcClusterInput) SetClientToken(v string) *DeleteHpcClusterInput {
	s.ClientToken = &v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *DeleteHpcClusterInput) SetHpcClusterId(v string) *DeleteHpcClusterInput {
	s.HpcClusterId = &v
	return s
}

type DeleteHpcClusterOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteHpcClusterOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteHpcClusterOutput) GoString() string {
	return s.String()
}
