// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeInvocationsCommon = "DescribeInvocations"

// DescribeInvocationsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeInvocationsCommon operation. The "output" return
// value will be populated with the DescribeInvocationsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInvocationsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInvocationsCommon Send returns without error.
//
// See DescribeInvocationsCommon for more information on using the DescribeInvocationsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeInvocationsCommonRequest method.
//    req, resp := client.DescribeInvocationsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInvocationsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInvocationsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInvocationsCommon API operation for ECS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECS's
// API operation DescribeInvocationsCommon for usage and error information.
func (c *ECS) DescribeInvocationsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInvocationsCommonRequest(input)
	return out, req.Send()
}

// DescribeInvocationsCommonWithContext is the same as DescribeInvocationsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInvocationsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInvocationsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInvocationsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInvocations = "DescribeInvocations"

// DescribeInvocationsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeInvocations operation. The "output" return
// value will be populated with the DescribeInvocationsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInvocationsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInvocationsCommon Send returns without error.
//
// See DescribeInvocations for more information on using the DescribeInvocations
// API call, and error handling.
//
//    // Example sending a request using the DescribeInvocationsRequest method.
//    req, resp := client.DescribeInvocationsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInvocationsRequest(input *DescribeInvocationsInput) (req *request.Request, output *DescribeInvocationsOutput) {
	op := &request.Operation{
		Name:       opDescribeInvocations,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInvocationsInput{}
	}

	output = &DescribeInvocationsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInvocations API operation for ECS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECS's
// API operation DescribeInvocations for usage and error information.
func (c *ECS) DescribeInvocations(input *DescribeInvocationsInput) (*DescribeInvocationsOutput, error) {
	req, out := c.DescribeInvocationsRequest(input)
	return out, req.Send()
}

// DescribeInvocationsWithContext is the same as DescribeInvocations with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInvocations for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInvocationsWithContext(ctx byteplus.Context, input *DescribeInvocationsInput, opts ...request.Option) (*DescribeInvocationsOutput, error) {
	req, out := c.DescribeInvocationsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeInvocationsInput struct {
	_ struct{} `type:"structure"`

	CommandId *string `type:"string"`

	CommandName *string `type:"string"`

	CommandType *string `type:"string"`

	ContentEncoding *string `type:"string"`

	InvocationId *string `type:"string"`

	InvocationName *string `type:"string"`

	InvocationStatus *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	ProjectName *string `type:"string"`

	RepeatMode *string `type:"string"`

	TagFilters []*TagFilterForDescribeInvocationsInput `type:"list"`
}

// String returns the string representation
func (s DescribeInvocationsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInvocationsInput) GoString() string {
	return s.String()
}

// SetCommandId sets the CommandId field's value.
func (s *DescribeInvocationsInput) SetCommandId(v string) *DescribeInvocationsInput {
	s.CommandId = &v
	return s
}

// SetCommandName sets the CommandName field's value.
func (s *DescribeInvocationsInput) SetCommandName(v string) *DescribeInvocationsInput {
	s.CommandName = &v
	return s
}

// SetCommandType sets the CommandType field's value.
func (s *DescribeInvocationsInput) SetCommandType(v string) *DescribeInvocationsInput {
	s.CommandType = &v
	return s
}

// SetContentEncoding sets the ContentEncoding field's value.
func (s *DescribeInvocationsInput) SetContentEncoding(v string) *DescribeInvocationsInput {
	s.ContentEncoding = &v
	return s
}

// SetInvocationId sets the InvocationId field's value.
func (s *DescribeInvocationsInput) SetInvocationId(v string) *DescribeInvocationsInput {
	s.InvocationId = &v
	return s
}

// SetInvocationName sets the InvocationName field's value.
func (s *DescribeInvocationsInput) SetInvocationName(v string) *DescribeInvocationsInput {
	s.InvocationName = &v
	return s
}

// SetInvocationStatus sets the InvocationStatus field's value.
func (s *DescribeInvocationsInput) SetInvocationStatus(v string) *DescribeInvocationsInput {
	s.InvocationStatus = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInvocationsInput) SetPageNumber(v int32) *DescribeInvocationsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInvocationsInput) SetPageSize(v int32) *DescribeInvocationsInput {
	s.PageSize = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeInvocationsInput) SetProjectName(v string) *DescribeInvocationsInput {
	s.ProjectName = &v
	return s
}

// SetRepeatMode sets the RepeatMode field's value.
func (s *DescribeInvocationsInput) SetRepeatMode(v string) *DescribeInvocationsInput {
	s.RepeatMode = &v
	return s
}

// SetTagFilters sets the TagFilters field's value.
func (s *DescribeInvocationsInput) SetTagFilters(v []*TagFilterForDescribeInvocationsInput) *DescribeInvocationsInput {
	s.TagFilters = v
	return s
}

type DescribeInvocationsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Invocations []*InvocationForDescribeInvocationsOutput `type:"list"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	TotalCount *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeInvocationsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInvocationsOutput) GoString() string {
	return s.String()
}

// SetInvocations sets the Invocations field's value.
func (s *DescribeInvocationsOutput) SetInvocations(v []*InvocationForDescribeInvocationsOutput) *DescribeInvocationsOutput {
	s.Invocations = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInvocationsOutput) SetPageNumber(v int32) *DescribeInvocationsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInvocationsOutput) SetPageSize(v int32) *DescribeInvocationsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeInvocationsOutput) SetTotalCount(v int32) *DescribeInvocationsOutput {
	s.TotalCount = &v
	return s
}

type InvocationForDescribeInvocationsOutput struct {
	_ struct{} `type:"structure"`

	CommandContent *string `type:"string"`

	CommandDescription *string `type:"string"`

	CommandId *string `type:"string"`

	CommandName *string `type:"string"`

	CommandProvider *string `type:"string"`

	CommandType *string `type:"string"`

	EnableParameter *bool `type:"boolean"`

	EndTime *string `type:"string"`

	Frequency *string `type:"string"`

	InstanceNumber *int32 `type:"int32"`

	InvocationDescription *string `type:"string"`

	InvocationId *string `type:"string"`

	InvocationName *string `type:"string"`

	InvocationStatus *string `type:"string"`

	LaunchTime *string `type:"string"`

	ParameterDefinitions []*ParameterDefinitionForDescribeInvocationsOutput `type:"list"`

	Parameters *string `type:"string"`

	ProjectName *string `type:"string"`

	RecurrenceEndTime *string `type:"string"`

	RepeatMode *string `type:"string"`

	StartTime *string `type:"string"`

	Tags []*TagForDescribeInvocationsOutput `type:"list"`

	Timeout *int32 `type:"int32"`

	Username *string `type:"string"`

	WorkingDir *string `type:"string"`
}

// String returns the string representation
func (s InvocationForDescribeInvocationsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s InvocationForDescribeInvocationsOutput) GoString() string {
	return s.String()
}

// SetCommandContent sets the CommandContent field's value.
func (s *InvocationForDescribeInvocationsOutput) SetCommandContent(v string) *InvocationForDescribeInvocationsOutput {
	s.CommandContent = &v
	return s
}

// SetCommandDescription sets the CommandDescription field's value.
func (s *InvocationForDescribeInvocationsOutput) SetCommandDescription(v string) *InvocationForDescribeInvocationsOutput {
	s.CommandDescription = &v
	return s
}

// SetCommandId sets the CommandId field's value.
func (s *InvocationForDescribeInvocationsOutput) SetCommandId(v string) *InvocationForDescribeInvocationsOutput {
	s.CommandId = &v
	return s
}

// SetCommandName sets the CommandName field's value.
func (s *InvocationForDescribeInvocationsOutput) SetCommandName(v string) *InvocationForDescribeInvocationsOutput {
	s.CommandName = &v
	return s
}

// SetCommandProvider sets the CommandProvider field's value.
func (s *InvocationForDescribeInvocationsOutput) SetCommandProvider(v string) *InvocationForDescribeInvocationsOutput {
	s.CommandProvider = &v
	return s
}

// SetCommandType sets the CommandType field's value.
func (s *InvocationForDescribeInvocationsOutput) SetCommandType(v string) *InvocationForDescribeInvocationsOutput {
	s.CommandType = &v
	return s
}

// SetEnableParameter sets the EnableParameter field's value.
func (s *InvocationForDescribeInvocationsOutput) SetEnableParameter(v bool) *InvocationForDescribeInvocationsOutput {
	s.EnableParameter = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *InvocationForDescribeInvocationsOutput) SetEndTime(v string) *InvocationForDescribeInvocationsOutput {
	s.EndTime = &v
	return s
}

// SetFrequency sets the Frequency field's value.
func (s *InvocationForDescribeInvocationsOutput) SetFrequency(v string) *InvocationForDescribeInvocationsOutput {
	s.Frequency = &v
	return s
}

// SetInstanceNumber sets the InstanceNumber field's value.
func (s *InvocationForDescribeInvocationsOutput) SetInstanceNumber(v int32) *InvocationForDescribeInvocationsOutput {
	s.InstanceNumber = &v
	return s
}

// SetInvocationDescription sets the InvocationDescription field's value.
func (s *InvocationForDescribeInvocationsOutput) SetInvocationDescription(v string) *InvocationForDescribeInvocationsOutput {
	s.InvocationDescription = &v
	return s
}

// SetInvocationId sets the InvocationId field's value.
func (s *InvocationForDescribeInvocationsOutput) SetInvocationId(v string) *InvocationForDescribeInvocationsOutput {
	s.InvocationId = &v
	return s
}

// SetInvocationName sets the InvocationName field's value.
func (s *InvocationForDescribeInvocationsOutput) SetInvocationName(v string) *InvocationForDescribeInvocationsOutput {
	s.InvocationName = &v
	return s
}

// SetInvocationStatus sets the InvocationStatus field's value.
func (s *InvocationForDescribeInvocationsOutput) SetInvocationStatus(v string) *InvocationForDescribeInvocationsOutput {
	s.InvocationStatus = &v
	return s
}

// SetLaunchTime sets the LaunchTime field's value.
func (s *InvocationForDescribeInvocationsOutput) SetLaunchTime(v string) *InvocationForDescribeInvocationsOutput {
	s.LaunchTime = &v
	return s
}

// SetParameterDefinitions sets the ParameterDefinitions field's value.
func (s *InvocationForDescribeInvocationsOutput) SetParameterDefinitions(v []*ParameterDefinitionForDescribeInvocationsOutput) *InvocationForDescribeInvocationsOutput {
	s.ParameterDefinitions = v
	return s
}

// SetParameters sets the Parameters field's value.
func (s *InvocationForDescribeInvocationsOutput) SetParameters(v string) *InvocationForDescribeInvocationsOutput {
	s.Parameters = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *InvocationForDescribeInvocationsOutput) SetProjectName(v string) *InvocationForDescribeInvocationsOutput {
	s.ProjectName = &v
	return s
}

// SetRecurrenceEndTime sets the RecurrenceEndTime field's value.
func (s *InvocationForDescribeInvocationsOutput) SetRecurrenceEndTime(v string) *InvocationForDescribeInvocationsOutput {
	s.RecurrenceEndTime = &v
	return s
}

// SetRepeatMode sets the RepeatMode field's value.
func (s *InvocationForDescribeInvocationsOutput) SetRepeatMode(v string) *InvocationForDescribeInvocationsOutput {
	s.RepeatMode = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *InvocationForDescribeInvocationsOutput) SetStartTime(v string) *InvocationForDescribeInvocationsOutput {
	s.StartTime = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *InvocationForDescribeInvocationsOutput) SetTags(v []*TagForDescribeInvocationsOutput) *InvocationForDescribeInvocationsOutput {
	s.Tags = v
	return s
}

// SetTimeout sets the Timeout field's value.
func (s *InvocationForDescribeInvocationsOutput) SetTimeout(v int32) *InvocationForDescribeInvocationsOutput {
	s.Timeout = &v
	return s
}

// SetUsername sets the Username field's value.
func (s *InvocationForDescribeInvocationsOutput) SetUsername(v string) *InvocationForDescribeInvocationsOutput {
	s.Username = &v
	return s
}

// SetWorkingDir sets the WorkingDir field's value.
func (s *InvocationForDescribeInvocationsOutput) SetWorkingDir(v string) *InvocationForDescribeInvocationsOutput {
	s.WorkingDir = &v
	return s
}

type ParameterDefinitionForDescribeInvocationsOutput struct {
	_ struct{} `type:"structure"`

	DecimalPrecision *int32 `type:"int32"`

	DefaultValue *string `type:"string"`

	MaxLength *int32 `type:"int32"`

	MaxValue *string `type:"string"`

	MinLength *int32 `type:"int32"`

	MinValue *string `type:"string"`

	Name *string `type:"string"`

	Required *bool `type:"boolean"`

	Type *string `type:"string"`
}

// String returns the string representation
func (s ParameterDefinitionForDescribeInvocationsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ParameterDefinitionForDescribeInvocationsOutput) GoString() string {
	return s.String()
}

// SetDecimalPrecision sets the DecimalPrecision field's value.
func (s *ParameterDefinitionForDescribeInvocationsOutput) SetDecimalPrecision(v int32) *ParameterDefinitionForDescribeInvocationsOutput {
	s.DecimalPrecision = &v
	return s
}

// SetDefaultValue sets the DefaultValue field's value.
func (s *ParameterDefinitionForDescribeInvocationsOutput) SetDefaultValue(v string) *ParameterDefinitionForDescribeInvocationsOutput {
	s.DefaultValue = &v
	return s
}

// SetMaxLength sets the MaxLength field's value.
func (s *ParameterDefinitionForDescribeInvocationsOutput) SetMaxLength(v int32) *ParameterDefinitionForDescribeInvocationsOutput {
	s.MaxLength = &v
	return s
}

// SetMaxValue sets the MaxValue field's value.
func (s *ParameterDefinitionForDescribeInvocationsOutput) SetMaxValue(v string) *ParameterDefinitionForDescribeInvocationsOutput {
	s.MaxValue = &v
	return s
}

// SetMinLength sets the MinLength field's value.
func (s *ParameterDefinitionForDescribeInvocationsOutput) SetMinLength(v int32) *ParameterDefinitionForDescribeInvocationsOutput {
	s.MinLength = &v
	return s
}

// SetMinValue sets the MinValue field's value.
func (s *ParameterDefinitionForDescribeInvocationsOutput) SetMinValue(v string) *ParameterDefinitionForDescribeInvocationsOutput {
	s.MinValue = &v
	return s
}

// SetName sets the Name field's value.
func (s *ParameterDefinitionForDescribeInvocationsOutput) SetName(v string) *ParameterDefinitionForDescribeInvocationsOutput {
	s.Name = &v
	return s
}

// SetRequired sets the Required field's value.
func (s *ParameterDefinitionForDescribeInvocationsOutput) SetRequired(v bool) *ParameterDefinitionForDescribeInvocationsOutput {
	s.Required = &v
	return s
}

// SetType sets the Type field's value.
func (s *ParameterDefinitionForDescribeInvocationsOutput) SetType(v string) *ParameterDefinitionForDescribeInvocationsOutput {
	s.Type = &v
	return s
}

type TagFilterForDescribeInvocationsInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Values []*string `type:"list"`
}

// String returns the string representation
func (s TagFilterForDescribeInvocationsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagFilterForDescribeInvocationsInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagFilterForDescribeInvocationsInput) SetKey(v string) *TagFilterForDescribeInvocationsInput {
	s.Key = &v
	return s
}

// SetValues sets the Values field's value.
func (s *TagFilterForDescribeInvocationsInput) SetValues(v []*string) *TagFilterForDescribeInvocationsInput {
	s.Values = v
	return s
}

type TagForDescribeInvocationsOutput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForDescribeInvocationsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForDescribeInvocationsOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForDescribeInvocationsOutput) SetKey(v string) *TagForDescribeInvocationsOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForDescribeInvocationsOutput) SetValue(v string) *TagForDescribeInvocationsOutput {
	s.Value = &v
	return s
}
