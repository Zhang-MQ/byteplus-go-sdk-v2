// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opListEntitiesForPolicyCommon = "ListEntitiesForPolicy"

// ListEntitiesForPolicyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ListEntitiesForPolicyCommon operation. The "output" return
// value will be populated with the ListEntitiesForPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListEntitiesForPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListEntitiesForPolicyCommon Send returns without error.
//
// See ListEntitiesForPolicyCommon for more information on using the ListEntitiesForPolicyCommon
// API call, and error handling.
//
//	// Example sending a request using the ListEntitiesForPolicyCommonRequest method.
//	req, resp := client.ListEntitiesForPolicyCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) ListEntitiesForPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListEntitiesForPolicyCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListEntitiesForPolicyCommon API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation ListEntitiesForPolicyCommon for usage and error information.
func (c *IAM) ListEntitiesForPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListEntitiesForPolicyCommonRequest(input)
	return out, req.Send()
}

// ListEntitiesForPolicyCommonWithContext is the same as ListEntitiesForPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListEntitiesForPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) ListEntitiesForPolicyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListEntitiesForPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListEntitiesForPolicy = "ListEntitiesForPolicy"

// ListEntitiesForPolicyRequest generates a "byteplus/request.Request" representing the
// client's request for the ListEntitiesForPolicy operation. The "output" return
// value will be populated with the ListEntitiesForPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListEntitiesForPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListEntitiesForPolicyCommon Send returns without error.
//
// See ListEntitiesForPolicy for more information on using the ListEntitiesForPolicy
// API call, and error handling.
//
//	// Example sending a request using the ListEntitiesForPolicyRequest method.
//	req, resp := client.ListEntitiesForPolicyRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) ListEntitiesForPolicyRequest(input *ListEntitiesForPolicyInput) (req *request.Request, output *ListEntitiesForPolicyOutput) {
	op := &request.Operation{
		Name:       opListEntitiesForPolicy,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListEntitiesForPolicyInput{}
	}

	output = &ListEntitiesForPolicyOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListEntitiesForPolicy API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation ListEntitiesForPolicy for usage and error information.
func (c *IAM) ListEntitiesForPolicy(input *ListEntitiesForPolicyInput) (*ListEntitiesForPolicyOutput, error) {
	req, out := c.ListEntitiesForPolicyRequest(input)
	return out, req.Send()
}

// ListEntitiesForPolicyWithContext is the same as ListEntitiesForPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See ListEntitiesForPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) ListEntitiesForPolicyWithContext(ctx byteplus.Context, input *ListEntitiesForPolicyInput, opts ...request.Option) (*ListEntitiesForPolicyOutput, error) {
	req, out := c.ListEntitiesForPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListEntitiesForPolicyInput struct {
	_ struct{} `type:"structure"`

	EntityFilter *string `type:"string"`

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`

	// PolicyName is a required field
	PolicyName *string `type:"string" required:"true"`

	// PolicyType is a required field
	PolicyType *string `type:"string" required:"true" enum:"EnumOfPolicyTypeForListEntitiesForPolicyInput"`
}

// String returns the string representation
func (s ListEntitiesForPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListEntitiesForPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListEntitiesForPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListEntitiesForPolicyInput"}
	if s.PolicyName == nil {
		invalidParams.Add(request.NewErrParamRequired("PolicyName"))
	}
	if s.PolicyType == nil {
		invalidParams.Add(request.NewErrParamRequired("PolicyType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEntityFilter sets the EntityFilter field's value.
func (s *ListEntitiesForPolicyInput) SetEntityFilter(v string) *ListEntitiesForPolicyInput {
	s.EntityFilter = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListEntitiesForPolicyInput) SetLimit(v int32) *ListEntitiesForPolicyInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListEntitiesForPolicyInput) SetOffset(v int32) *ListEntitiesForPolicyInput {
	s.Offset = &v
	return s
}

// SetPolicyName sets the PolicyName field's value.
func (s *ListEntitiesForPolicyInput) SetPolicyName(v string) *ListEntitiesForPolicyInput {
	s.PolicyName = &v
	return s
}

// SetPolicyType sets the PolicyType field's value.
func (s *ListEntitiesForPolicyInput) SetPolicyType(v string) *ListEntitiesForPolicyInput {
	s.PolicyType = &v
	return s
}

type ListEntitiesForPolicyOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`

	PolicyRoles []*PolicyRoleForListEntitiesForPolicyOutput `type:"list"`

	PolicyUserGroups []*PolicyUserGroupForListEntitiesForPolicyOutput `type:"list"`

	PolicyUsers []*PolicyUserForListEntitiesForPolicyOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s ListEntitiesForPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListEntitiesForPolicyOutput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *ListEntitiesForPolicyOutput) SetLimit(v int32) *ListEntitiesForPolicyOutput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListEntitiesForPolicyOutput) SetOffset(v int32) *ListEntitiesForPolicyOutput {
	s.Offset = &v
	return s
}

// SetPolicyRoles sets the PolicyRoles field's value.
func (s *ListEntitiesForPolicyOutput) SetPolicyRoles(v []*PolicyRoleForListEntitiesForPolicyOutput) *ListEntitiesForPolicyOutput {
	s.PolicyRoles = v
	return s
}

// SetPolicyUserGroups sets the PolicyUserGroups field's value.
func (s *ListEntitiesForPolicyOutput) SetPolicyUserGroups(v []*PolicyUserGroupForListEntitiesForPolicyOutput) *ListEntitiesForPolicyOutput {
	s.PolicyUserGroups = v
	return s
}

// SetPolicyUsers sets the PolicyUsers field's value.
func (s *ListEntitiesForPolicyOutput) SetPolicyUsers(v []*PolicyUserForListEntitiesForPolicyOutput) *ListEntitiesForPolicyOutput {
	s.PolicyUsers = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListEntitiesForPolicyOutput) SetTotal(v int32) *ListEntitiesForPolicyOutput {
	s.Total = &v
	return s
}

type PolicyRoleForListEntitiesForPolicyOutput struct {
	_ struct{} `type:"structure"`

	AttachDate *string `type:"string"`

	Description *string `type:"string"`

	DisplayName *string `type:"string"`

	Id *int32 `type:"int32"`

	PolicyScope []*PolicyScopeForListEntitiesForPolicyOutput `type:"list"`

	RoleName *string `type:"string"`
}

// String returns the string representation
func (s PolicyRoleForListEntitiesForPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PolicyRoleForListEntitiesForPolicyOutput) GoString() string {
	return s.String()
}

// SetAttachDate sets the AttachDate field's value.
func (s *PolicyRoleForListEntitiesForPolicyOutput) SetAttachDate(v string) *PolicyRoleForListEntitiesForPolicyOutput {
	s.AttachDate = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *PolicyRoleForListEntitiesForPolicyOutput) SetDescription(v string) *PolicyRoleForListEntitiesForPolicyOutput {
	s.Description = &v
	return s
}

// SetDisplayName sets the DisplayName field's value.
func (s *PolicyRoleForListEntitiesForPolicyOutput) SetDisplayName(v string) *PolicyRoleForListEntitiesForPolicyOutput {
	s.DisplayName = &v
	return s
}

// SetId sets the Id field's value.
func (s *PolicyRoleForListEntitiesForPolicyOutput) SetId(v int32) *PolicyRoleForListEntitiesForPolicyOutput {
	s.Id = &v
	return s
}

// SetPolicyScope sets the PolicyScope field's value.
func (s *PolicyRoleForListEntitiesForPolicyOutput) SetPolicyScope(v []*PolicyScopeForListEntitiesForPolicyOutput) *PolicyRoleForListEntitiesForPolicyOutput {
	s.PolicyScope = v
	return s
}

// SetRoleName sets the RoleName field's value.
func (s *PolicyRoleForListEntitiesForPolicyOutput) SetRoleName(v string) *PolicyRoleForListEntitiesForPolicyOutput {
	s.RoleName = &v
	return s
}

type PolicyScopeForListEntitiesForPolicyOutput struct {
	_ struct{} `type:"structure"`

	AttachDate *string `type:"string"`

	PolicyScopeType *string `type:"string"`

	ProjectDisplayName *string `type:"string"`

	ProjectName *string `type:"string"`
}

// String returns the string representation
func (s PolicyScopeForListEntitiesForPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PolicyScopeForListEntitiesForPolicyOutput) GoString() string {
	return s.String()
}

// SetAttachDate sets the AttachDate field's value.
func (s *PolicyScopeForListEntitiesForPolicyOutput) SetAttachDate(v string) *PolicyScopeForListEntitiesForPolicyOutput {
	s.AttachDate = &v
	return s
}

// SetPolicyScopeType sets the PolicyScopeType field's value.
func (s *PolicyScopeForListEntitiesForPolicyOutput) SetPolicyScopeType(v string) *PolicyScopeForListEntitiesForPolicyOutput {
	s.PolicyScopeType = &v
	return s
}

// SetProjectDisplayName sets the ProjectDisplayName field's value.
func (s *PolicyScopeForListEntitiesForPolicyOutput) SetProjectDisplayName(v string) *PolicyScopeForListEntitiesForPolicyOutput {
	s.ProjectDisplayName = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *PolicyScopeForListEntitiesForPolicyOutput) SetProjectName(v string) *PolicyScopeForListEntitiesForPolicyOutput {
	s.ProjectName = &v
	return s
}

type PolicyUserForListEntitiesForPolicyOutput struct {
	_ struct{} `type:"structure"`

	AttachDate *string `type:"string"`

	Description *string `type:"string"`

	DisplayName *string `type:"string"`

	Id *int32 `type:"int32"`

	PolicyScope []*PolicyScopeForListEntitiesForPolicyOutput `type:"list"`

	UserName *string `type:"string"`
}

// String returns the string representation
func (s PolicyUserForListEntitiesForPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PolicyUserForListEntitiesForPolicyOutput) GoString() string {
	return s.String()
}

// SetAttachDate sets the AttachDate field's value.
func (s *PolicyUserForListEntitiesForPolicyOutput) SetAttachDate(v string) *PolicyUserForListEntitiesForPolicyOutput {
	s.AttachDate = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *PolicyUserForListEntitiesForPolicyOutput) SetDescription(v string) *PolicyUserForListEntitiesForPolicyOutput {
	s.Description = &v
	return s
}

// SetDisplayName sets the DisplayName field's value.
func (s *PolicyUserForListEntitiesForPolicyOutput) SetDisplayName(v string) *PolicyUserForListEntitiesForPolicyOutput {
	s.DisplayName = &v
	return s
}

// SetId sets the Id field's value.
func (s *PolicyUserForListEntitiesForPolicyOutput) SetId(v int32) *PolicyUserForListEntitiesForPolicyOutput {
	s.Id = &v
	return s
}

// SetPolicyScope sets the PolicyScope field's value.
func (s *PolicyUserForListEntitiesForPolicyOutput) SetPolicyScope(v []*PolicyScopeForListEntitiesForPolicyOutput) *PolicyUserForListEntitiesForPolicyOutput {
	s.PolicyScope = v
	return s
}

// SetUserName sets the UserName field's value.
func (s *PolicyUserForListEntitiesForPolicyOutput) SetUserName(v string) *PolicyUserForListEntitiesForPolicyOutput {
	s.UserName = &v
	return s
}

type PolicyUserGroupForListEntitiesForPolicyOutput struct {
	_ struct{} `type:"structure"`

	AttachDate *string `type:"string"`

	Description *string `type:"string"`

	DisplayName *string `type:"string"`

	Id *int32 `type:"int32"`

	PolicyScope []*PolicyScopeForListEntitiesForPolicyOutput `type:"list"`

	UserGroupName *string `type:"string"`
}

// String returns the string representation
func (s PolicyUserGroupForListEntitiesForPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PolicyUserGroupForListEntitiesForPolicyOutput) GoString() string {
	return s.String()
}

// SetAttachDate sets the AttachDate field's value.
func (s *PolicyUserGroupForListEntitiesForPolicyOutput) SetAttachDate(v string) *PolicyUserGroupForListEntitiesForPolicyOutput {
	s.AttachDate = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *PolicyUserGroupForListEntitiesForPolicyOutput) SetDescription(v string) *PolicyUserGroupForListEntitiesForPolicyOutput {
	s.Description = &v
	return s
}

// SetDisplayName sets the DisplayName field's value.
func (s *PolicyUserGroupForListEntitiesForPolicyOutput) SetDisplayName(v string) *PolicyUserGroupForListEntitiesForPolicyOutput {
	s.DisplayName = &v
	return s
}

// SetId sets the Id field's value.
func (s *PolicyUserGroupForListEntitiesForPolicyOutput) SetId(v int32) *PolicyUserGroupForListEntitiesForPolicyOutput {
	s.Id = &v
	return s
}

// SetPolicyScope sets the PolicyScope field's value.
func (s *PolicyUserGroupForListEntitiesForPolicyOutput) SetPolicyScope(v []*PolicyScopeForListEntitiesForPolicyOutput) *PolicyUserGroupForListEntitiesForPolicyOutput {
	s.PolicyScope = v
	return s
}

// SetUserGroupName sets the UserGroupName field's value.
func (s *PolicyUserGroupForListEntitiesForPolicyOutput) SetUserGroupName(v string) *PolicyUserGroupForListEntitiesForPolicyOutput {
	s.UserGroupName = &v
	return s
}

const (
	// EnumOfPolicyTypeForListEntitiesForPolicyInputSystem is a EnumOfPolicyTypeForListEntitiesForPolicyInput enum value
	EnumOfPolicyTypeForListEntitiesForPolicyInputSystem = "System"

	// EnumOfPolicyTypeForListEntitiesForPolicyInputCustom is a EnumOfPolicyTypeForListEntitiesForPolicyInput enum value
	EnumOfPolicyTypeForListEntitiesForPolicyInputCustom = "Custom"
)
