// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteOAuthProviderCommon = "DeleteOAuthProvider"

// DeleteOAuthProviderCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteOAuthProviderCommon operation. The "output" return
// value will be populated with the DeleteOAuthProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteOAuthProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteOAuthProviderCommon Send returns without error.
//
// See DeleteOAuthProviderCommon for more information on using the DeleteOAuthProviderCommon
// API call, and error handling.
//
//	// Example sending a request using the DeleteOAuthProviderCommonRequest method.
//	req, resp := client.DeleteOAuthProviderCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) DeleteOAuthProviderCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteOAuthProviderCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteOAuthProviderCommon API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation DeleteOAuthProviderCommon for usage and error information.
func (c *IAM) DeleteOAuthProviderCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteOAuthProviderCommonRequest(input)
	return out, req.Send()
}

// DeleteOAuthProviderCommonWithContext is the same as DeleteOAuthProviderCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteOAuthProviderCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) DeleteOAuthProviderCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteOAuthProviderCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteOAuthProvider = "DeleteOAuthProvider"

// DeleteOAuthProviderRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteOAuthProvider operation. The "output" return
// value will be populated with the DeleteOAuthProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteOAuthProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteOAuthProviderCommon Send returns without error.
//
// See DeleteOAuthProvider for more information on using the DeleteOAuthProvider
// API call, and error handling.
//
//	// Example sending a request using the DeleteOAuthProviderRequest method.
//	req, resp := client.DeleteOAuthProviderRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) DeleteOAuthProviderRequest(input *DeleteOAuthProviderInput) (req *request.Request, output *DeleteOAuthProviderOutput) {
	op := &request.Operation{
		Name:       opDeleteOAuthProvider,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteOAuthProviderInput{}
	}

	output = &DeleteOAuthProviderOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteOAuthProvider API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation DeleteOAuthProvider for usage and error information.
func (c *IAM) DeleteOAuthProvider(input *DeleteOAuthProviderInput) (*DeleteOAuthProviderOutput, error) {
	req, out := c.DeleteOAuthProviderRequest(input)
	return out, req.Send()
}

// DeleteOAuthProviderWithContext is the same as DeleteOAuthProvider with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteOAuthProvider for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) DeleteOAuthProviderWithContext(ctx byteplus.Context, input *DeleteOAuthProviderInput, opts ...request.Option) (*DeleteOAuthProviderOutput, error) {
	req, out := c.DeleteOAuthProviderRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteOAuthProviderInput struct {
	_ struct{} `type:"structure"`

	// OAuthProviderName is a required field
	OAuthProviderName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteOAuthProviderInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteOAuthProviderInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteOAuthProviderInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteOAuthProviderInput"}
	if s.OAuthProviderName == nil {
		invalidParams.Add(request.NewErrParamRequired("OAuthProviderName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetOAuthProviderName sets the OAuthProviderName field's value.
func (s *DeleteOAuthProviderInput) SetOAuthProviderName(v string) *DeleteOAuthProviderInput {
	s.OAuthProviderName = &v
	return s
}

type DeleteOAuthProviderOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteOAuthProviderOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteOAuthProviderOutput) GoString() string {
	return s.String()
}
