// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetSecurityConfigCommon = "GetSecurityConfig"

// GetSecurityConfigCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetSecurityConfigCommon operation. The "output" return
// value will be populated with the GetSecurityConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetSecurityConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetSecurityConfigCommon Send returns without error.
//
// See GetSecurityConfigCommon for more information on using the GetSecurityConfigCommon
// API call, and error handling.
//
//	// Example sending a request using the GetSecurityConfigCommonRequest method.
//	req, resp := client.GetSecurityConfigCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) GetSecurityConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetSecurityConfigCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetSecurityConfigCommon API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation GetSecurityConfigCommon for usage and error information.
func (c *IAM) GetSecurityConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetSecurityConfigCommonRequest(input)
	return out, req.Send()
}

// GetSecurityConfigCommonWithContext is the same as GetSecurityConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetSecurityConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) GetSecurityConfigCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetSecurityConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetSecurityConfig = "GetSecurityConfig"

// GetSecurityConfigRequest generates a "byteplus/request.Request" representing the
// client's request for the GetSecurityConfig operation. The "output" return
// value will be populated with the GetSecurityConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetSecurityConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetSecurityConfigCommon Send returns without error.
//
// See GetSecurityConfig for more information on using the GetSecurityConfig
// API call, and error handling.
//
//	// Example sending a request using the GetSecurityConfigRequest method.
//	req, resp := client.GetSecurityConfigRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) GetSecurityConfigRequest(input *GetSecurityConfigInput) (req *request.Request, output *GetSecurityConfigOutput) {
	op := &request.Operation{
		Name:       opGetSecurityConfig,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetSecurityConfigInput{}
	}

	output = &GetSecurityConfigOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetSecurityConfig API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation GetSecurityConfig for usage and error information.
func (c *IAM) GetSecurityConfig(input *GetSecurityConfigInput) (*GetSecurityConfigOutput, error) {
	req, out := c.GetSecurityConfigRequest(input)
	return out, req.Send()
}

// GetSecurityConfigWithContext is the same as GetSecurityConfig with the addition of
// the ability to pass a context and additional request options.
//
// See GetSecurityConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) GetSecurityConfigWithContext(ctx byteplus.Context, input *GetSecurityConfigInput, opts ...request.Option) (*GetSecurityConfigOutput, error) {
	req, out := c.GetSecurityConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetSecurityConfigInput struct {
	_ struct{} `type:"structure"`

	// UserName is a required field
	UserName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetSecurityConfigInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSecurityConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetSecurityConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetSecurityConfigInput"}
	if s.UserName == nil {
		invalidParams.Add(request.NewErrParamRequired("UserName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUserName sets the UserName field's value.
func (s *GetSecurityConfigInput) SetUserName(v string) *GetSecurityConfigInput {
	s.UserName = &v
	return s
}

type GetSecurityConfigOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	SafeAuthClose *int32 `type:"int32"`

	SafeAuthExemptDuration *int32 `type:"int32"`

	SafeAuthType *string `type:"string"`

	UserID *int32 `type:"int32"`
}

// String returns the string representation
func (s GetSecurityConfigOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSecurityConfigOutput) GoString() string {
	return s.String()
}

// SetSafeAuthClose sets the SafeAuthClose field's value.
func (s *GetSecurityConfigOutput) SetSafeAuthClose(v int32) *GetSecurityConfigOutput {
	s.SafeAuthClose = &v
	return s
}

// SetSafeAuthExemptDuration sets the SafeAuthExemptDuration field's value.
func (s *GetSecurityConfigOutput) SetSafeAuthExemptDuration(v int32) *GetSecurityConfigOutput {
	s.SafeAuthExemptDuration = &v
	return s
}

// SetSafeAuthType sets the SafeAuthType field's value.
func (s *GetSecurityConfigOutput) SetSafeAuthType(v string) *GetSecurityConfigOutput {
	s.SafeAuthType = &v
	return s
}

// SetUserID sets the UserID field's value.
func (s *GetSecurityConfigOutput) SetUserID(v int32) *GetSecurityConfigOutput {
	s.UserID = &v
	return s
}
