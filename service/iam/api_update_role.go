// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateRoleCommon = "UpdateRole"

// UpdateRoleCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateRoleCommon operation. The "output" return
// value will be populated with the UpdateRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateRoleCommon Send returns without error.
//
// See UpdateRoleCommon for more information on using the UpdateRoleCommon
// API call, and error handling.
//
//	// Example sending a request using the UpdateRoleCommonRequest method.
//	req, resp := client.UpdateRoleCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) UpdateRoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateRoleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateRoleCommon API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation UpdateRoleCommon for usage and error information.
func (c *IAM) UpdateRoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateRoleCommonRequest(input)
	return out, req.Send()
}

// UpdateRoleCommonWithContext is the same as UpdateRoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateRoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) UpdateRoleCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateRoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateRole = "UpdateRole"

// UpdateRoleRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateRole operation. The "output" return
// value will be populated with the UpdateRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateRoleCommon Send returns without error.
//
// See UpdateRole for more information on using the UpdateRole
// API call, and error handling.
//
//	// Example sending a request using the UpdateRoleRequest method.
//	req, resp := client.UpdateRoleRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) UpdateRoleRequest(input *UpdateRoleInput) (req *request.Request, output *UpdateRoleOutput) {
	op := &request.Operation{
		Name:       opUpdateRole,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateRoleInput{}
	}

	output = &UpdateRoleOutput{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateRole API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation UpdateRole for usage and error information.
func (c *IAM) UpdateRole(input *UpdateRoleInput) (*UpdateRoleOutput, error) {
	req, out := c.UpdateRoleRequest(input)
	return out, req.Send()
}

// UpdateRoleWithContext is the same as UpdateRole with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateRole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) UpdateRoleWithContext(ctx byteplus.Context, input *UpdateRoleInput, opts ...request.Option) (*UpdateRoleOutput, error) {
	req, out := c.UpdateRoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateRoleInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	DisplayName *string `type:"string"`

	MaxSessionDuration *int32 `type:"int32"`

	NewRoleName *string `type:"string"`

	// RoleName is a required field
	RoleName *string `type:"string" required:"true"`

	TrustPolicyDocument *string `type:"string"`
}

// String returns the string representation
func (s UpdateRoleInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateRoleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateRoleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateRoleInput"}
	if s.RoleName == nil {
		invalidParams.Add(request.NewErrParamRequired("RoleName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *UpdateRoleInput) SetDescription(v string) *UpdateRoleInput {
	s.Description = &v
	return s
}

// SetDisplayName sets the DisplayName field's value.
func (s *UpdateRoleInput) SetDisplayName(v string) *UpdateRoleInput {
	s.DisplayName = &v
	return s
}

// SetMaxSessionDuration sets the MaxSessionDuration field's value.
func (s *UpdateRoleInput) SetMaxSessionDuration(v int32) *UpdateRoleInput {
	s.MaxSessionDuration = &v
	return s
}

// SetNewRoleName sets the NewRoleName field's value.
func (s *UpdateRoleInput) SetNewRoleName(v string) *UpdateRoleInput {
	s.NewRoleName = &v
	return s
}

// SetRoleName sets the RoleName field's value.
func (s *UpdateRoleInput) SetRoleName(v string) *UpdateRoleInput {
	s.RoleName = &v
	return s
}

// SetTrustPolicyDocument sets the TrustPolicyDocument field's value.
func (s *UpdateRoleInput) SetTrustPolicyDocument(v string) *UpdateRoleInput {
	s.TrustPolicyDocument = &v
	return s
}

type UpdateRoleOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateRoleOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateRoleOutput) GoString() string {
	return s.String()
}
