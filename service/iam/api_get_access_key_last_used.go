// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetAccessKeyLastUsedCommon = "GetAccessKeyLastUsed"

// GetAccessKeyLastUsedCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetAccessKeyLastUsedCommon operation. The "output" return
// value will be populated with the GetAccessKeyLastUsedCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetAccessKeyLastUsedCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetAccessKeyLastUsedCommon Send returns without error.
//
// See GetAccessKeyLastUsedCommon for more information on using the GetAccessKeyLastUsedCommon
// API call, and error handling.
//
//	// Example sending a request using the GetAccessKeyLastUsedCommonRequest method.
//	req, resp := client.GetAccessKeyLastUsedCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) GetAccessKeyLastUsedCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetAccessKeyLastUsedCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetAccessKeyLastUsedCommon API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation GetAccessKeyLastUsedCommon for usage and error information.
func (c *IAM) GetAccessKeyLastUsedCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetAccessKeyLastUsedCommonRequest(input)
	return out, req.Send()
}

// GetAccessKeyLastUsedCommonWithContext is the same as GetAccessKeyLastUsedCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetAccessKeyLastUsedCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) GetAccessKeyLastUsedCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetAccessKeyLastUsedCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetAccessKeyLastUsed = "GetAccessKeyLastUsed"

// GetAccessKeyLastUsedRequest generates a "byteplus/request.Request" representing the
// client's request for the GetAccessKeyLastUsed operation. The "output" return
// value will be populated with the GetAccessKeyLastUsedCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetAccessKeyLastUsedCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetAccessKeyLastUsedCommon Send returns without error.
//
// See GetAccessKeyLastUsed for more information on using the GetAccessKeyLastUsed
// API call, and error handling.
//
//	// Example sending a request using the GetAccessKeyLastUsedRequest method.
//	req, resp := client.GetAccessKeyLastUsedRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) GetAccessKeyLastUsedRequest(input *GetAccessKeyLastUsedInput) (req *request.Request, output *GetAccessKeyLastUsedOutput) {
	op := &request.Operation{
		Name:       opGetAccessKeyLastUsed,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetAccessKeyLastUsedInput{}
	}

	output = &GetAccessKeyLastUsedOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetAccessKeyLastUsed API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation GetAccessKeyLastUsed for usage and error information.
func (c *IAM) GetAccessKeyLastUsed(input *GetAccessKeyLastUsedInput) (*GetAccessKeyLastUsedOutput, error) {
	req, out := c.GetAccessKeyLastUsedRequest(input)
	return out, req.Send()
}

// GetAccessKeyLastUsedWithContext is the same as GetAccessKeyLastUsed with the addition of
// the ability to pass a context and additional request options.
//
// See GetAccessKeyLastUsed for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) GetAccessKeyLastUsedWithContext(ctx byteplus.Context, input *GetAccessKeyLastUsedInput, opts ...request.Option) (*GetAccessKeyLastUsedOutput, error) {
	req, out := c.GetAccessKeyLastUsedRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AccessKeyLastUsedForGetAccessKeyLastUsedOutput struct {
	_ struct{} `type:"structure"`

	Region *string `type:"string"`

	RequestTime *string `type:"string"`

	Service *string `type:"string"`
}

// String returns the string representation
func (s AccessKeyLastUsedForGetAccessKeyLastUsedOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s AccessKeyLastUsedForGetAccessKeyLastUsedOutput) GoString() string {
	return s.String()
}

// SetRegion sets the Region field's value.
func (s *AccessKeyLastUsedForGetAccessKeyLastUsedOutput) SetRegion(v string) *AccessKeyLastUsedForGetAccessKeyLastUsedOutput {
	s.Region = &v
	return s
}

// SetRequestTime sets the RequestTime field's value.
func (s *AccessKeyLastUsedForGetAccessKeyLastUsedOutput) SetRequestTime(v string) *AccessKeyLastUsedForGetAccessKeyLastUsedOutput {
	s.RequestTime = &v
	return s
}

// SetService sets the Service field's value.
func (s *AccessKeyLastUsedForGetAccessKeyLastUsedOutput) SetService(v string) *AccessKeyLastUsedForGetAccessKeyLastUsedOutput {
	s.Service = &v
	return s
}

type GetAccessKeyLastUsedInput struct {
	_ struct{} `type:"structure"`

	// AccessKeyId is a required field
	AccessKeyId *string `type:"string" required:"true"`

	UserName *string `type:"string"`
}

// String returns the string representation
func (s GetAccessKeyLastUsedInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAccessKeyLastUsedInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetAccessKeyLastUsedInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetAccessKeyLastUsedInput"}
	if s.AccessKeyId == nil {
		invalidParams.Add(request.NewErrParamRequired("AccessKeyId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccessKeyId sets the AccessKeyId field's value.
func (s *GetAccessKeyLastUsedInput) SetAccessKeyId(v string) *GetAccessKeyLastUsedInput {
	s.AccessKeyId = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *GetAccessKeyLastUsedInput) SetUserName(v string) *GetAccessKeyLastUsedInput {
	s.UserName = &v
	return s
}

type GetAccessKeyLastUsedOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	AccessKeyLastUsed *AccessKeyLastUsedForGetAccessKeyLastUsedOutput `type:"structure"`
}

// String returns the string representation
func (s GetAccessKeyLastUsedOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAccessKeyLastUsedOutput) GoString() string {
	return s.String()
}

// SetAccessKeyLastUsed sets the AccessKeyLastUsed field's value.
func (s *GetAccessKeyLastUsedOutput) SetAccessKeyLastUsed(v *AccessKeyLastUsedForGetAccessKeyLastUsedOutput) *GetAccessKeyLastUsedOutput {
	s.AccessKeyLastUsed = v
	return s
}
