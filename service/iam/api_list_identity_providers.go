// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opListIdentityProvidersCommon = "ListIdentityProviders"

// ListIdentityProvidersCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ListIdentityProvidersCommon operation. The "output" return
// value will be populated with the ListIdentityProvidersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListIdentityProvidersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListIdentityProvidersCommon Send returns without error.
//
// See ListIdentityProvidersCommon for more information on using the ListIdentityProvidersCommon
// API call, and error handling.
//
//	// Example sending a request using the ListIdentityProvidersCommonRequest method.
//	req, resp := client.ListIdentityProvidersCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) ListIdentityProvidersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListIdentityProvidersCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListIdentityProvidersCommon API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation ListIdentityProvidersCommon for usage and error information.
func (c *IAM) ListIdentityProvidersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListIdentityProvidersCommonRequest(input)
	return out, req.Send()
}

// ListIdentityProvidersCommonWithContext is the same as ListIdentityProvidersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListIdentityProvidersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) ListIdentityProvidersCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListIdentityProvidersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListIdentityProviders = "ListIdentityProviders"

// ListIdentityProvidersRequest generates a "byteplus/request.Request" representing the
// client's request for the ListIdentityProviders operation. The "output" return
// value will be populated with the ListIdentityProvidersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListIdentityProvidersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListIdentityProvidersCommon Send returns without error.
//
// See ListIdentityProviders for more information on using the ListIdentityProviders
// API call, and error handling.
//
//	// Example sending a request using the ListIdentityProvidersRequest method.
//	req, resp := client.ListIdentityProvidersRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) ListIdentityProvidersRequest(input *ListIdentityProvidersInput) (req *request.Request, output *ListIdentityProvidersOutput) {
	op := &request.Operation{
		Name:       opListIdentityProviders,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListIdentityProvidersInput{}
	}

	output = &ListIdentityProvidersOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListIdentityProviders API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation ListIdentityProviders for usage and error information.
func (c *IAM) ListIdentityProviders(input *ListIdentityProvidersInput) (*ListIdentityProvidersOutput, error) {
	req, out := c.ListIdentityProvidersRequest(input)
	return out, req.Send()
}

// ListIdentityProvidersWithContext is the same as ListIdentityProviders with the addition of
// the ability to pass a context and additional request options.
//
// See ListIdentityProviders for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) ListIdentityProvidersWithContext(ctx byteplus.Context, input *ListIdentityProvidersInput, opts ...request.Option) (*ListIdentityProvidersOutput, error) {
	req, out := c.ListIdentityProvidersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type IdentityProviderForListIdentityProvidersOutput struct {
	_ struct{} `type:"structure"`

	CreateDate *string `type:"string"`

	Description *string `type:"string"`

	IdpType *int32 `type:"int32"`

	ProviderName *string `type:"string"`

	SSOType *int32 `type:"int32"`

	Status *int32 `type:"int32"`

	Trn *string `type:"string"`

	UpdateDate *string `type:"string"`
}

// String returns the string representation
func (s IdentityProviderForListIdentityProvidersOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s IdentityProviderForListIdentityProvidersOutput) GoString() string {
	return s.String()
}

// SetCreateDate sets the CreateDate field's value.
func (s *IdentityProviderForListIdentityProvidersOutput) SetCreateDate(v string) *IdentityProviderForListIdentityProvidersOutput {
	s.CreateDate = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *IdentityProviderForListIdentityProvidersOutput) SetDescription(v string) *IdentityProviderForListIdentityProvidersOutput {
	s.Description = &v
	return s
}

// SetIdpType sets the IdpType field's value.
func (s *IdentityProviderForListIdentityProvidersOutput) SetIdpType(v int32) *IdentityProviderForListIdentityProvidersOutput {
	s.IdpType = &v
	return s
}

// SetProviderName sets the ProviderName field's value.
func (s *IdentityProviderForListIdentityProvidersOutput) SetProviderName(v string) *IdentityProviderForListIdentityProvidersOutput {
	s.ProviderName = &v
	return s
}

// SetSSOType sets the SSOType field's value.
func (s *IdentityProviderForListIdentityProvidersOutput) SetSSOType(v int32) *IdentityProviderForListIdentityProvidersOutput {
	s.SSOType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *IdentityProviderForListIdentityProvidersOutput) SetStatus(v int32) *IdentityProviderForListIdentityProvidersOutput {
	s.Status = &v
	return s
}

// SetTrn sets the Trn field's value.
func (s *IdentityProviderForListIdentityProvidersOutput) SetTrn(v string) *IdentityProviderForListIdentityProvidersOutput {
	s.Trn = &v
	return s
}

// SetUpdateDate sets the UpdateDate field's value.
func (s *IdentityProviderForListIdentityProvidersOutput) SetUpdateDate(v string) *IdentityProviderForListIdentityProvidersOutput {
	s.UpdateDate = &v
	return s
}

type ListIdentityProvidersInput struct {
	_ struct{} `type:"structure"`

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`
}

// String returns the string representation
func (s ListIdentityProvidersInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListIdentityProvidersInput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *ListIdentityProvidersInput) SetLimit(v int32) *ListIdentityProvidersInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListIdentityProvidersInput) SetOffset(v int32) *ListIdentityProvidersInput {
	s.Offset = &v
	return s
}

type ListIdentityProvidersOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	IdentityProviders []*IdentityProviderForListIdentityProvidersOutput `type:"list"`

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s ListIdentityProvidersOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListIdentityProvidersOutput) GoString() string {
	return s.String()
}

// SetIdentityProviders sets the IdentityProviders field's value.
func (s *ListIdentityProvidersOutput) SetIdentityProviders(v []*IdentityProviderForListIdentityProvidersOutput) *ListIdentityProvidersOutput {
	s.IdentityProviders = v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListIdentityProvidersOutput) SetLimit(v int32) *ListIdentityProvidersOutput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListIdentityProvidersOutput) SetOffset(v int32) *ListIdentityProvidersOutput {
	s.Offset = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListIdentityProvidersOutput) SetTotal(v int32) *ListIdentityProvidersOutput {
	s.Total = &v
	return s
}
