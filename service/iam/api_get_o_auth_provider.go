// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetOAuthProviderCommon = "GetOAuthProvider"

// GetOAuthProviderCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetOAuthProviderCommon operation. The "output" return
// value will be populated with the GetOAuthProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetOAuthProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetOAuthProviderCommon Send returns without error.
//
// See GetOAuthProviderCommon for more information on using the GetOAuthProviderCommon
// API call, and error handling.
//
//	// Example sending a request using the GetOAuthProviderCommonRequest method.
//	req, resp := client.GetOAuthProviderCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) GetOAuthProviderCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetOAuthProviderCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetOAuthProviderCommon API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation GetOAuthProviderCommon for usage and error information.
func (c *IAM) GetOAuthProviderCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetOAuthProviderCommonRequest(input)
	return out, req.Send()
}

// GetOAuthProviderCommonWithContext is the same as GetOAuthProviderCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetOAuthProviderCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) GetOAuthProviderCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetOAuthProviderCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetOAuthProvider = "GetOAuthProvider"

// GetOAuthProviderRequest generates a "byteplus/request.Request" representing the
// client's request for the GetOAuthProvider operation. The "output" return
// value will be populated with the GetOAuthProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetOAuthProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetOAuthProviderCommon Send returns without error.
//
// See GetOAuthProvider for more information on using the GetOAuthProvider
// API call, and error handling.
//
//	// Example sending a request using the GetOAuthProviderRequest method.
//	req, resp := client.GetOAuthProviderRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM) GetOAuthProviderRequest(input *GetOAuthProviderInput) (req *request.Request, output *GetOAuthProviderOutput) {
	op := &request.Operation{
		Name:       opGetOAuthProvider,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetOAuthProviderInput{}
	}

	output = &GetOAuthProviderOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetOAuthProvider API operation for IAM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM's
// API operation GetOAuthProvider for usage and error information.
func (c *IAM) GetOAuthProvider(input *GetOAuthProviderInput) (*GetOAuthProviderOutput, error) {
	req, out := c.GetOAuthProviderRequest(input)
	return out, req.Send()
}

// GetOAuthProviderWithContext is the same as GetOAuthProvider with the addition of
// the ability to pass a context and additional request options.
//
// See GetOAuthProvider for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) GetOAuthProviderWithContext(ctx byteplus.Context, input *GetOAuthProviderInput, opts ...request.Option) (*GetOAuthProviderOutput, error) {
	req, out := c.GetOAuthProviderRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetOAuthProviderInput struct {
	_ struct{} `type:"structure"`

	// OAuthProviderName is a required field
	OAuthProviderName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetOAuthProviderInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetOAuthProviderInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetOAuthProviderInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetOAuthProviderInput"}
	if s.OAuthProviderName == nil {
		invalidParams.Add(request.NewErrParamRequired("OAuthProviderName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetOAuthProviderName sets the OAuthProviderName field's value.
func (s *GetOAuthProviderInput) SetOAuthProviderName(v string) *GetOAuthProviderInput {
	s.OAuthProviderName = &v
	return s
}

type GetOAuthProviderOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	AuthorizeTemplate *string `type:"string"`

	AuthorizeURL *string `type:"string"`

	ClientId *string `type:"string"`

	ClientSecret *string `type:"string"`

	CreateDate *string `type:"string"`

	Description *string `type:"string"`

	IdentityMapType *int32 `type:"int32"`

	IdpIdentityKey *string `type:"string"`

	OAuthProviderName *string `type:"string"`

	ProviderId *string `type:"string"`

	SSOType *int32 `type:"int32"`

	Scope *string `type:"string"`

	Status *int32 `type:"int32"`

	TokenURL *string `type:"string"`

	Trn *string `type:"string"`

	UpdateDate *string `type:"string"`

	UserInfoURL *string `type:"string"`
}

// String returns the string representation
func (s GetOAuthProviderOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetOAuthProviderOutput) GoString() string {
	return s.String()
}

// SetAuthorizeTemplate sets the AuthorizeTemplate field's value.
func (s *GetOAuthProviderOutput) SetAuthorizeTemplate(v string) *GetOAuthProviderOutput {
	s.AuthorizeTemplate = &v
	return s
}

// SetAuthorizeURL sets the AuthorizeURL field's value.
func (s *GetOAuthProviderOutput) SetAuthorizeURL(v string) *GetOAuthProviderOutput {
	s.AuthorizeURL = &v
	return s
}

// SetClientId sets the ClientId field's value.
func (s *GetOAuthProviderOutput) SetClientId(v string) *GetOAuthProviderOutput {
	s.ClientId = &v
	return s
}

// SetClientSecret sets the ClientSecret field's value.
func (s *GetOAuthProviderOutput) SetClientSecret(v string) *GetOAuthProviderOutput {
	s.ClientSecret = &v
	return s
}

// SetCreateDate sets the CreateDate field's value.
func (s *GetOAuthProviderOutput) SetCreateDate(v string) *GetOAuthProviderOutput {
	s.CreateDate = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *GetOAuthProviderOutput) SetDescription(v string) *GetOAuthProviderOutput {
	s.Description = &v
	return s
}

// SetIdentityMapType sets the IdentityMapType field's value.
func (s *GetOAuthProviderOutput) SetIdentityMapType(v int32) *GetOAuthProviderOutput {
	s.IdentityMapType = &v
	return s
}

// SetIdpIdentityKey sets the IdpIdentityKey field's value.
func (s *GetOAuthProviderOutput) SetIdpIdentityKey(v string) *GetOAuthProviderOutput {
	s.IdpIdentityKey = &v
	return s
}

// SetOAuthProviderName sets the OAuthProviderName field's value.
func (s *GetOAuthProviderOutput) SetOAuthProviderName(v string) *GetOAuthProviderOutput {
	s.OAuthProviderName = &v
	return s
}

// SetProviderId sets the ProviderId field's value.
func (s *GetOAuthProviderOutput) SetProviderId(v string) *GetOAuthProviderOutput {
	s.ProviderId = &v
	return s
}

// SetSSOType sets the SSOType field's value.
func (s *GetOAuthProviderOutput) SetSSOType(v int32) *GetOAuthProviderOutput {
	s.SSOType = &v
	return s
}

// SetScope sets the Scope field's value.
func (s *GetOAuthProviderOutput) SetScope(v string) *GetOAuthProviderOutput {
	s.Scope = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *GetOAuthProviderOutput) SetStatus(v int32) *GetOAuthProviderOutput {
	s.Status = &v
	return s
}

// SetTokenURL sets the TokenURL field's value.
func (s *GetOAuthProviderOutput) SetTokenURL(v string) *GetOAuthProviderOutput {
	s.TokenURL = &v
	return s
}

// SetTrn sets the Trn field's value.
func (s *GetOAuthProviderOutput) SetTrn(v string) *GetOAuthProviderOutput {
	s.Trn = &v
	return s
}

// SetUpdateDate sets the UpdateDate field's value.
func (s *GetOAuthProviderOutput) SetUpdateDate(v string) *GetOAuthProviderOutput {
	s.UpdateDate = &v
	return s
}

// SetUserInfoURL sets the UserInfoURL field's value.
func (s *GetOAuthProviderOutput) SetUserInfoURL(v string) *GetOAuthProviderOutput {
	s.UserInfoURL = &v
	return s
}
