// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam20210801

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opMoveProjectResourceCommon = "MoveProjectResource"

// MoveProjectResourceCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the MoveProjectResourceCommon operation. The "output" return
// value will be populated with the MoveProjectResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned MoveProjectResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after MoveProjectResourceCommon Send returns without error.
//
// See MoveProjectResourceCommon for more information on using the MoveProjectResourceCommon
// API call, and error handling.
//
//	// Example sending a request using the MoveProjectResourceCommonRequest method.
//	req, resp := client.MoveProjectResourceCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM20210801) MoveProjectResourceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opMoveProjectResourceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// MoveProjectResourceCommon API operation for IAM20210801.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM20210801's
// API operation MoveProjectResourceCommon for usage and error information.
func (c *IAM20210801) MoveProjectResourceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.MoveProjectResourceCommonRequest(input)
	return out, req.Send()
}

// MoveProjectResourceCommonWithContext is the same as MoveProjectResourceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See MoveProjectResourceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM20210801) MoveProjectResourceCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.MoveProjectResourceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opMoveProjectResource = "MoveProjectResource"

// MoveProjectResourceRequest generates a "byteplus/request.Request" representing the
// client's request for the MoveProjectResource operation. The "output" return
// value will be populated with the MoveProjectResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned MoveProjectResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after MoveProjectResourceCommon Send returns without error.
//
// See MoveProjectResource for more information on using the MoveProjectResource
// API call, and error handling.
//
//	// Example sending a request using the MoveProjectResourceRequest method.
//	req, resp := client.MoveProjectResourceRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM20210801) MoveProjectResourceRequest(input *MoveProjectResourceInput) (req *request.Request, output *MoveProjectResourceOutput) {
	op := &request.Operation{
		Name:       opMoveProjectResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &MoveProjectResourceInput{}
	}

	output = &MoveProjectResourceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// MoveProjectResource API operation for IAM20210801.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM20210801's
// API operation MoveProjectResource for usage and error information.
func (c *IAM20210801) MoveProjectResource(input *MoveProjectResourceInput) (*MoveProjectResourceOutput, error) {
	req, out := c.MoveProjectResourceRequest(input)
	return out, req.Send()
}

// MoveProjectResourceWithContext is the same as MoveProjectResource with the addition of
// the ability to pass a context and additional request options.
//
// See MoveProjectResource for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM20210801) MoveProjectResourceWithContext(ctx byteplus.Context, input *MoveProjectResourceInput, opts ...request.Option) (*MoveProjectResourceOutput, error) {
	req, out := c.MoveProjectResourceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type MoveProjectResourceInput struct {
	_ struct{} `type:"structure"`

	// ResourceTrn is a required field
	ResourceTrn []*string `type:"list" required:"true"`

	// TargetProjectName is a required field
	TargetProjectName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s MoveProjectResourceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s MoveProjectResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *MoveProjectResourceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "MoveProjectResourceInput"}
	if s.ResourceTrn == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceTrn"))
	}
	if s.TargetProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("TargetProjectName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetResourceTrn sets the ResourceTrn field's value.
func (s *MoveProjectResourceInput) SetResourceTrn(v []*string) *MoveProjectResourceInput {
	s.ResourceTrn = v
	return s
}

// SetTargetProjectName sets the TargetProjectName field's value.
func (s *MoveProjectResourceInput) SetTargetProjectName(v string) *MoveProjectResourceInput {
	s.TargetProjectName = &v
	return s
}

type MoveProjectResourceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s MoveProjectResourceOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s MoveProjectResourceOutput) GoString() string {
	return s.String()
}
