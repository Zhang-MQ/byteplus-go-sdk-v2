// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam20210801

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opListProjectResourcesCommon = "ListProjectResources"

// ListProjectResourcesCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ListProjectResourcesCommon operation. The "output" return
// value will be populated with the ListProjectResourcesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListProjectResourcesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListProjectResourcesCommon Send returns without error.
//
// See ListProjectResourcesCommon for more information on using the ListProjectResourcesCommon
// API call, and error handling.
//
//	// Example sending a request using the ListProjectResourcesCommonRequest method.
//	req, resp := client.ListProjectResourcesCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM20210801) ListProjectResourcesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListProjectResourcesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListProjectResourcesCommon API operation for IAM20210801.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM20210801's
// API operation ListProjectResourcesCommon for usage and error information.
func (c *IAM20210801) ListProjectResourcesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListProjectResourcesCommonRequest(input)
	return out, req.Send()
}

// ListProjectResourcesCommonWithContext is the same as ListProjectResourcesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListProjectResourcesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM20210801) ListProjectResourcesCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListProjectResourcesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListProjectResources = "ListProjectResources"

// ListProjectResourcesRequest generates a "byteplus/request.Request" representing the
// client's request for the ListProjectResources operation. The "output" return
// value will be populated with the ListProjectResourcesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListProjectResourcesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListProjectResourcesCommon Send returns without error.
//
// See ListProjectResources for more information on using the ListProjectResources
// API call, and error handling.
//
//	// Example sending a request using the ListProjectResourcesRequest method.
//	req, resp := client.ListProjectResourcesRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM20210801) ListProjectResourcesRequest(input *ListProjectResourcesInput) (req *request.Request, output *ListProjectResourcesOutput) {
	op := &request.Operation{
		Name:       opListProjectResources,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListProjectResourcesInput{}
	}

	output = &ListProjectResourcesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListProjectResources API operation for IAM20210801.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM20210801's
// API operation ListProjectResources for usage and error information.
func (c *IAM20210801) ListProjectResources(input *ListProjectResourcesInput) (*ListProjectResourcesOutput, error) {
	req, out := c.ListProjectResourcesRequest(input)
	return out, req.Send()
}

// ListProjectResourcesWithContext is the same as ListProjectResources with the addition of
// the ability to pass a context and additional request options.
//
// See ListProjectResources for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM20210801) ListProjectResourcesWithContext(ctx byteplus.Context, input *ListProjectResourcesInput, opts ...request.Option) (*ListProjectResourcesOutput, error) {
	req, out := c.ListProjectResourcesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListProjectResourcesInput struct {
	_ struct{} `type:"structure"`

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`

	OrderBy *string `type:"string" enum:"EnumOfOrderByForListProjectResourcesInput"`

	// ProjectName is a required field
	ProjectName *string `type:"string" required:"true"`

	Query *string `type:"string"`

	ResourceRegion *string `type:"string"`

	ResourceType *string `type:"string"`

	ServiceName *string `type:"string"`

	Sort *int32 `type:"int32"`

	WithSubProjectResource *int32 `type:"int32"`
}

// String returns the string representation
func (s ListProjectResourcesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListProjectResourcesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListProjectResourcesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListProjectResourcesInput"}
	if s.ProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLimit sets the Limit field's value.
func (s *ListProjectResourcesInput) SetLimit(v int32) *ListProjectResourcesInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListProjectResourcesInput) SetOffset(v int32) *ListProjectResourcesInput {
	s.Offset = &v
	return s
}

// SetOrderBy sets the OrderBy field's value.
func (s *ListProjectResourcesInput) SetOrderBy(v string) *ListProjectResourcesInput {
	s.OrderBy = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *ListProjectResourcesInput) SetProjectName(v string) *ListProjectResourcesInput {
	s.ProjectName = &v
	return s
}

// SetQuery sets the Query field's value.
func (s *ListProjectResourcesInput) SetQuery(v string) *ListProjectResourcesInput {
	s.Query = &v
	return s
}

// SetResourceRegion sets the ResourceRegion field's value.
func (s *ListProjectResourcesInput) SetResourceRegion(v string) *ListProjectResourcesInput {
	s.ResourceRegion = &v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *ListProjectResourcesInput) SetResourceType(v string) *ListProjectResourcesInput {
	s.ResourceType = &v
	return s
}

// SetServiceName sets the ServiceName field's value.
func (s *ListProjectResourcesInput) SetServiceName(v string) *ListProjectResourcesInput {
	s.ServiceName = &v
	return s
}

// SetSort sets the Sort field's value.
func (s *ListProjectResourcesInput) SetSort(v int32) *ListProjectResourcesInput {
	s.Sort = &v
	return s
}

// SetWithSubProjectResource sets the WithSubProjectResource field's value.
func (s *ListProjectResourcesInput) SetWithSubProjectResource(v int32) *ListProjectResourcesInput {
	s.WithSubProjectResource = &v
	return s
}

type ListProjectResourcesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`

	ProjectResources []*ProjectResourceForListProjectResourcesOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s ListProjectResourcesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListProjectResourcesOutput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *ListProjectResourcesOutput) SetLimit(v int32) *ListProjectResourcesOutput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListProjectResourcesOutput) SetOffset(v int32) *ListProjectResourcesOutput {
	s.Offset = &v
	return s
}

// SetProjectResources sets the ProjectResources field's value.
func (s *ListProjectResourcesOutput) SetProjectResources(v []*ProjectResourceForListProjectResourcesOutput) *ListProjectResourcesOutput {
	s.ProjectResources = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListProjectResourcesOutput) SetTotal(v int32) *ListProjectResourcesOutput {
	s.Total = &v
	return s
}

type ProjectResourceForListProjectResourcesOutput struct {
	_ struct{} `type:"structure"`

	AccountID *int64 `type:"int64"`

	CreateDate *string `type:"string"`

	ProjectName *string `type:"string"`

	ResourceID *string `type:"string"`

	ResourceRegion *string `type:"string"`

	ResourceTrn *string `type:"string"`

	ResourceType *string `type:"string"`

	ServiceName *string `type:"string"`

	UpdateDate *string `type:"string"`
}

// String returns the string representation
func (s ProjectResourceForListProjectResourcesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ProjectResourceForListProjectResourcesOutput) GoString() string {
	return s.String()
}

// SetAccountID sets the AccountID field's value.
func (s *ProjectResourceForListProjectResourcesOutput) SetAccountID(v int64) *ProjectResourceForListProjectResourcesOutput {
	s.AccountID = &v
	return s
}

// SetCreateDate sets the CreateDate field's value.
func (s *ProjectResourceForListProjectResourcesOutput) SetCreateDate(v string) *ProjectResourceForListProjectResourcesOutput {
	s.CreateDate = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *ProjectResourceForListProjectResourcesOutput) SetProjectName(v string) *ProjectResourceForListProjectResourcesOutput {
	s.ProjectName = &v
	return s
}

// SetResourceID sets the ResourceID field's value.
func (s *ProjectResourceForListProjectResourcesOutput) SetResourceID(v string) *ProjectResourceForListProjectResourcesOutput {
	s.ResourceID = &v
	return s
}

// SetResourceRegion sets the ResourceRegion field's value.
func (s *ProjectResourceForListProjectResourcesOutput) SetResourceRegion(v string) *ProjectResourceForListProjectResourcesOutput {
	s.ResourceRegion = &v
	return s
}

// SetResourceTrn sets the ResourceTrn field's value.
func (s *ProjectResourceForListProjectResourcesOutput) SetResourceTrn(v string) *ProjectResourceForListProjectResourcesOutput {
	s.ResourceTrn = &v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *ProjectResourceForListProjectResourcesOutput) SetResourceType(v string) *ProjectResourceForListProjectResourcesOutput {
	s.ResourceType = &v
	return s
}

// SetServiceName sets the ServiceName field's value.
func (s *ProjectResourceForListProjectResourcesOutput) SetServiceName(v string) *ProjectResourceForListProjectResourcesOutput {
	s.ServiceName = &v
	return s
}

// SetUpdateDate sets the UpdateDate field's value.
func (s *ProjectResourceForListProjectResourcesOutput) SetUpdateDate(v string) *ProjectResourceForListProjectResourcesOutput {
	s.UpdateDate = &v
	return s
}

const (
	// EnumOfOrderByForListProjectResourcesInputCreatedTime is a EnumOfOrderByForListProjectResourcesInput enum value
	EnumOfOrderByForListProjectResourcesInputCreatedTime = "CreatedTime"

	// EnumOfOrderByForListProjectResourcesInputUpdatedTime is a EnumOfOrderByForListProjectResourcesInput enum value
	EnumOfOrderByForListProjectResourcesInputUpdatedTime = "UpdatedTime"
)
