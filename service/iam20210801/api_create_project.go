// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam20210801

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateProjectCommon = "CreateProject"

// CreateProjectCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateProjectCommon operation. The "output" return
// value will be populated with the CreateProjectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateProjectCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateProjectCommon Send returns without error.
//
// See CreateProjectCommon for more information on using the CreateProjectCommon
// API call, and error handling.
//
//	// Example sending a request using the CreateProjectCommonRequest method.
//	req, resp := client.CreateProjectCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM20210801) CreateProjectCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateProjectCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateProjectCommon API operation for IAM20210801.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM20210801's
// API operation CreateProjectCommon for usage and error information.
func (c *IAM20210801) CreateProjectCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateProjectCommonRequest(input)
	return out, req.Send()
}

// CreateProjectCommonWithContext is the same as CreateProjectCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateProjectCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM20210801) CreateProjectCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateProjectCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateProject = "CreateProject"

// CreateProjectRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateProject operation. The "output" return
// value will be populated with the CreateProjectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateProjectCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateProjectCommon Send returns without error.
//
// See CreateProject for more information on using the CreateProject
// API call, and error handling.
//
//	// Example sending a request using the CreateProjectRequest method.
//	req, resp := client.CreateProjectRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM20210801) CreateProjectRequest(input *CreateProjectInput) (req *request.Request, output *CreateProjectOutput) {
	op := &request.Operation{
		Name:       opCreateProject,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateProjectInput{}
	}

	output = &CreateProjectOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateProject API operation for IAM20210801.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM20210801's
// API operation CreateProject for usage and error information.
func (c *IAM20210801) CreateProject(input *CreateProjectInput) (*CreateProjectOutput, error) {
	req, out := c.CreateProjectRequest(input)
	return out, req.Send()
}

// CreateProjectWithContext is the same as CreateProject with the addition of
// the ability to pass a context and additional request options.
//
// See CreateProject for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM20210801) CreateProjectWithContext(ctx byteplus.Context, input *CreateProjectInput, opts ...request.Option) (*CreateProjectOutput, error) {
	req, out := c.CreateProjectRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateProjectInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	DisplayName *string `type:"string"`

	ParentProjectName *string `type:"string"`

	// ProjectName is a required field
	ProjectName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateProjectInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateProjectInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateProjectInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateProjectInput"}
	if s.ProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateProjectInput) SetDescription(v string) *CreateProjectInput {
	s.Description = &v
	return s
}

// SetDisplayName sets the DisplayName field's value.
func (s *CreateProjectInput) SetDisplayName(v string) *CreateProjectInput {
	s.DisplayName = &v
	return s
}

// SetParentProjectName sets the ParentProjectName field's value.
func (s *CreateProjectInput) SetParentProjectName(v string) *CreateProjectInput {
	s.ParentProjectName = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateProjectInput) SetProjectName(v string) *CreateProjectInput {
	s.ProjectName = &v
	return s
}

type CreateProjectOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	AccountID *int32 `type:"int32"`

	CreateDate *string `type:"string"`

	Description *string `type:"string"`

	DisplayName *string `type:"string"`

	ParentProjectName *string `type:"string"`

	Path *string `type:"string"`

	ProjectName *string `type:"string"`

	Status *string `type:"string"`

	UpdateDate *string `type:"string"`
}

// String returns the string representation
func (s CreateProjectOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateProjectOutput) GoString() string {
	return s.String()
}

// SetAccountID sets the AccountID field's value.
func (s *CreateProjectOutput) SetAccountID(v int32) *CreateProjectOutput {
	s.AccountID = &v
	return s
}

// SetCreateDate sets the CreateDate field's value.
func (s *CreateProjectOutput) SetCreateDate(v string) *CreateProjectOutput {
	s.CreateDate = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateProjectOutput) SetDescription(v string) *CreateProjectOutput {
	s.Description = &v
	return s
}

// SetDisplayName sets the DisplayName field's value.
func (s *CreateProjectOutput) SetDisplayName(v string) *CreateProjectOutput {
	s.DisplayName = &v
	return s
}

// SetParentProjectName sets the ParentProjectName field's value.
func (s *CreateProjectOutput) SetParentProjectName(v string) *CreateProjectOutput {
	s.ParentProjectName = &v
	return s
}

// SetPath sets the Path field's value.
func (s *CreateProjectOutput) SetPath(v string) *CreateProjectOutput {
	s.Path = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateProjectOutput) SetProjectName(v string) *CreateProjectOutput {
	s.ProjectName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *CreateProjectOutput) SetStatus(v string) *CreateProjectOutput {
	s.Status = &v
	return s
}

// SetUpdateDate sets the UpdateDate field's value.
func (s *CreateProjectOutput) SetUpdateDate(v string) *CreateProjectOutput {
	s.UpdateDate = &v
	return s
}
