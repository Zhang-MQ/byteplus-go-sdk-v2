// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam20210801

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDetachPolicyInProjectCommon = "DetachPolicyInProject"

// DetachPolicyInProjectCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DetachPolicyInProjectCommon operation. The "output" return
// value will be populated with the DetachPolicyInProjectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DetachPolicyInProjectCommon Request to send the API call to the service.
// the "output" return value is not valid until after DetachPolicyInProjectCommon Send returns without error.
//
// See DetachPolicyInProjectCommon for more information on using the DetachPolicyInProjectCommon
// API call, and error handling.
//
//	// Example sending a request using the DetachPolicyInProjectCommonRequest method.
//	req, resp := client.DetachPolicyInProjectCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM20210801) DetachPolicyInProjectCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDetachPolicyInProjectCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DetachPolicyInProjectCommon API operation for IAM20210801.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM20210801's
// API operation DetachPolicyInProjectCommon for usage and error information.
func (c *IAM20210801) DetachPolicyInProjectCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DetachPolicyInProjectCommonRequest(input)
	return out, req.Send()
}

// DetachPolicyInProjectCommonWithContext is the same as DetachPolicyInProjectCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DetachPolicyInProjectCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM20210801) DetachPolicyInProjectCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DetachPolicyInProjectCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDetachPolicyInProject = "DetachPolicyInProject"

// DetachPolicyInProjectRequest generates a "byteplus/request.Request" representing the
// client's request for the DetachPolicyInProject operation. The "output" return
// value will be populated with the DetachPolicyInProjectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DetachPolicyInProjectCommon Request to send the API call to the service.
// the "output" return value is not valid until after DetachPolicyInProjectCommon Send returns without error.
//
// See DetachPolicyInProject for more information on using the DetachPolicyInProject
// API call, and error handling.
//
//	// Example sending a request using the DetachPolicyInProjectRequest method.
//	req, resp := client.DetachPolicyInProjectRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *IAM20210801) DetachPolicyInProjectRequest(input *DetachPolicyInProjectInput) (req *request.Request, output *DetachPolicyInProjectOutput) {
	op := &request.Operation{
		Name:       opDetachPolicyInProject,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DetachPolicyInProjectInput{}
	}

	output = &DetachPolicyInProjectOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DetachPolicyInProject API operation for IAM20210801.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for IAM20210801's
// API operation DetachPolicyInProject for usage and error information.
func (c *IAM20210801) DetachPolicyInProject(input *DetachPolicyInProjectInput) (*DetachPolicyInProjectOutput, error) {
	req, out := c.DetachPolicyInProjectRequest(input)
	return out, req.Send()
}

// DetachPolicyInProjectWithContext is the same as DetachPolicyInProject with the addition of
// the ability to pass a context and additional request options.
//
// See DetachPolicyInProject for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM20210801) DetachPolicyInProjectWithContext(ctx byteplus.Context, input *DetachPolicyInProjectInput, opts ...request.Option) (*DetachPolicyInProjectOutput, error) {
	req, out := c.DetachPolicyInProjectRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DetachPolicyInProjectInput struct {
	_ struct{} `type:"structure"`

	// PolicyName is a required field
	PolicyName *string `type:"string" required:"true"`

	// PolicyType is a required field
	PolicyType *string `type:"string" required:"true" enum:"EnumOfPolicyTypeForDetachPolicyInProjectInput"`

	// PrincipalName is a required field
	PrincipalName *string `type:"string" required:"true"`

	// PrincipalType is a required field
	PrincipalType *string `type:"string" required:"true" enum:"EnumOfPrincipalTypeForDetachPolicyInProjectInput"`

	// ProjectName is a required field
	ProjectName []*string `type:"list" required:"true"`
}

// String returns the string representation
func (s DetachPolicyInProjectInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DetachPolicyInProjectInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DetachPolicyInProjectInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DetachPolicyInProjectInput"}
	if s.PolicyName == nil {
		invalidParams.Add(request.NewErrParamRequired("PolicyName"))
	}
	if s.PolicyType == nil {
		invalidParams.Add(request.NewErrParamRequired("PolicyType"))
	}
	if s.PrincipalName == nil {
		invalidParams.Add(request.NewErrParamRequired("PrincipalName"))
	}
	if s.PrincipalType == nil {
		invalidParams.Add(request.NewErrParamRequired("PrincipalType"))
	}
	if s.ProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPolicyName sets the PolicyName field's value.
func (s *DetachPolicyInProjectInput) SetPolicyName(v string) *DetachPolicyInProjectInput {
	s.PolicyName = &v
	return s
}

// SetPolicyType sets the PolicyType field's value.
func (s *DetachPolicyInProjectInput) SetPolicyType(v string) *DetachPolicyInProjectInput {
	s.PolicyType = &v
	return s
}

// SetPrincipalName sets the PrincipalName field's value.
func (s *DetachPolicyInProjectInput) SetPrincipalName(v string) *DetachPolicyInProjectInput {
	s.PrincipalName = &v
	return s
}

// SetPrincipalType sets the PrincipalType field's value.
func (s *DetachPolicyInProjectInput) SetPrincipalType(v string) *DetachPolicyInProjectInput {
	s.PrincipalType = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DetachPolicyInProjectInput) SetProjectName(v []*string) *DetachPolicyInProjectInput {
	s.ProjectName = v
	return s
}

type DetachPolicyInProjectOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DetachPolicyInProjectOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DetachPolicyInProjectOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfPolicyTypeForDetachPolicyInProjectInputSystem is a EnumOfPolicyTypeForDetachPolicyInProjectInput enum value
	EnumOfPolicyTypeForDetachPolicyInProjectInputSystem = "System"

	// EnumOfPolicyTypeForDetachPolicyInProjectInputCustom is a EnumOfPolicyTypeForDetachPolicyInProjectInput enum value
	EnumOfPolicyTypeForDetachPolicyInProjectInputCustom = "Custom"
)

const (
	// EnumOfPrincipalTypeForDetachPolicyInProjectInputUser is a EnumOfPrincipalTypeForDetachPolicyInProjectInput enum value
	EnumOfPrincipalTypeForDetachPolicyInProjectInputUser = "User"

	// EnumOfPrincipalTypeForDetachPolicyInProjectInputRole is a EnumOfPrincipalTypeForDetachPolicyInProjectInput enum value
	EnumOfPrincipalTypeForDetachPolicyInProjectInputRole = "Role"

	// EnumOfPrincipalTypeForDetachPolicyInProjectInputUserGroup is a EnumOfPrincipalTypeForDetachPolicyInProjectInput enum value
	EnumOfPrincipalTypeForDetachPolicyInProjectInputUserGroup = "UserGroup"
)
