// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opQueryPriceForSubscriptionCommon = "QueryPriceForSubscription"

// QueryPriceForSubscriptionCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the QueryPriceForSubscriptionCommon operation. The "output" return
// value will be populated with the QueryPriceForSubscriptionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryPriceForSubscriptionCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryPriceForSubscriptionCommon Send returns without error.
//
// See QueryPriceForSubscriptionCommon for more information on using the QueryPriceForSubscriptionCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryPriceForSubscriptionCommonRequest method.
//    req, resp := client.QueryPriceForSubscriptionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) QueryPriceForSubscriptionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryPriceForSubscriptionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryPriceForSubscriptionCommon API operation for BILLING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for BILLING's
// API operation QueryPriceForSubscriptionCommon for usage and error information.
func (c *BILLING) QueryPriceForSubscriptionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryPriceForSubscriptionCommonRequest(input)
	return out, req.Send()
}

// QueryPriceForSubscriptionCommonWithContext is the same as QueryPriceForSubscriptionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryPriceForSubscriptionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) QueryPriceForSubscriptionCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryPriceForSubscriptionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryPriceForSubscription = "QueryPriceForSubscription"

// QueryPriceForSubscriptionRequest generates a "byteplus/request.Request" representing the
// client's request for the QueryPriceForSubscription operation. The "output" return
// value will be populated with the QueryPriceForSubscriptionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryPriceForSubscriptionCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryPriceForSubscriptionCommon Send returns without error.
//
// See QueryPriceForSubscription for more information on using the QueryPriceForSubscription
// API call, and error handling.
//
//    // Example sending a request using the QueryPriceForSubscriptionRequest method.
//    req, resp := client.QueryPriceForSubscriptionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) QueryPriceForSubscriptionRequest(input *QueryPriceForSubscriptionInput) (req *request.Request, output *QueryPriceForSubscriptionOutput) {
	op := &request.Operation{
		Name:       opQueryPriceForSubscription,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryPriceForSubscriptionInput{}
	}

	output = &QueryPriceForSubscriptionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryPriceForSubscription API operation for BILLING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for BILLING's
// API operation QueryPriceForSubscription for usage and error information.
func (c *BILLING) QueryPriceForSubscription(input *QueryPriceForSubscriptionInput) (*QueryPriceForSubscriptionOutput, error) {
	req, out := c.QueryPriceForSubscriptionRequest(input)
	return out, req.Send()
}

// QueryPriceForSubscriptionWithContext is the same as QueryPriceForSubscription with the addition of
// the ability to pass a context and additional request options.
//
// See QueryPriceForSubscription for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) QueryPriceForSubscriptionWithContext(ctx byteplus.Context, input *QueryPriceForSubscriptionInput, opts ...request.Option) (*QueryPriceForSubscriptionOutput, error) {
	req, out := c.QueryPriceForSubscriptionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConfigListForQueryPriceForSubscriptionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ChargeItemCode *string `type:"string" json:",omitempty"`

	ConfigurationCode *string `type:"string" json:",omitempty"`

	Count *string `type:"string" json:",omitempty"`

	Quantity *int32 `type:"int32" json:",omitempty"`

	UseDuration *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ConfigListForQueryPriceForSubscriptionInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigListForQueryPriceForSubscriptionInput) GoString() string {
	return s.String()
}

// SetChargeItemCode sets the ChargeItemCode field's value.
func (s *ConfigListForQueryPriceForSubscriptionInput) SetChargeItemCode(v string) *ConfigListForQueryPriceForSubscriptionInput {
	s.ChargeItemCode = &v
	return s
}

// SetConfigurationCode sets the ConfigurationCode field's value.
func (s *ConfigListForQueryPriceForSubscriptionInput) SetConfigurationCode(v string) *ConfigListForQueryPriceForSubscriptionInput {
	s.ConfigurationCode = &v
	return s
}

// SetCount sets the Count field's value.
func (s *ConfigListForQueryPriceForSubscriptionInput) SetCount(v string) *ConfigListForQueryPriceForSubscriptionInput {
	s.Count = &v
	return s
}

// SetQuantity sets the Quantity field's value.
func (s *ConfigListForQueryPriceForSubscriptionInput) SetQuantity(v int32) *ConfigListForQueryPriceForSubscriptionInput {
	s.Quantity = &v
	return s
}

// SetUseDuration sets the UseDuration field's value.
func (s *ConfigListForQueryPriceForSubscriptionInput) SetUseDuration(v int32) *ConfigListForQueryPriceForSubscriptionInput {
	s.UseDuration = &v
	return s
}

type ConfigListForQueryPriceForSubscriptionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ChargeItemCode *string `type:"string" json:",omitempty"`

	ConfigurationCode *string `type:"string" json:",omitempty"`

	DiscountAmount *string `type:"string" json:",omitempty"`

	DiscountDetail *DiscountDetailForQueryPriceForSubscriptionOutput `type:"structure" json:",omitempty"`

	OriginalAmount *string `type:"string" json:",omitempty"`

	Price *string `type:"string" json:",omitempty"`

	Quantity *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ConfigListForQueryPriceForSubscriptionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigListForQueryPriceForSubscriptionOutput) GoString() string {
	return s.String()
}

// SetChargeItemCode sets the ChargeItemCode field's value.
func (s *ConfigListForQueryPriceForSubscriptionOutput) SetChargeItemCode(v string) *ConfigListForQueryPriceForSubscriptionOutput {
	s.ChargeItemCode = &v
	return s
}

// SetConfigurationCode sets the ConfigurationCode field's value.
func (s *ConfigListForQueryPriceForSubscriptionOutput) SetConfigurationCode(v string) *ConfigListForQueryPriceForSubscriptionOutput {
	s.ConfigurationCode = &v
	return s
}

// SetDiscountAmount sets the DiscountAmount field's value.
func (s *ConfigListForQueryPriceForSubscriptionOutput) SetDiscountAmount(v string) *ConfigListForQueryPriceForSubscriptionOutput {
	s.DiscountAmount = &v
	return s
}

// SetDiscountDetail sets the DiscountDetail field's value.
func (s *ConfigListForQueryPriceForSubscriptionOutput) SetDiscountDetail(v *DiscountDetailForQueryPriceForSubscriptionOutput) *ConfigListForQueryPriceForSubscriptionOutput {
	s.DiscountDetail = v
	return s
}

// SetOriginalAmount sets the OriginalAmount field's value.
func (s *ConfigListForQueryPriceForSubscriptionOutput) SetOriginalAmount(v string) *ConfigListForQueryPriceForSubscriptionOutput {
	s.OriginalAmount = &v
	return s
}

// SetPrice sets the Price field's value.
func (s *ConfigListForQueryPriceForSubscriptionOutput) SetPrice(v string) *ConfigListForQueryPriceForSubscriptionOutput {
	s.Price = &v
	return s
}

// SetQuantity sets the Quantity field's value.
func (s *ConfigListForQueryPriceForSubscriptionOutput) SetQuantity(v int32) *ConfigListForQueryPriceForSubscriptionOutput {
	s.Quantity = &v
	return s
}

type DiscountDetailForQueryPriceForSubscriptionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DiscountPrice *string `type:"string" json:",omitempty"`

	DiscountType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DiscountDetailForQueryPriceForSubscriptionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DiscountDetailForQueryPriceForSubscriptionOutput) GoString() string {
	return s.String()
}

// SetDiscountPrice sets the DiscountPrice field's value.
func (s *DiscountDetailForQueryPriceForSubscriptionOutput) SetDiscountPrice(v string) *DiscountDetailForQueryPriceForSubscriptionOutput {
	s.DiscountPrice = &v
	return s
}

// SetDiscountType sets the DiscountType field's value.
func (s *DiscountDetailForQueryPriceForSubscriptionOutput) SetDiscountType(v string) *DiscountDetailForQueryPriceForSubscriptionOutput {
	s.DiscountType = &v
	return s
}

type QueryPriceForSubscriptionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ConfigList []*ConfigListForQueryPriceForSubscriptionInput `type:"list" json:",omitempty"`

	// Product is a required field
	Product *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QueryPriceForSubscriptionInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryPriceForSubscriptionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryPriceForSubscriptionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryPriceForSubscriptionInput"}
	if s.Product == nil {
		invalidParams.Add(request.NewErrParamRequired("Product"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConfigList sets the ConfigList field's value.
func (s *QueryPriceForSubscriptionInput) SetConfigList(v []*ConfigListForQueryPriceForSubscriptionInput) *QueryPriceForSubscriptionInput {
	s.ConfigList = v
	return s
}

// SetProduct sets the Product field's value.
func (s *QueryPriceForSubscriptionInput) SetProduct(v string) *QueryPriceForSubscriptionInput {
	s.Product = &v
	return s
}

type QueryPriceForSubscriptionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ConfigList []*ConfigListForQueryPriceForSubscriptionOutput `type:"list" json:",omitempty"`

	Currency *string `type:"string" json:",omitempty"`

	TotalDiscountAmount *string `type:"string" json:",omitempty"`

	TotalOriginalAmount *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s QueryPriceForSubscriptionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryPriceForSubscriptionOutput) GoString() string {
	return s.String()
}

// SetConfigList sets the ConfigList field's value.
func (s *QueryPriceForSubscriptionOutput) SetConfigList(v []*ConfigListForQueryPriceForSubscriptionOutput) *QueryPriceForSubscriptionOutput {
	s.ConfigList = v
	return s
}

// SetCurrency sets the Currency field's value.
func (s *QueryPriceForSubscriptionOutput) SetCurrency(v string) *QueryPriceForSubscriptionOutput {
	s.Currency = &v
	return s
}

// SetTotalDiscountAmount sets the TotalDiscountAmount field's value.
func (s *QueryPriceForSubscriptionOutput) SetTotalDiscountAmount(v string) *QueryPriceForSubscriptionOutput {
	s.TotalDiscountAmount = &v
	return s
}

// SetTotalOriginalAmount sets the TotalOriginalAmount field's value.
func (s *QueryPriceForSubscriptionOutput) SetTotalOriginalAmount(v string) *QueryPriceForSubscriptionOutput {
	s.TotalOriginalAmount = &v
	return s
}
