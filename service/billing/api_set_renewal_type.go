// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opSetRenewalTypeCommon = "SetRenewalType"

// SetRenewalTypeCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the SetRenewalTypeCommon operation. The "output" return
// value will be populated with the SetRenewalTypeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetRenewalTypeCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetRenewalTypeCommon Send returns without error.
//
// See SetRenewalTypeCommon for more information on using the SetRenewalTypeCommon
// API call, and error handling.
//
//    // Example sending a request using the SetRenewalTypeCommonRequest method.
//    req, resp := client.SetRenewalTypeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) SetRenewalTypeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetRenewalTypeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetRenewalTypeCommon API operation for BILLING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for BILLING's
// API operation SetRenewalTypeCommon for usage and error information.
func (c *BILLING) SetRenewalTypeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetRenewalTypeCommonRequest(input)
	return out, req.Send()
}

// SetRenewalTypeCommonWithContext is the same as SetRenewalTypeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SetRenewalTypeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) SetRenewalTypeCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetRenewalTypeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetRenewalType = "SetRenewalType"

// SetRenewalTypeRequest generates a "byteplus/request.Request" representing the
// client's request for the SetRenewalType operation. The "output" return
// value will be populated with the SetRenewalTypeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetRenewalTypeCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetRenewalTypeCommon Send returns without error.
//
// See SetRenewalType for more information on using the SetRenewalType
// API call, and error handling.
//
//    // Example sending a request using the SetRenewalTypeRequest method.
//    req, resp := client.SetRenewalTypeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) SetRenewalTypeRequest(input *SetRenewalTypeInput) (req *request.Request, output *SetRenewalTypeOutput) {
	op := &request.Operation{
		Name:       opSetRenewalType,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetRenewalTypeInput{}
	}

	output = &SetRenewalTypeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetRenewalType API operation for BILLING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for BILLING's
// API operation SetRenewalType for usage and error information.
func (c *BILLING) SetRenewalType(input *SetRenewalTypeInput) (*SetRenewalTypeOutput, error) {
	req, out := c.SetRenewalTypeRequest(input)
	return out, req.Send()
}

// SetRenewalTypeWithContext is the same as SetRenewalType with the addition of
// the ability to pass a context and additional request options.
//
// See SetRenewalType for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) SetRenewalTypeWithContext(ctx byteplus.Context, input *SetRenewalTypeInput, opts ...request.Option) (*SetRenewalTypeOutput, error) {
	req, out := c.SetRenewalTypeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SetRenewalTypeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClientToken *string `type:"string" json:",omitempty"`

	// InstanceID is a required field
	InstanceID *string `type:"string" json:",omitempty" required:"true"`

	// Product is a required field
	Product *string `type:"string" json:",omitempty" required:"true"`

	// RenewType is a required field
	RenewType *string `type:"string" json:",omitempty" required:"true"`

	RenewalDuration *int64 `type:"int64" json:",omitempty"`

	RenewalDurationUnit *string `type:"string" json:",omitempty"`

	RenewalTimes *int64 `type:"int64" json:",omitempty"`

	SetRenewalRelatedInstance *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s SetRenewalTypeInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SetRenewalTypeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetRenewalTypeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SetRenewalTypeInput"}
	if s.InstanceID == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceID"))
	}
	if s.Product == nil {
		invalidParams.Add(request.NewErrParamRequired("Product"))
	}
	if s.RenewType == nil {
		invalidParams.Add(request.NewErrParamRequired("RenewType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *SetRenewalTypeInput) SetClientToken(v string) *SetRenewalTypeInput {
	s.ClientToken = &v
	return s
}

// SetInstanceID sets the InstanceID field's value.
func (s *SetRenewalTypeInput) SetInstanceID(v string) *SetRenewalTypeInput {
	s.InstanceID = &v
	return s
}

// SetProduct sets the Product field's value.
func (s *SetRenewalTypeInput) SetProduct(v string) *SetRenewalTypeInput {
	s.Product = &v
	return s
}

// SetRenewType sets the RenewType field's value.
func (s *SetRenewalTypeInput) SetRenewType(v string) *SetRenewalTypeInput {
	s.RenewType = &v
	return s
}

// SetRenewalDuration sets the RenewalDuration field's value.
func (s *SetRenewalTypeInput) SetRenewalDuration(v int64) *SetRenewalTypeInput {
	s.RenewalDuration = &v
	return s
}

// SetRenewalDurationUnit sets the RenewalDurationUnit field's value.
func (s *SetRenewalTypeInput) SetRenewalDurationUnit(v string) *SetRenewalTypeInput {
	s.RenewalDurationUnit = &v
	return s
}

// SetRenewalTimes sets the RenewalTimes field's value.
func (s *SetRenewalTypeInput) SetRenewalTimes(v int64) *SetRenewalTypeInput {
	s.RenewalTimes = &v
	return s
}

// SetSetRenewalRelatedInstance sets the SetRenewalRelatedInstance field's value.
func (s *SetRenewalTypeInput) SetSetRenewalRelatedInstance(v bool) *SetRenewalTypeInput {
	s.SetRenewalRelatedInstance = &v
	return s
}

type SetRenewalTypeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	SuccessInstanceList []*SuccessInstanceListForSetRenewalTypeOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s SetRenewalTypeOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SetRenewalTypeOutput) GoString() string {
	return s.String()
}

// SetSuccessInstanceList sets the SuccessInstanceList field's value.
func (s *SetRenewalTypeOutput) SetSuccessInstanceList(v []*SuccessInstanceListForSetRenewalTypeOutput) *SetRenewalTypeOutput {
	s.SuccessInstanceList = v
	return s
}

type SuccessInstanceListForSetRenewalTypeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceID *string `type:"string" json:",omitempty"`

	Product *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SuccessInstanceListForSetRenewalTypeOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SuccessInstanceListForSetRenewalTypeOutput) GoString() string {
	return s.String()
}

// SetInstanceID sets the InstanceID field's value.
func (s *SuccessInstanceListForSetRenewalTypeOutput) SetInstanceID(v string) *SuccessInstanceListForSetRenewalTypeOutput {
	s.InstanceID = &v
	return s
}

// SetProduct sets the Product field's value.
func (s *SuccessInstanceListForSetRenewalTypeOutput) SetProduct(v string) *SuccessInstanceListForSetRenewalTypeOutput {
	s.Product = &v
	return s
}
