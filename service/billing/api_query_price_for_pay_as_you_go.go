// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opQueryPriceForPayAsYouGoCommon = "QueryPriceForPayAsYouGo"

// QueryPriceForPayAsYouGoCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the QueryPriceForPayAsYouGoCommon operation. The "output" return
// value will be populated with the QueryPriceForPayAsYouGoCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryPriceForPayAsYouGoCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryPriceForPayAsYouGoCommon Send returns without error.
//
// See QueryPriceForPayAsYouGoCommon for more information on using the QueryPriceForPayAsYouGoCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryPriceForPayAsYouGoCommonRequest method.
//    req, resp := client.QueryPriceForPayAsYouGoCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) QueryPriceForPayAsYouGoCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryPriceForPayAsYouGoCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryPriceForPayAsYouGoCommon API operation for BILLING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for BILLING's
// API operation QueryPriceForPayAsYouGoCommon for usage and error information.
func (c *BILLING) QueryPriceForPayAsYouGoCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryPriceForPayAsYouGoCommonRequest(input)
	return out, req.Send()
}

// QueryPriceForPayAsYouGoCommonWithContext is the same as QueryPriceForPayAsYouGoCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryPriceForPayAsYouGoCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) QueryPriceForPayAsYouGoCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryPriceForPayAsYouGoCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryPriceForPayAsYouGo = "QueryPriceForPayAsYouGo"

// QueryPriceForPayAsYouGoRequest generates a "byteplus/request.Request" representing the
// client's request for the QueryPriceForPayAsYouGo operation. The "output" return
// value will be populated with the QueryPriceForPayAsYouGoCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryPriceForPayAsYouGoCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryPriceForPayAsYouGoCommon Send returns without error.
//
// See QueryPriceForPayAsYouGo for more information on using the QueryPriceForPayAsYouGo
// API call, and error handling.
//
//    // Example sending a request using the QueryPriceForPayAsYouGoRequest method.
//    req, resp := client.QueryPriceForPayAsYouGoRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) QueryPriceForPayAsYouGoRequest(input *QueryPriceForPayAsYouGoInput) (req *request.Request, output *QueryPriceForPayAsYouGoOutput) {
	op := &request.Operation{
		Name:       opQueryPriceForPayAsYouGo,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryPriceForPayAsYouGoInput{}
	}

	output = &QueryPriceForPayAsYouGoOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryPriceForPayAsYouGo API operation for BILLING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for BILLING's
// API operation QueryPriceForPayAsYouGo for usage and error information.
func (c *BILLING) QueryPriceForPayAsYouGo(input *QueryPriceForPayAsYouGoInput) (*QueryPriceForPayAsYouGoOutput, error) {
	req, out := c.QueryPriceForPayAsYouGoRequest(input)
	return out, req.Send()
}

// QueryPriceForPayAsYouGoWithContext is the same as QueryPriceForPayAsYouGo with the addition of
// the ability to pass a context and additional request options.
//
// See QueryPriceForPayAsYouGo for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) QueryPriceForPayAsYouGoWithContext(ctx byteplus.Context, input *QueryPriceForPayAsYouGoInput, opts ...request.Option) (*QueryPriceForPayAsYouGoOutput, error) {
	req, out := c.QueryPriceForPayAsYouGoRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConfigListForQueryPriceForPayAsYouGoInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ChargeItemCode *string `type:"string" json:",omitempty"`

	ConfigurationCode *string `type:"string" json:",omitempty"`

	Count *string `type:"string" json:",omitempty"`

	Quantity *int32 `type:"int32" json:",omitempty"`

	UseDuration *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ConfigListForQueryPriceForPayAsYouGoInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigListForQueryPriceForPayAsYouGoInput) GoString() string {
	return s.String()
}

// SetChargeItemCode sets the ChargeItemCode field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoInput) SetChargeItemCode(v string) *ConfigListForQueryPriceForPayAsYouGoInput {
	s.ChargeItemCode = &v
	return s
}

// SetConfigurationCode sets the ConfigurationCode field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoInput) SetConfigurationCode(v string) *ConfigListForQueryPriceForPayAsYouGoInput {
	s.ConfigurationCode = &v
	return s
}

// SetCount sets the Count field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoInput) SetCount(v string) *ConfigListForQueryPriceForPayAsYouGoInput {
	s.Count = &v
	return s
}

// SetQuantity sets the Quantity field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoInput) SetQuantity(v int32) *ConfigListForQueryPriceForPayAsYouGoInput {
	s.Quantity = &v
	return s
}

// SetUseDuration sets the UseDuration field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoInput) SetUseDuration(v int32) *ConfigListForQueryPriceForPayAsYouGoInput {
	s.UseDuration = &v
	return s
}

type ConfigListForQueryPriceForPayAsYouGoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ChargeItemCode *string `type:"string" json:",omitempty"`

	ConfigurationCode *string `type:"string" json:",omitempty"`

	DiscountAmount *string `type:"string" json:",omitempty"`

	DiscountDetail *DiscountDetailForQueryPriceForPayAsYouGoOutput `type:"structure" json:",omitempty"`

	OriginalAmount *string `type:"string" json:",omitempty"`

	Price *string `type:"string" json:",omitempty"`

	Quantity *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ConfigListForQueryPriceForPayAsYouGoOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigListForQueryPriceForPayAsYouGoOutput) GoString() string {
	return s.String()
}

// SetChargeItemCode sets the ChargeItemCode field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoOutput) SetChargeItemCode(v string) *ConfigListForQueryPriceForPayAsYouGoOutput {
	s.ChargeItemCode = &v
	return s
}

// SetConfigurationCode sets the ConfigurationCode field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoOutput) SetConfigurationCode(v string) *ConfigListForQueryPriceForPayAsYouGoOutput {
	s.ConfigurationCode = &v
	return s
}

// SetDiscountAmount sets the DiscountAmount field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoOutput) SetDiscountAmount(v string) *ConfigListForQueryPriceForPayAsYouGoOutput {
	s.DiscountAmount = &v
	return s
}

// SetDiscountDetail sets the DiscountDetail field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoOutput) SetDiscountDetail(v *DiscountDetailForQueryPriceForPayAsYouGoOutput) *ConfigListForQueryPriceForPayAsYouGoOutput {
	s.DiscountDetail = v
	return s
}

// SetOriginalAmount sets the OriginalAmount field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoOutput) SetOriginalAmount(v string) *ConfigListForQueryPriceForPayAsYouGoOutput {
	s.OriginalAmount = &v
	return s
}

// SetPrice sets the Price field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoOutput) SetPrice(v string) *ConfigListForQueryPriceForPayAsYouGoOutput {
	s.Price = &v
	return s
}

// SetQuantity sets the Quantity field's value.
func (s *ConfigListForQueryPriceForPayAsYouGoOutput) SetQuantity(v int32) *ConfigListForQueryPriceForPayAsYouGoOutput {
	s.Quantity = &v
	return s
}

type DiscountDetailForQueryPriceForPayAsYouGoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DiscountPrice *string `type:"string" json:",omitempty"`

	DiscountType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DiscountDetailForQueryPriceForPayAsYouGoOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DiscountDetailForQueryPriceForPayAsYouGoOutput) GoString() string {
	return s.String()
}

// SetDiscountPrice sets the DiscountPrice field's value.
func (s *DiscountDetailForQueryPriceForPayAsYouGoOutput) SetDiscountPrice(v string) *DiscountDetailForQueryPriceForPayAsYouGoOutput {
	s.DiscountPrice = &v
	return s
}

// SetDiscountType sets the DiscountType field's value.
func (s *DiscountDetailForQueryPriceForPayAsYouGoOutput) SetDiscountType(v string) *DiscountDetailForQueryPriceForPayAsYouGoOutput {
	s.DiscountType = &v
	return s
}

type QueryPriceForPayAsYouGoInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ConfigList []*ConfigListForQueryPriceForPayAsYouGoInput `type:"list" json:",omitempty"`

	// Product is a required field
	Product *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QueryPriceForPayAsYouGoInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryPriceForPayAsYouGoInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryPriceForPayAsYouGoInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryPriceForPayAsYouGoInput"}
	if s.Product == nil {
		invalidParams.Add(request.NewErrParamRequired("Product"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConfigList sets the ConfigList field's value.
func (s *QueryPriceForPayAsYouGoInput) SetConfigList(v []*ConfigListForQueryPriceForPayAsYouGoInput) *QueryPriceForPayAsYouGoInput {
	s.ConfigList = v
	return s
}

// SetProduct sets the Product field's value.
func (s *QueryPriceForPayAsYouGoInput) SetProduct(v string) *QueryPriceForPayAsYouGoInput {
	s.Product = &v
	return s
}

type QueryPriceForPayAsYouGoOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ConfigList []*ConfigListForQueryPriceForPayAsYouGoOutput `type:"list" json:",omitempty"`

	Currency *string `type:"string" json:",omitempty"`

	TotalDiscountAmount *string `type:"string" json:",omitempty"`

	TotalOriginalAmount *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s QueryPriceForPayAsYouGoOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryPriceForPayAsYouGoOutput) GoString() string {
	return s.String()
}

// SetConfigList sets the ConfigList field's value.
func (s *QueryPriceForPayAsYouGoOutput) SetConfigList(v []*ConfigListForQueryPriceForPayAsYouGoOutput) *QueryPriceForPayAsYouGoOutput {
	s.ConfigList = v
	return s
}

// SetCurrency sets the Currency field's value.
func (s *QueryPriceForPayAsYouGoOutput) SetCurrency(v string) *QueryPriceForPayAsYouGoOutput {
	s.Currency = &v
	return s
}

// SetTotalDiscountAmount sets the TotalDiscountAmount field's value.
func (s *QueryPriceForPayAsYouGoOutput) SetTotalDiscountAmount(v string) *QueryPriceForPayAsYouGoOutput {
	s.TotalDiscountAmount = &v
	return s
}

// SetTotalOriginalAmount sets the TotalOriginalAmount field's value.
func (s *QueryPriceForPayAsYouGoOutput) SetTotalOriginalAmount(v string) *QueryPriceForPayAsYouGoOutput {
	s.TotalOriginalAmount = &v
	return s
}
