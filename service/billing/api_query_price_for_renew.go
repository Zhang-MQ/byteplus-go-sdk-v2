// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package billing

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opQueryPriceForRenewCommon = "QueryPriceForRenew"

// QueryPriceForRenewCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the QueryPriceForRenewCommon operation. The "output" return
// value will be populated with the QueryPriceForRenewCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryPriceForRenewCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryPriceForRenewCommon Send returns without error.
//
// See QueryPriceForRenewCommon for more information on using the QueryPriceForRenewCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryPriceForRenewCommonRequest method.
//    req, resp := client.QueryPriceForRenewCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) QueryPriceForRenewCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryPriceForRenewCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryPriceForRenewCommon API operation for BILLING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for BILLING's
// API operation QueryPriceForRenewCommon for usage and error information.
func (c *BILLING) QueryPriceForRenewCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryPriceForRenewCommonRequest(input)
	return out, req.Send()
}

// QueryPriceForRenewCommonWithContext is the same as QueryPriceForRenewCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryPriceForRenewCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) QueryPriceForRenewCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryPriceForRenewCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryPriceForRenew = "QueryPriceForRenew"

// QueryPriceForRenewRequest generates a "byteplus/request.Request" representing the
// client's request for the QueryPriceForRenew operation. The "output" return
// value will be populated with the QueryPriceForRenewCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryPriceForRenewCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryPriceForRenewCommon Send returns without error.
//
// See QueryPriceForRenew for more information on using the QueryPriceForRenew
// API call, and error handling.
//
//    // Example sending a request using the QueryPriceForRenewRequest method.
//    req, resp := client.QueryPriceForRenewRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BILLING) QueryPriceForRenewRequest(input *QueryPriceForRenewInput) (req *request.Request, output *QueryPriceForRenewOutput) {
	op := &request.Operation{
		Name:       opQueryPriceForRenew,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryPriceForRenewInput{}
	}

	output = &QueryPriceForRenewOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryPriceForRenew API operation for BILLING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for BILLING's
// API operation QueryPriceForRenew for usage and error information.
func (c *BILLING) QueryPriceForRenew(input *QueryPriceForRenewInput) (*QueryPriceForRenewOutput, error) {
	req, out := c.QueryPriceForRenewRequest(input)
	return out, req.Send()
}

// QueryPriceForRenewWithContext is the same as QueryPriceForRenew with the addition of
// the ability to pass a context and additional request options.
//
// See QueryPriceForRenew for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BILLING) QueryPriceForRenewWithContext(ctx byteplus.Context, input *QueryPriceForRenewInput, opts ...request.Option) (*QueryPriceForRenewOutput, error) {
	req, out := c.QueryPriceForRenewRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type InstanceAmountListForQueryPriceForRenewOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ConfigurationCode *string `type:"string" json:",omitempty"`

	DiscountAmount *string `type:"string" json:",omitempty"`

	InstanceID *string `type:"string" json:",omitempty"`

	OriginalAmount *string `type:"string" json:",omitempty"`

	Product *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s InstanceAmountListForQueryPriceForRenewOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceAmountListForQueryPriceForRenewOutput) GoString() string {
	return s.String()
}

// SetConfigurationCode sets the ConfigurationCode field's value.
func (s *InstanceAmountListForQueryPriceForRenewOutput) SetConfigurationCode(v string) *InstanceAmountListForQueryPriceForRenewOutput {
	s.ConfigurationCode = &v
	return s
}

// SetDiscountAmount sets the DiscountAmount field's value.
func (s *InstanceAmountListForQueryPriceForRenewOutput) SetDiscountAmount(v string) *InstanceAmountListForQueryPriceForRenewOutput {
	s.DiscountAmount = &v
	return s
}

// SetInstanceID sets the InstanceID field's value.
func (s *InstanceAmountListForQueryPriceForRenewOutput) SetInstanceID(v string) *InstanceAmountListForQueryPriceForRenewOutput {
	s.InstanceID = &v
	return s
}

// SetOriginalAmount sets the OriginalAmount field's value.
func (s *InstanceAmountListForQueryPriceForRenewOutput) SetOriginalAmount(v string) *InstanceAmountListForQueryPriceForRenewOutput {
	s.OriginalAmount = &v
	return s
}

// SetProduct sets the Product field's value.
func (s *InstanceAmountListForQueryPriceForRenewOutput) SetProduct(v string) *InstanceAmountListForQueryPriceForRenewOutput {
	s.Product = &v
	return s
}

type QueryPriceForRenewInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceIDList []*string `type:"list" json:",omitempty"`

	// Product is a required field
	Product *string `type:"string" json:",omitempty" required:"true"`

	// UseDuration is a required field
	UseDuration *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QueryPriceForRenewInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryPriceForRenewInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryPriceForRenewInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryPriceForRenewInput"}
	if s.Product == nil {
		invalidParams.Add(request.NewErrParamRequired("Product"))
	}
	if s.UseDuration == nil {
		invalidParams.Add(request.NewErrParamRequired("UseDuration"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceIDList sets the InstanceIDList field's value.
func (s *QueryPriceForRenewInput) SetInstanceIDList(v []*string) *QueryPriceForRenewInput {
	s.InstanceIDList = v
	return s
}

// SetProduct sets the Product field's value.
func (s *QueryPriceForRenewInput) SetProduct(v string) *QueryPriceForRenewInput {
	s.Product = &v
	return s
}

// SetUseDuration sets the UseDuration field's value.
func (s *QueryPriceForRenewInput) SetUseDuration(v int32) *QueryPriceForRenewInput {
	s.UseDuration = &v
	return s
}

type QueryPriceForRenewOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Currency *string `type:"string" json:",omitempty"`

	InstanceAmountList []*InstanceAmountListForQueryPriceForRenewOutput `type:"list" json:",omitempty"`

	TotalDiscountAmount *string `type:"string" json:",omitempty"`

	TotalOriginalAmount *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s QueryPriceForRenewOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryPriceForRenewOutput) GoString() string {
	return s.String()
}

// SetCurrency sets the Currency field's value.
func (s *QueryPriceForRenewOutput) SetCurrency(v string) *QueryPriceForRenewOutput {
	s.Currency = &v
	return s
}

// SetInstanceAmountList sets the InstanceAmountList field's value.
func (s *QueryPriceForRenewOutput) SetInstanceAmountList(v []*InstanceAmountListForQueryPriceForRenewOutput) *QueryPriceForRenewOutput {
	s.InstanceAmountList = v
	return s
}

// SetTotalDiscountAmount sets the TotalDiscountAmount field's value.
func (s *QueryPriceForRenewOutput) SetTotalDiscountAmount(v string) *QueryPriceForRenewOutput {
	s.TotalDiscountAmount = &v
	return s
}

// SetTotalOriginalAmount sets the TotalOriginalAmount field's value.
func (s *QueryPriceForRenewOutput) SetTotalOriginalAmount(v string) *QueryPriceForRenewOutput {
	s.TotalOriginalAmount = &v
	return s
}
